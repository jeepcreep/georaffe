{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/node_modules/.pnpm/is-any-array@2.0.1/node_modules/is-any-array/lib-esm/index.js","/turbopack/[project]/node_modules/node_modules/.pnpm/ml-array-max@1.2.4/node_modules/ml-array-max/lib-es6/index.js","/turbopack/[project]/node_modules/node_modules/.pnpm/ml-array-min@1.2.3/node_modules/ml-array-min/lib-es6/index.js","/turbopack/[project]/node_modules/node_modules/.pnpm/ml-array-rescale@1.3.7/node_modules/ml-array-rescale/lib-es6/index.js","/turbopack/[project]/node_modules/node_modules/.pnpm/ml-matrix@6.11.0/node_modules/ml-matrix/matrix.js","/turbopack/[project]/node_modules/node_modules/.pnpm/ml-matrix@6.11.0/node_modules/ml-matrix/matrix.mjs","/turbopack/[project]/node_modules/@allmaps/transform/src/transformation.ts","/turbopack/[project]/node_modules/@allmaps/transform/src/shared/helmert.ts","/turbopack/[project]/node_modules/@allmaps/transform/src/shared/straight.ts","/turbopack/[project]/node_modules/@allmaps/transform/src/shared/polynomial.ts","/turbopack/[project]/node_modules/@allmaps/transform/src/shared/projective.ts","/turbopack/[project]/node_modules/@allmaps/transform/src/shared/radial-basis-function.ts","/turbopack/[project]/node_modules/@allmaps/transform/src/shared/kernel-functions.ts","/turbopack/[project]/node_modules/@allmaps/transform/src/shared/norm-functions.ts","/turbopack/[project]/node_modules/@allmaps/transform/src/shared/transform-helper-functions.ts","/turbopack/[project]/node_modules/@allmaps/transform/src/transformer.ts","/turbopack/[project]/node_modules/@allmaps/transform/src/distortion.ts"],"sourcesContent":["// eslint-disable-next-line @typescript-eslint/unbound-method\nconst toString = Object.prototype.toString;\n/**\n * Checks if an object is an instance of an Array (array or typed array, except those that contain bigint values).\n *\n * @param value - Object to check.\n * @returns True if the object is an array or a typed array.\n */\nexport function isAnyArray(value) {\n    const tag = toString.call(value);\n    return tag.endsWith('Array]') && !tag.includes('Big');\n}\n//# sourceMappingURL=index.js.map","import { isAnyArray } from 'is-any-array';\n\nfunction max(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isAnyArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var _options$fromIndex = options.fromIndex,\n      fromIndex = _options$fromIndex === void 0 ? 0 : _options$fromIndex,\n      _options$toIndex = options.toIndex,\n      toIndex = _options$toIndex === void 0 ? input.length : _options$toIndex;\n\n  if (fromIndex < 0 || fromIndex >= input.length || !Number.isInteger(fromIndex)) {\n    throw new Error('fromIndex must be a positive integer smaller than length');\n  }\n\n  if (toIndex <= fromIndex || toIndex > input.length || !Number.isInteger(toIndex)) {\n    throw new Error('toIndex must be an integer greater than fromIndex and at most equal to length');\n  }\n\n  var maxValue = input[fromIndex];\n\n  for (var i = fromIndex + 1; i < toIndex; i++) {\n    if (input[i] > maxValue) maxValue = input[i];\n  }\n\n  return maxValue;\n}\n\nexport { max as default };\n","import { isAnyArray } from 'is-any-array';\n\nfunction min(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isAnyArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var _options$fromIndex = options.fromIndex,\n      fromIndex = _options$fromIndex === void 0 ? 0 : _options$fromIndex,\n      _options$toIndex = options.toIndex,\n      toIndex = _options$toIndex === void 0 ? input.length : _options$toIndex;\n\n  if (fromIndex < 0 || fromIndex >= input.length || !Number.isInteger(fromIndex)) {\n    throw new Error('fromIndex must be a positive integer smaller than length');\n  }\n\n  if (toIndex <= fromIndex || toIndex > input.length || !Number.isInteger(toIndex)) {\n    throw new Error('toIndex must be an integer greater than fromIndex and at most equal to length');\n  }\n\n  var minValue = input[fromIndex];\n\n  for (var i = fromIndex + 1; i < toIndex; i++) {\n    if (input[i] < minValue) minValue = input[i];\n  }\n\n  return minValue;\n}\n\nexport { min as default };\n","import { isAnyArray } from 'is-any-array';\nimport max from 'ml-array-max';\nimport min from 'ml-array-min';\n\nfunction rescale(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isAnyArray(input)) {\n    throw new TypeError('input must be an array');\n  } else if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var output;\n\n  if (options.output !== undefined) {\n    if (!isAnyArray(options.output)) {\n      throw new TypeError('output option must be an array if specified');\n    }\n\n    output = options.output;\n  } else {\n    output = new Array(input.length);\n  }\n\n  var currentMin = min(input);\n  var currentMax = max(input);\n\n  if (currentMin === currentMax) {\n    throw new RangeError('minimum and maximum input values are equal. Cannot rescale a constant array');\n  }\n\n  var _options$min = options.min,\n      minValue = _options$min === void 0 ? options.autoMinMax ? currentMin : 0 : _options$min,\n      _options$max = options.max,\n      maxValue = _options$max === void 0 ? options.autoMinMax ? currentMax : 1 : _options$max;\n\n  if (minValue >= maxValue) {\n    throw new RangeError('min option must be smaller than max option');\n  }\n\n  var factor = (maxValue - minValue) / (currentMax - currentMin);\n\n  for (var i = 0; i < input.length; i++) {\n    output[i] = (input[i] - currentMin) * factor + minValue;\n  }\n\n  return output;\n}\n\nexport { rescale as default };\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar isAnyArray = require('is-any-array');\nvar rescale = require('ml-array-rescale');\n\nconst indent = ' '.repeat(2);\nconst indentData = ' '.repeat(4);\n\nfunction inspectMatrix() {\n  return inspectMatrixWithOptions(this);\n}\n\nfunction inspectMatrixWithOptions(matrix, options = {}) {\n  const {\n    maxRows = 15,\n    maxColumns = 10,\n    maxNumSize = 8,\n    padMinus = 'auto',\n  } = options;\n  return `${matrix.constructor.name} {\n${indent}[\n${indentData}${inspectData(matrix, maxRows, maxColumns, maxNumSize, padMinus)}\n${indent}]\n${indent}rows: ${matrix.rows}\n${indent}columns: ${matrix.columns}\n}`;\n}\n\nfunction inspectData(matrix, maxRows, maxColumns, maxNumSize, padMinus) {\n  const { rows, columns } = matrix;\n  const maxI = Math.min(rows, maxRows);\n  const maxJ = Math.min(columns, maxColumns);\n  const result = [];\n\n  if (padMinus === 'auto') {\n    padMinus = false;\n    loop: for (let i = 0; i < maxI; i++) {\n      for (let j = 0; j < maxJ; j++) {\n        if (matrix.get(i, j) < 0) {\n          padMinus = true;\n          break loop;\n        }\n      }\n    }\n  }\n\n  for (let i = 0; i < maxI; i++) {\n    let line = [];\n    for (let j = 0; j < maxJ; j++) {\n      line.push(formatNumber(matrix.get(i, j), maxNumSize, padMinus));\n    }\n    result.push(`${line.join(' ')}`);\n  }\n  if (maxJ !== columns) {\n    result[result.length - 1] += ` ... ${columns - maxColumns} more columns`;\n  }\n  if (maxI !== rows) {\n    result.push(`... ${rows - maxRows} more rows`);\n  }\n  return result.join(`\\n${indentData}`);\n}\n\nfunction formatNumber(num, maxNumSize, padMinus) {\n  return (\n    num >= 0 && padMinus\n      ? ` ${formatNumber2(num, maxNumSize - 1)}`\n      : formatNumber2(num, maxNumSize)\n  ).padEnd(maxNumSize);\n}\n\nfunction formatNumber2(num, len) {\n  // small.length numbers should be as is\n  let str = num.toString();\n  if (str.length <= len) return str;\n\n  // (7)'0.00123' is better then (7)'1.23e-2'\n  // (8)'0.000123' is worse then (7)'1.23e-3',\n  let fix = num.toFixed(len);\n  if (fix.length > len) {\n    fix = num.toFixed(Math.max(0, len - (fix.length - len)));\n  }\n  if (\n    fix.length <= len &&\n    !fix.startsWith('0.000') &&\n    !fix.startsWith('-0.000')\n  ) {\n    return fix;\n  }\n\n  // well, if it's still too long the user should've used longer numbers\n  let exp = num.toExponential(len);\n  if (exp.length > len) {\n    exp = num.toExponential(Math.max(0, len - (exp.length - len)));\n  }\n  return exp.slice(0);\n}\n\nfunction installMathOperations(AbstractMatrix, Matrix) {\n  AbstractMatrix.prototype.add = function add(value) {\n    if (typeof value === 'number') return this.addS(value);\n    return this.addM(value);\n  };\n\n  AbstractMatrix.prototype.addS = function addS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.addM = function addM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.add = function add(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.add(value);\n  };\n\n  AbstractMatrix.prototype.sub = function sub(value) {\n    if (typeof value === 'number') return this.subS(value);\n    return this.subM(value);\n  };\n\n  AbstractMatrix.prototype.subS = function subS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.subM = function subM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sub = function sub(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sub(value);\n  };\n  AbstractMatrix.prototype.subtract = AbstractMatrix.prototype.sub;\n  AbstractMatrix.prototype.subtractS = AbstractMatrix.prototype.subS;\n  AbstractMatrix.prototype.subtractM = AbstractMatrix.prototype.subM;\n  AbstractMatrix.subtract = AbstractMatrix.sub;\n\n  AbstractMatrix.prototype.mul = function mul(value) {\n    if (typeof value === 'number') return this.mulS(value);\n    return this.mulM(value);\n  };\n\n  AbstractMatrix.prototype.mulS = function mulS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.mulM = function mulM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.mul = function mul(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.mul(value);\n  };\n  AbstractMatrix.prototype.multiply = AbstractMatrix.prototype.mul;\n  AbstractMatrix.prototype.multiplyS = AbstractMatrix.prototype.mulS;\n  AbstractMatrix.prototype.multiplyM = AbstractMatrix.prototype.mulM;\n  AbstractMatrix.multiply = AbstractMatrix.mul;\n\n  AbstractMatrix.prototype.div = function div(value) {\n    if (typeof value === 'number') return this.divS(value);\n    return this.divM(value);\n  };\n\n  AbstractMatrix.prototype.divS = function divS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.divM = function divM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.div = function div(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.div(value);\n  };\n  AbstractMatrix.prototype.divide = AbstractMatrix.prototype.div;\n  AbstractMatrix.prototype.divideS = AbstractMatrix.prototype.divS;\n  AbstractMatrix.prototype.divideM = AbstractMatrix.prototype.divM;\n  AbstractMatrix.divide = AbstractMatrix.div;\n\n  AbstractMatrix.prototype.mod = function mod(value) {\n    if (typeof value === 'number') return this.modS(value);\n    return this.modM(value);\n  };\n\n  AbstractMatrix.prototype.modS = function modS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) % value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.modM = function modM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) % matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.mod = function mod(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.mod(value);\n  };\n  AbstractMatrix.prototype.modulus = AbstractMatrix.prototype.mod;\n  AbstractMatrix.prototype.modulusS = AbstractMatrix.prototype.modS;\n  AbstractMatrix.prototype.modulusM = AbstractMatrix.prototype.modM;\n  AbstractMatrix.modulus = AbstractMatrix.mod;\n\n  AbstractMatrix.prototype.and = function and(value) {\n    if (typeof value === 'number') return this.andS(value);\n    return this.andM(value);\n  };\n\n  AbstractMatrix.prototype.andS = function andS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) & value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.andM = function andM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) & matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.and = function and(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.and(value);\n  };\n\n  AbstractMatrix.prototype.or = function or(value) {\n    if (typeof value === 'number') return this.orS(value);\n    return this.orM(value);\n  };\n\n  AbstractMatrix.prototype.orS = function orS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) | value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.orM = function orM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) | matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.or = function or(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.or(value);\n  };\n\n  AbstractMatrix.prototype.xor = function xor(value) {\n    if (typeof value === 'number') return this.xorS(value);\n    return this.xorM(value);\n  };\n\n  AbstractMatrix.prototype.xorS = function xorS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ^ value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.xorM = function xorM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ^ matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.xor = function xor(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.xor(value);\n  };\n\n  AbstractMatrix.prototype.leftShift = function leftShift(value) {\n    if (typeof value === 'number') return this.leftShiftS(value);\n    return this.leftShiftM(value);\n  };\n\n  AbstractMatrix.prototype.leftShiftS = function leftShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) << value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.leftShiftM = function leftShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) << matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.leftShift = function leftShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.leftShift(value);\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShift = function signPropagatingRightShift(value) {\n    if (typeof value === 'number') return this.signPropagatingRightShiftS(value);\n    return this.signPropagatingRightShiftM(value);\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShiftS = function signPropagatingRightShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >> value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShiftM = function signPropagatingRightShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >> matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.signPropagatingRightShift = function signPropagatingRightShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.signPropagatingRightShift(value);\n  };\n\n  AbstractMatrix.prototype.rightShift = function rightShift(value) {\n    if (typeof value === 'number') return this.rightShiftS(value);\n    return this.rightShiftM(value);\n  };\n\n  AbstractMatrix.prototype.rightShiftS = function rightShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >>> value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.rightShiftM = function rightShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >>> matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.rightShift = function rightShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.rightShift(value);\n  };\n  AbstractMatrix.prototype.zeroFillRightShift = AbstractMatrix.prototype.rightShift;\n  AbstractMatrix.prototype.zeroFillRightShiftS = AbstractMatrix.prototype.rightShiftS;\n  AbstractMatrix.prototype.zeroFillRightShiftM = AbstractMatrix.prototype.rightShiftM;\n  AbstractMatrix.zeroFillRightShift = AbstractMatrix.rightShift;\n\n  AbstractMatrix.prototype.not = function not() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, ~(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.not = function not(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.not();\n  };\n\n  AbstractMatrix.prototype.abs = function abs() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.abs(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.abs = function abs(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.abs();\n  };\n\n  AbstractMatrix.prototype.acos = function acos() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.acos(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.acos = function acos(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.acos();\n  };\n\n  AbstractMatrix.prototype.acosh = function acosh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.acosh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.acosh = function acosh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.acosh();\n  };\n\n  AbstractMatrix.prototype.asin = function asin() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.asin(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.asin = function asin(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.asin();\n  };\n\n  AbstractMatrix.prototype.asinh = function asinh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.asinh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.asinh = function asinh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.asinh();\n  };\n\n  AbstractMatrix.prototype.atan = function atan() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.atan(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.atan = function atan(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.atan();\n  };\n\n  AbstractMatrix.prototype.atanh = function atanh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.atanh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.atanh = function atanh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.atanh();\n  };\n\n  AbstractMatrix.prototype.cbrt = function cbrt() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cbrt(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cbrt = function cbrt(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cbrt();\n  };\n\n  AbstractMatrix.prototype.ceil = function ceil() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.ceil(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.ceil = function ceil(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.ceil();\n  };\n\n  AbstractMatrix.prototype.clz32 = function clz32() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.clz32(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.clz32 = function clz32(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.clz32();\n  };\n\n  AbstractMatrix.prototype.cos = function cos() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cos(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cos = function cos(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cos();\n  };\n\n  AbstractMatrix.prototype.cosh = function cosh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cosh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cosh = function cosh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cosh();\n  };\n\n  AbstractMatrix.prototype.exp = function exp() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.exp(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.exp = function exp(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.exp();\n  };\n\n  AbstractMatrix.prototype.expm1 = function expm1() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.expm1(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.expm1 = function expm1(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.expm1();\n  };\n\n  AbstractMatrix.prototype.floor = function floor() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.floor(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.floor = function floor(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.floor();\n  };\n\n  AbstractMatrix.prototype.fround = function fround() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.fround(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.fround = function fround(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.fround();\n  };\n\n  AbstractMatrix.prototype.log = function log() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log = function log(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log();\n  };\n\n  AbstractMatrix.prototype.log1p = function log1p() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log1p(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log1p = function log1p(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log1p();\n  };\n\n  AbstractMatrix.prototype.log10 = function log10() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log10(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log10 = function log10(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log10();\n  };\n\n  AbstractMatrix.prototype.log2 = function log2() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log2(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log2 = function log2(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log2();\n  };\n\n  AbstractMatrix.prototype.round = function round() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.round(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.round = function round(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.round();\n  };\n\n  AbstractMatrix.prototype.sign = function sign() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sign(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sign = function sign(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sign();\n  };\n\n  AbstractMatrix.prototype.sin = function sin() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sin(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sin = function sin(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sin();\n  };\n\n  AbstractMatrix.prototype.sinh = function sinh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sinh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sinh = function sinh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sinh();\n  };\n\n  AbstractMatrix.prototype.sqrt = function sqrt() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sqrt(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sqrt = function sqrt(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sqrt();\n  };\n\n  AbstractMatrix.prototype.tan = function tan() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.tan(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.tan = function tan(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.tan();\n  };\n\n  AbstractMatrix.prototype.tanh = function tanh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.tanh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.tanh = function tanh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.tanh();\n  };\n\n  AbstractMatrix.prototype.trunc = function trunc() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.trunc(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.trunc = function trunc(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.trunc();\n  };\n\n  AbstractMatrix.pow = function pow(matrix, arg0) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.pow(arg0);\n  };\n\n  AbstractMatrix.prototype.pow = function pow(value) {\n    if (typeof value === 'number') return this.powS(value);\n    return this.powM(value);\n  };\n\n  AbstractMatrix.prototype.powS = function powS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.pow(this.get(i, j), value));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.powM = function powM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.pow(this.get(i, j), matrix.get(i, j)));\n      }\n    }\n    return this;\n  };\n}\n\n/**\n * @private\n * Check that a row index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nfunction checkRowIndex(matrix, index, outer) {\n  let max = outer ? matrix.rows : matrix.rows - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Row index out of range');\n  }\n}\n\n/**\n * @private\n * Check that a column index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nfunction checkColumnIndex(matrix, index, outer) {\n  let max = outer ? matrix.columns : matrix.columns - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Column index out of range');\n  }\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nfunction checkRowVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.columns) {\n    throw new RangeError(\n      'vector size must be the same as the number of columns',\n    );\n  }\n  return vector;\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nfunction checkColumnVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.rows) {\n    throw new RangeError('vector size must be the same as the number of rows');\n  }\n  return vector;\n}\n\nfunction checkRowIndices(matrix, rowIndices) {\n  if (!isAnyArray.isAnyArray(rowIndices)) {\n    throw new TypeError('row indices must be an array');\n  }\n\n  for (let i = 0; i < rowIndices.length; i++) {\n    if (rowIndices[i] < 0 || rowIndices[i] >= matrix.rows) {\n      throw new RangeError('row indices are out of range');\n    }\n  }\n}\n\nfunction checkColumnIndices(matrix, columnIndices) {\n  if (!isAnyArray.isAnyArray(columnIndices)) {\n    throw new TypeError('column indices must be an array');\n  }\n\n  for (let i = 0; i < columnIndices.length; i++) {\n    if (columnIndices[i] < 0 || columnIndices[i] >= matrix.columns) {\n      throw new RangeError('column indices are out of range');\n    }\n  }\n}\n\nfunction checkRange(matrix, startRow, endRow, startColumn, endColumn) {\n  if (arguments.length !== 5) {\n    throw new RangeError('expected 4 arguments');\n  }\n  checkNumber('startRow', startRow);\n  checkNumber('endRow', endRow);\n  checkNumber('startColumn', startColumn);\n  checkNumber('endColumn', endColumn);\n  if (\n    startRow > endRow ||\n    startColumn > endColumn ||\n    startRow < 0 ||\n    startRow >= matrix.rows ||\n    endRow < 0 ||\n    endRow >= matrix.rows ||\n    startColumn < 0 ||\n    startColumn >= matrix.columns ||\n    endColumn < 0 ||\n    endColumn >= matrix.columns\n  ) {\n    throw new RangeError('Submatrix indices are out of range');\n  }\n}\n\nfunction newArray(length, value = 0) {\n  let array = [];\n  for (let i = 0; i < length; i++) {\n    array.push(value);\n  }\n  return array;\n}\n\nfunction checkNumber(name, value) {\n  if (typeof value !== 'number') {\n    throw new TypeError(`${name} must be a number`);\n  }\n}\n\nfunction checkNonEmpty(matrix) {\n  if (matrix.isEmpty()) {\n    throw new Error('Empty matrix has no elements to index');\n  }\n}\n\nfunction sumByRow(matrix) {\n  let sum = newArray(matrix.rows);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[i] += matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nfunction sumByColumn(matrix) {\n  let sum = newArray(matrix.columns);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[j] += matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nfunction sumAll(matrix) {\n  let v = 0;\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      v += matrix.get(i, j);\n    }\n  }\n  return v;\n}\n\nfunction productByRow(matrix) {\n  let sum = newArray(matrix.rows, 1);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[i] *= matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nfunction productByColumn(matrix) {\n  let sum = newArray(matrix.columns, 1);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[j] *= matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nfunction productAll(matrix) {\n  let v = 1;\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      v *= matrix.get(i, j);\n    }\n  }\n  return v;\n}\n\nfunction varianceByRow(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const variance = [];\n\n  for (let i = 0; i < rows; i++) {\n    let sum1 = 0;\n    let sum2 = 0;\n    let x = 0;\n    for (let j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean[i];\n      sum1 += x;\n      sum2 += x * x;\n    }\n    if (unbiased) {\n      variance.push((sum2 - (sum1 * sum1) / cols) / (cols - 1));\n    } else {\n      variance.push((sum2 - (sum1 * sum1) / cols) / cols);\n    }\n  }\n  return variance;\n}\n\nfunction varianceByColumn(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const variance = [];\n\n  for (let j = 0; j < cols; j++) {\n    let sum1 = 0;\n    let sum2 = 0;\n    let x = 0;\n    for (let i = 0; i < rows; i++) {\n      x = matrix.get(i, j) - mean[j];\n      sum1 += x;\n      sum2 += x * x;\n    }\n    if (unbiased) {\n      variance.push((sum2 - (sum1 * sum1) / rows) / (rows - 1));\n    } else {\n      variance.push((sum2 - (sum1 * sum1) / rows) / rows);\n    }\n  }\n  return variance;\n}\n\nfunction varianceAll(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const size = rows * cols;\n\n  let sum1 = 0;\n  let sum2 = 0;\n  let x = 0;\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean;\n      sum1 += x;\n      sum2 += x * x;\n    }\n  }\n  if (unbiased) {\n    return (sum2 - (sum1 * sum1) / size) / (size - 1);\n  } else {\n    return (sum2 - (sum1 * sum1) / size) / size;\n  }\n}\n\nfunction centerByRow(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[i]);\n    }\n  }\n}\n\nfunction centerByColumn(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[j]);\n    }\n  }\n}\n\nfunction centerAll(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean);\n    }\n  }\n}\n\nfunction getScaleByRow(matrix) {\n  const scale = [];\n  for (let i = 0; i < matrix.rows; i++) {\n    let sum = 0;\n    for (let j = 0; j < matrix.columns; j++) {\n      sum += Math.pow(matrix.get(i, j), 2) / (matrix.columns - 1);\n    }\n    scale.push(Math.sqrt(sum));\n  }\n  return scale;\n}\n\nfunction scaleByRow(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[i]);\n    }\n  }\n}\n\nfunction getScaleByColumn(matrix) {\n  const scale = [];\n  for (let j = 0; j < matrix.columns; j++) {\n    let sum = 0;\n    for (let i = 0; i < matrix.rows; i++) {\n      sum += Math.pow(matrix.get(i, j), 2) / (matrix.rows - 1);\n    }\n    scale.push(Math.sqrt(sum));\n  }\n  return scale;\n}\n\nfunction scaleByColumn(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[j]);\n    }\n  }\n}\n\nfunction getScaleAll(matrix) {\n  const divider = matrix.size - 1;\n  let sum = 0;\n  for (let j = 0; j < matrix.columns; j++) {\n    for (let i = 0; i < matrix.rows; i++) {\n      sum += Math.pow(matrix.get(i, j), 2) / divider;\n    }\n  }\n  return Math.sqrt(sum);\n}\n\nfunction scaleAll(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale);\n    }\n  }\n}\n\nclass AbstractMatrix {\n  static from1DArray(newRows, newColumns, newData) {\n    let length = newRows * newColumns;\n    if (length !== newData.length) {\n      throw new RangeError('data length does not match given dimensions');\n    }\n    let newMatrix = new Matrix(newRows, newColumns);\n    for (let row = 0; row < newRows; row++) {\n      for (let column = 0; column < newColumns; column++) {\n        newMatrix.set(row, column, newData[row * newColumns + column]);\n      }\n    }\n    return newMatrix;\n  }\n\n  static rowVector(newData) {\n    let vector = new Matrix(1, newData.length);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(0, i, newData[i]);\n    }\n    return vector;\n  }\n\n  static columnVector(newData) {\n    let vector = new Matrix(newData.length, 1);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(i, 0, newData[i]);\n    }\n    return vector;\n  }\n\n  static zeros(rows, columns) {\n    return new Matrix(rows, columns);\n  }\n\n  static ones(rows, columns) {\n    return new Matrix(rows, columns).fill(1);\n  }\n\n  static rand(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { random = Math.random } = options;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.set(i, j, random());\n      }\n    }\n    return matrix;\n  }\n\n  static randInt(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1000, random = Math.random } = options;\n    if (!Number.isInteger(min)) throw new TypeError('min must be an integer');\n    if (!Number.isInteger(max)) throw new TypeError('max must be an integer');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let interval = max - min;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        let value = min + Math.round(random() * interval);\n        matrix.set(i, j, value);\n      }\n    }\n    return matrix;\n  }\n\n  static eye(rows, columns, value) {\n    if (columns === undefined) columns = rows;\n    if (value === undefined) value = 1;\n    let min = Math.min(rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, value);\n    }\n    return matrix;\n  }\n\n  static diag(data, rows, columns) {\n    let l = data.length;\n    if (rows === undefined) rows = l;\n    if (columns === undefined) columns = rows;\n    let min = Math.min(l, rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, data[i]);\n    }\n    return matrix;\n  }\n\n  static min(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n\n  static max(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new this(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n\n  static checkMatrix(value) {\n    return AbstractMatrix.isMatrix(value) ? value : new Matrix(value);\n  }\n\n  static isMatrix(value) {\n    return value != null && value.klass === 'Matrix';\n  }\n\n  get size() {\n    return this.rows * this.columns;\n  }\n\n  apply(callback) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('callback must be a function');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        callback.call(this, i, j);\n      }\n    }\n    return this;\n  }\n\n  to1DArray() {\n    let array = [];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        array.push(this.get(i, j));\n      }\n    }\n    return array;\n  }\n\n  to2DArray() {\n    let copy = [];\n    for (let i = 0; i < this.rows; i++) {\n      copy.push([]);\n      for (let j = 0; j < this.columns; j++) {\n        copy[i].push(this.get(i, j));\n      }\n    }\n    return copy;\n  }\n\n  toJSON() {\n    return this.to2DArray();\n  }\n\n  isRowVector() {\n    return this.rows === 1;\n  }\n\n  isColumnVector() {\n    return this.columns === 1;\n  }\n\n  isVector() {\n    return this.rows === 1 || this.columns === 1;\n  }\n\n  isSquare() {\n    return this.rows === this.columns;\n  }\n\n  isEmpty() {\n    return this.rows === 0 || this.columns === 0;\n  }\n\n  isSymmetric() {\n    if (this.isSquare()) {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j <= i; j++) {\n          if (this.get(i, j) !== this.get(j, i)) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  isDistance() {\n    if (!this.isSymmetric()) return false;\n\n    for (let i = 0; i < this.rows; i++) {\n      if (this.get(i, i) !== 0) return false;\n    }\n\n    return true;\n  }\n\n  isEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isEchelonForm = false;\n          checked = true;\n        }\n      }\n      i++;\n    }\n    return isEchelonForm;\n  }\n\n  isReducedEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isReducedEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isReducedEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isReducedEchelonForm = false;\n          checked = true;\n        }\n      }\n      for (let k = j + 1; k < this.rows; k++) {\n        if (this.get(i, k) !== 0) {\n          isReducedEchelonForm = false;\n        }\n      }\n      i++;\n    }\n    return isReducedEchelonForm;\n  }\n\n  echelonForm() {\n    let result = this.clone();\n    let h = 0;\n    let k = 0;\n    while (h < result.rows && k < result.columns) {\n      let iMax = h;\n      for (let i = h; i < result.rows; i++) {\n        if (result.get(i, k) > result.get(iMax, k)) {\n          iMax = i;\n        }\n      }\n      if (result.get(iMax, k) === 0) {\n        k++;\n      } else {\n        result.swapRows(h, iMax);\n        let tmp = result.get(h, k);\n        for (let j = k; j < result.columns; j++) {\n          result.set(h, j, result.get(h, j) / tmp);\n        }\n        for (let i = h + 1; i < result.rows; i++) {\n          let factor = result.get(i, k) / result.get(h, k);\n          result.set(i, k, 0);\n          for (let j = k + 1; j < result.columns; j++) {\n            result.set(i, j, result.get(i, j) - result.get(h, j) * factor);\n          }\n        }\n        h++;\n        k++;\n      }\n    }\n    return result;\n  }\n\n  reducedEchelonForm() {\n    let result = this.echelonForm();\n    let m = result.columns;\n    let n = result.rows;\n    let h = n - 1;\n    while (h >= 0) {\n      if (result.maxRow(h) === 0) {\n        h--;\n      } else {\n        let p = 0;\n        let pivot = false;\n        while (p < n && pivot === false) {\n          if (result.get(h, p) === 1) {\n            pivot = true;\n          } else {\n            p++;\n          }\n        }\n        for (let i = 0; i < h; i++) {\n          let factor = result.get(i, p);\n          for (let j = p; j < m; j++) {\n            let tmp = result.get(i, j) - factor * result.get(h, j);\n            result.set(i, j, tmp);\n          }\n        }\n        h--;\n      }\n    }\n    return result;\n  }\n\n  set() {\n    throw new Error('set method is unimplemented');\n  }\n\n  get() {\n    throw new Error('get method is unimplemented');\n  }\n\n  repeat(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { rows = 1, columns = 1 } = options;\n    if (!Number.isInteger(rows) || rows <= 0) {\n      throw new TypeError('rows must be a positive integer');\n    }\n    if (!Number.isInteger(columns) || columns <= 0) {\n      throw new TypeError('columns must be a positive integer');\n    }\n    let matrix = new Matrix(this.rows * rows, this.columns * columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.setSubMatrix(this, this.rows * i, this.columns * j);\n      }\n    }\n    return matrix;\n  }\n\n  fill(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, value);\n      }\n    }\n    return this;\n  }\n\n  neg() {\n    return this.mulS(-1);\n  }\n\n  getRow(index) {\n    checkRowIndex(this, index);\n    let row = [];\n    for (let i = 0; i < this.columns; i++) {\n      row.push(this.get(index, i));\n    }\n    return row;\n  }\n\n  getRowVector(index) {\n    return Matrix.rowVector(this.getRow(index));\n  }\n\n  setRow(index, array) {\n    checkRowIndex(this, index);\n    array = checkRowVector(this, array);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, array[i]);\n    }\n    return this;\n  }\n\n  swapRows(row1, row2) {\n    checkRowIndex(this, row1);\n    checkRowIndex(this, row2);\n    for (let i = 0; i < this.columns; i++) {\n      let temp = this.get(row1, i);\n      this.set(row1, i, this.get(row2, i));\n      this.set(row2, i, temp);\n    }\n    return this;\n  }\n\n  getColumn(index) {\n    checkColumnIndex(this, index);\n    let column = [];\n    for (let i = 0; i < this.rows; i++) {\n      column.push(this.get(i, index));\n    }\n    return column;\n  }\n\n  getColumnVector(index) {\n    return Matrix.columnVector(this.getColumn(index));\n  }\n\n  setColumn(index, array) {\n    checkColumnIndex(this, index);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, array[i]);\n    }\n    return this;\n  }\n\n  swapColumns(column1, column2) {\n    checkColumnIndex(this, column1);\n    checkColumnIndex(this, column2);\n    for (let i = 0; i < this.rows; i++) {\n      let temp = this.get(i, column1);\n      this.set(i, column1, this.get(i, column2));\n      this.set(i, column2, temp);\n    }\n    return this;\n  }\n\n  addRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[j]);\n      }\n    }\n    return this;\n  }\n\n  subRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[j]);\n      }\n    }\n    return this;\n  }\n\n  mulRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[j]);\n      }\n    }\n    return this;\n  }\n\n  divRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[j]);\n      }\n    }\n    return this;\n  }\n\n  addColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[i]);\n      }\n    }\n    return this;\n  }\n\n  subColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[i]);\n      }\n    }\n    return this;\n  }\n\n  mulColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[i]);\n      }\n    }\n    return this;\n  }\n\n  divColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[i]);\n      }\n    }\n    return this;\n  }\n\n  mulRow(index, value) {\n    checkRowIndex(this, index);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, this.get(index, i) * value);\n    }\n    return this;\n  }\n\n  mulColumn(index, value) {\n    checkColumnIndex(this, index);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, this.get(i, index) * value);\n    }\n    return this;\n  }\n\n  max(by) {\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    switch (by) {\n      case 'row': {\n        const max = new Array(this.rows).fill(Number.NEGATIVE_INFINITY);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) > max[row]) {\n              max[row] = this.get(row, column);\n            }\n          }\n        }\n        return max;\n      }\n      case 'column': {\n        const max = new Array(this.columns).fill(Number.NEGATIVE_INFINITY);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) > max[column]) {\n              max[column] = this.get(row, column);\n            }\n          }\n        }\n        return max;\n      }\n      case undefined: {\n        let max = this.get(0, 0);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) > max) {\n              max = this.get(row, column);\n            }\n          }\n        }\n        return max;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  maxIndex() {\n    checkNonEmpty(this);\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) > v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n\n  min(by) {\n    if (this.isEmpty()) {\n      return NaN;\n    }\n\n    switch (by) {\n      case 'row': {\n        const min = new Array(this.rows).fill(Number.POSITIVE_INFINITY);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) < min[row]) {\n              min[row] = this.get(row, column);\n            }\n          }\n        }\n        return min;\n      }\n      case 'column': {\n        const min = new Array(this.columns).fill(Number.POSITIVE_INFINITY);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) < min[column]) {\n              min[column] = this.get(row, column);\n            }\n          }\n        }\n        return min;\n      }\n      case undefined: {\n        let min = this.get(0, 0);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) < min) {\n              min = this.get(row, column);\n            }\n          }\n        }\n        return min;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  minIndex() {\n    checkNonEmpty(this);\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) < v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n\n  maxRow(row) {\n    checkRowIndex(this, row);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n\n  maxRowIndex(row) {\n    checkRowIndex(this, row);\n    checkNonEmpty(this);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n\n  minRow(row) {\n    checkRowIndex(this, row);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n\n  minRowIndex(row) {\n    checkRowIndex(this, row);\n    checkNonEmpty(this);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n\n  maxColumn(column) {\n    checkColumnIndex(this, column);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n\n  maxColumnIndex(column) {\n    checkColumnIndex(this, column);\n    checkNonEmpty(this);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n\n  minColumn(column) {\n    checkColumnIndex(this, column);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n\n  minColumnIndex(column) {\n    checkColumnIndex(this, column);\n    checkNonEmpty(this);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n\n  diag() {\n    let min = Math.min(this.rows, this.columns);\n    let diag = [];\n    for (let i = 0; i < min; i++) {\n      diag.push(this.get(i, i));\n    }\n    return diag;\n  }\n\n  norm(type = 'frobenius') {\n    switch (type) {\n      case 'max':\n        return this.max();\n      case 'frobenius':\n        return Math.sqrt(this.dot(this));\n      default:\n        throw new RangeError(`unknown norm type: ${type}`);\n    }\n  }\n\n  cumulativeSum() {\n    let sum = 0;\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        sum += this.get(i, j);\n        this.set(i, j, sum);\n      }\n    }\n    return this;\n  }\n\n  dot(vector2) {\n    if (AbstractMatrix.isMatrix(vector2)) vector2 = vector2.to1DArray();\n    let vector1 = this.to1DArray();\n    if (vector1.length !== vector2.length) {\n      throw new RangeError('vectors do not have the same size');\n    }\n    let dot = 0;\n    for (let i = 0; i < vector1.length; i++) {\n      dot += vector1[i] * vector2[i];\n    }\n    return dot;\n  }\n\n  mmul(other) {\n    other = Matrix.checkMatrix(other);\n\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.columns;\n\n    let result = new Matrix(m, p);\n\n    let Bcolj = new Float64Array(n);\n    for (let j = 0; j < p; j++) {\n      for (let k = 0; k < n; k++) {\n        Bcolj[k] = other.get(k, j);\n      }\n\n      for (let i = 0; i < m; i++) {\n        let s = 0;\n        for (let k = 0; k < n; k++) {\n          s += this.get(i, k) * Bcolj[k];\n        }\n\n        result.set(i, j, s);\n      }\n    }\n    return result;\n  }\n\n  strassen2x2(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(2, 2);\n    const a11 = this.get(0, 0);\n    const b11 = other.get(0, 0);\n    const a12 = this.get(0, 1);\n    const b12 = other.get(0, 1);\n    const a21 = this.get(1, 0);\n    const b21 = other.get(1, 0);\n    const a22 = this.get(1, 1);\n    const b22 = other.get(1, 1);\n\n    // Compute intermediate values.\n    const m1 = (a11 + a22) * (b11 + b22);\n    const m2 = (a21 + a22) * b11;\n    const m3 = a11 * (b12 - b22);\n    const m4 = a22 * (b21 - b11);\n    const m5 = (a11 + a12) * b22;\n    const m6 = (a21 - a11) * (b11 + b12);\n    const m7 = (a12 - a22) * (b21 + b22);\n\n    // Combine intermediate values into the output.\n    const c00 = m1 + m4 - m5 + m7;\n    const c01 = m3 + m5;\n    const c10 = m2 + m4;\n    const c11 = m1 - m2 + m3 + m6;\n\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    return result;\n  }\n\n  strassen3x3(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(3, 3);\n\n    const a00 = this.get(0, 0);\n    const a01 = this.get(0, 1);\n    const a02 = this.get(0, 2);\n    const a10 = this.get(1, 0);\n    const a11 = this.get(1, 1);\n    const a12 = this.get(1, 2);\n    const a20 = this.get(2, 0);\n    const a21 = this.get(2, 1);\n    const a22 = this.get(2, 2);\n\n    const b00 = other.get(0, 0);\n    const b01 = other.get(0, 1);\n    const b02 = other.get(0, 2);\n    const b10 = other.get(1, 0);\n    const b11 = other.get(1, 1);\n    const b12 = other.get(1, 2);\n    const b20 = other.get(2, 0);\n    const b21 = other.get(2, 1);\n    const b22 = other.get(2, 2);\n\n    const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;\n    const m2 = (a00 - a10) * (-b01 + b11);\n    const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);\n    const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);\n    const m5 = (a10 + a11) * (-b00 + b01);\n    const m6 = a00 * b00;\n    const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);\n    const m8 = (-a00 + a20) * (b02 - b12);\n    const m9 = (a20 + a21) * (-b00 + b02);\n    const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;\n    const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);\n    const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);\n    const m13 = (a02 - a22) * (b11 - b21);\n    const m14 = a02 * b20;\n    const m15 = (a21 + a22) * (-b20 + b21);\n    const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);\n    const m17 = (a02 - a12) * (b12 - b22);\n    const m18 = (a11 + a12) * (-b20 + b22);\n    const m19 = a01 * b10;\n    const m20 = a12 * b21;\n    const m21 = a10 * b02;\n    const m22 = a20 * b01;\n    const m23 = a22 * b22;\n\n    const c00 = m6 + m14 + m19;\n    const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;\n    const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;\n    const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;\n    const c11 = m2 + m4 + m5 + m6 + m20;\n    const c12 = m14 + m16 + m17 + m18 + m21;\n    const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;\n    const c21 = m12 + m13 + m14 + m15 + m22;\n    const c22 = m6 + m7 + m8 + m9 + m23;\n\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(0, 2, c02);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    result.set(1, 2, c12);\n    result.set(2, 0, c20);\n    result.set(2, 1, c21);\n    result.set(2, 2, c22);\n    return result;\n  }\n\n  mmulStrassen(y) {\n    y = Matrix.checkMatrix(y);\n    let x = this.clone();\n    let r1 = x.rows;\n    let c1 = x.columns;\n    let r2 = y.rows;\n    let c2 = y.columns;\n    if (c1 !== r2) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`,\n      );\n    }\n\n    // Put a matrix into the top left of a matrix of zeros.\n    // `rows` and `cols` are the dimensions of the output matrix.\n    function embed(mat, rows, cols) {\n      let r = mat.rows;\n      let c = mat.columns;\n      if (r === rows && c === cols) {\n        return mat;\n      } else {\n        let resultat = AbstractMatrix.zeros(rows, cols);\n        resultat = resultat.setSubMatrix(mat, 0, 0);\n        return resultat;\n      }\n    }\n\n    // Make sure both matrices are the same size.\n    // This is exclusively for simplicity:\n    // this algorithm can be implemented with matrices of different sizes.\n\n    let r = Math.max(r1, r2);\n    let c = Math.max(c1, c2);\n    x = embed(x, r, c);\n    y = embed(y, r, c);\n\n    // Our recursive multiplication function.\n    function blockMult(a, b, rows, cols) {\n      // For small matrices, resort to naive multiplication.\n      if (rows <= 512 || cols <= 512) {\n        return a.mmul(b); // a is equivalent to this\n      }\n\n      // Apply dynamic padding.\n      if (rows % 2 === 1 && cols % 2 === 1) {\n        a = embed(a, rows + 1, cols + 1);\n        b = embed(b, rows + 1, cols + 1);\n      } else if (rows % 2 === 1) {\n        a = embed(a, rows + 1, cols);\n        b = embed(b, rows + 1, cols);\n      } else if (cols % 2 === 1) {\n        a = embed(a, rows, cols + 1);\n        b = embed(b, rows, cols + 1);\n      }\n\n      let halfRows = parseInt(a.rows / 2, 10);\n      let halfCols = parseInt(a.columns / 2, 10);\n      // Subdivide input matrices.\n      let a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n      let b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n\n      let a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);\n      let b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);\n\n      let a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);\n      let b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);\n\n      let a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);\n      let b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1);\n\n      // Compute intermediate values.\n      let m1 = blockMult(\n        AbstractMatrix.add(a11, a22),\n        AbstractMatrix.add(b11, b22),\n        halfRows,\n        halfCols,\n      );\n      let m2 = blockMult(AbstractMatrix.add(a21, a22), b11, halfRows, halfCols);\n      let m3 = blockMult(a11, AbstractMatrix.sub(b12, b22), halfRows, halfCols);\n      let m4 = blockMult(a22, AbstractMatrix.sub(b21, b11), halfRows, halfCols);\n      let m5 = blockMult(AbstractMatrix.add(a11, a12), b22, halfRows, halfCols);\n      let m6 = blockMult(\n        AbstractMatrix.sub(a21, a11),\n        AbstractMatrix.add(b11, b12),\n        halfRows,\n        halfCols,\n      );\n      let m7 = blockMult(\n        AbstractMatrix.sub(a12, a22),\n        AbstractMatrix.add(b21, b22),\n        halfRows,\n        halfCols,\n      );\n\n      // Combine intermediate values into the output.\n      let c11 = AbstractMatrix.add(m1, m4);\n      c11.sub(m5);\n      c11.add(m7);\n      let c12 = AbstractMatrix.add(m3, m5);\n      let c21 = AbstractMatrix.add(m2, m4);\n      let c22 = AbstractMatrix.sub(m1, m2);\n      c22.add(m3);\n      c22.add(m6);\n\n      // Crop output to the desired size (undo dynamic padding).\n      let result = AbstractMatrix.zeros(2 * c11.rows, 2 * c11.columns);\n      result = result.setSubMatrix(c11, 0, 0);\n      result = result.setSubMatrix(c12, c11.rows, 0);\n      result = result.setSubMatrix(c21, 0, c11.columns);\n      result = result.setSubMatrix(c22, c11.rows, c11.columns);\n      return result.subMatrix(0, rows - 1, 0, cols - 1);\n    }\n\n    return blockMult(x, y, r, c);\n  }\n\n  scaleRows(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1 } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.rows; i++) {\n      const row = this.getRow(i);\n      if (row.length > 0) {\n        rescale(row, { min, max, output: row });\n      }\n      newMatrix.setRow(i, row);\n    }\n    return newMatrix;\n  }\n\n  scaleColumns(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1 } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.columns; i++) {\n      const column = this.getColumn(i);\n      if (column.length) {\n        rescale(column, {\n          min,\n          max,\n          output: column,\n        });\n      }\n      newMatrix.setColumn(i, column);\n    }\n    return newMatrix;\n  }\n\n  flipRows() {\n    const middle = Math.ceil(this.columns / 2);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < middle; j++) {\n        let first = this.get(i, j);\n        let last = this.get(i, this.columns - 1 - j);\n        this.set(i, j, last);\n        this.set(i, this.columns - 1 - j, first);\n      }\n    }\n    return this;\n  }\n\n  flipColumns() {\n    const middle = Math.ceil(this.rows / 2);\n    for (let j = 0; j < this.columns; j++) {\n      for (let i = 0; i < middle; i++) {\n        let first = this.get(i, j);\n        let last = this.get(this.rows - 1 - i, j);\n        this.set(i, j, last);\n        this.set(this.rows - 1 - i, j, first);\n      }\n    }\n    return this;\n  }\n\n  kroneckerProduct(other) {\n    other = Matrix.checkMatrix(other);\n\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.rows;\n    let q = other.columns;\n\n    let result = new Matrix(m * p, n * q);\n    for (let i = 0; i < m; i++) {\n      for (let j = 0; j < n; j++) {\n        for (let k = 0; k < p; k++) {\n          for (let l = 0; l < q; l++) {\n            result.set(p * i + k, q * j + l, this.get(i, j) * other.get(k, l));\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n  kroneckerSum(other) {\n    other = Matrix.checkMatrix(other);\n    if (!this.isSquare() || !other.isSquare()) {\n      throw new Error('Kronecker Sum needs two Square Matrices');\n    }\n    let m = this.rows;\n    let n = other.rows;\n    let AxI = this.kroneckerProduct(Matrix.eye(n, n));\n    let IxB = Matrix.eye(m, m).kroneckerProduct(other);\n    return AxI.add(IxB);\n  }\n\n  transpose() {\n    let result = new Matrix(this.columns, this.rows);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        result.set(j, i, this.get(i, j));\n      }\n    }\n    return result;\n  }\n\n  sortRows(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.rows; i++) {\n      this.setRow(i, this.getRow(i).sort(compareFunction));\n    }\n    return this;\n  }\n\n  sortColumns(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.columns; i++) {\n      this.setColumn(i, this.getColumn(i).sort(compareFunction));\n    }\n    return this;\n  }\n\n  subMatrix(startRow, endRow, startColumn, endColumn) {\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    let newMatrix = new Matrix(\n      endRow - startRow + 1,\n      endColumn - startColumn + 1,\n    );\n    for (let i = startRow; i <= endRow; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        newMatrix.set(i - startRow, j - startColumn, this.get(i, j));\n      }\n    }\n    return newMatrix;\n  }\n\n  subMatrixRow(indices, startColumn, endColumn) {\n    if (startColumn === undefined) startColumn = 0;\n    if (endColumn === undefined) endColumn = this.columns - 1;\n    if (\n      startColumn > endColumn ||\n      startColumn < 0 ||\n      startColumn >= this.columns ||\n      endColumn < 0 ||\n      endColumn >= this.columns\n    ) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(indices.length, endColumn - startColumn + 1);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        if (indices[i] < 0 || indices[i] >= this.rows) {\n          throw new RangeError(`Row index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(i, j - startColumn, this.get(indices[i], j));\n      }\n    }\n    return newMatrix;\n  }\n\n  subMatrixColumn(indices, startRow, endRow) {\n    if (startRow === undefined) startRow = 0;\n    if (endRow === undefined) endRow = this.rows - 1;\n    if (\n      startRow > endRow ||\n      startRow < 0 ||\n      startRow >= this.rows ||\n      endRow < 0 ||\n      endRow >= this.rows\n    ) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(endRow - startRow + 1, indices.length);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startRow; j <= endRow; j++) {\n        if (indices[i] < 0 || indices[i] >= this.columns) {\n          throw new RangeError(`Column index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(j - startRow, i, this.get(j, indices[i]));\n      }\n    }\n    return newMatrix;\n  }\n\n  setSubMatrix(matrix, startRow, startColumn) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (matrix.isEmpty()) {\n      return this;\n    }\n    let endRow = startRow + matrix.rows - 1;\n    let endColumn = startColumn + matrix.columns - 1;\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    for (let i = 0; i < matrix.rows; i++) {\n      for (let j = 0; j < matrix.columns; j++) {\n        this.set(startRow + i, startColumn + j, matrix.get(i, j));\n      }\n    }\n    return this;\n  }\n\n  selection(rowIndices, columnIndices) {\n    checkRowIndices(this, rowIndices);\n    checkColumnIndices(this, columnIndices);\n    let newMatrix = new Matrix(rowIndices.length, columnIndices.length);\n    for (let i = 0; i < rowIndices.length; i++) {\n      let rowIndex = rowIndices[i];\n      for (let j = 0; j < columnIndices.length; j++) {\n        let columnIndex = columnIndices[j];\n        newMatrix.set(i, j, this.get(rowIndex, columnIndex));\n      }\n    }\n    return newMatrix;\n  }\n\n  trace() {\n    let min = Math.min(this.rows, this.columns);\n    let trace = 0;\n    for (let i = 0; i < min; i++) {\n      trace += this.get(i, i);\n    }\n    return trace;\n  }\n\n  clone() {\n    return this.constructor.copy(this, new Matrix(this.rows, this.columns));\n  }\n\n  /**\n   * @template {AbstractMatrix} M\n   * @param {AbstractMatrix} from\n   * @param {M} to\n   * @return {M}\n   */\n  static copy(from, to) {\n    for (const [row, column, value] of from.entries()) {\n      to.set(row, column, value);\n    }\n\n    return to;\n  }\n\n  sum(by) {\n    switch (by) {\n      case 'row':\n        return sumByRow(this);\n      case 'column':\n        return sumByColumn(this);\n      case undefined:\n        return sumAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  product(by) {\n    switch (by) {\n      case 'row':\n        return productByRow(this);\n      case 'column':\n        return productByColumn(this);\n      case undefined:\n        return productAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  mean(by) {\n    const sum = this.sum(by);\n    switch (by) {\n      case 'row': {\n        for (let i = 0; i < this.rows; i++) {\n          sum[i] /= this.columns;\n        }\n        return sum;\n      }\n      case 'column': {\n        for (let i = 0; i < this.columns; i++) {\n          sum[i] /= this.rows;\n        }\n        return sum;\n      }\n      case undefined:\n        return sum / this.size;\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  variance(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { unbiased = true, mean = this.mean(by) } = options;\n    if (typeof unbiased !== 'boolean') {\n      throw new TypeError('unbiased must be a boolean');\n    }\n    switch (by) {\n      case 'row': {\n        if (!isAnyArray.isAnyArray(mean)) {\n          throw new TypeError('mean must be an array');\n        }\n        return varianceByRow(this, unbiased, mean);\n      }\n      case 'column': {\n        if (!isAnyArray.isAnyArray(mean)) {\n          throw new TypeError('mean must be an array');\n        }\n        return varianceByColumn(this, unbiased, mean);\n      }\n      case undefined: {\n        if (typeof mean !== 'number') {\n          throw new TypeError('mean must be a number');\n        }\n        return varianceAll(this, unbiased, mean);\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  standardDeviation(by, options) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    const variance = this.variance(by, options);\n    if (by === undefined) {\n      return Math.sqrt(variance);\n    } else {\n      for (let i = 0; i < variance.length; i++) {\n        variance[i] = Math.sqrt(variance[i]);\n      }\n      return variance;\n    }\n  }\n\n  center(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { center = this.mean(by) } = options;\n    switch (by) {\n      case 'row': {\n        if (!isAnyArray.isAnyArray(center)) {\n          throw new TypeError('center must be an array');\n        }\n        centerByRow(this, center);\n        return this;\n      }\n      case 'column': {\n        if (!isAnyArray.isAnyArray(center)) {\n          throw new TypeError('center must be an array');\n        }\n        centerByColumn(this, center);\n        return this;\n      }\n      case undefined: {\n        if (typeof center !== 'number') {\n          throw new TypeError('center must be a number');\n        }\n        centerAll(this, center);\n        return this;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  scale(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    let scale = options.scale;\n    switch (by) {\n      case 'row': {\n        if (scale === undefined) {\n          scale = getScaleByRow(this);\n        } else if (!isAnyArray.isAnyArray(scale)) {\n          throw new TypeError('scale must be an array');\n        }\n        scaleByRow(this, scale);\n        return this;\n      }\n      case 'column': {\n        if (scale === undefined) {\n          scale = getScaleByColumn(this);\n        } else if (!isAnyArray.isAnyArray(scale)) {\n          throw new TypeError('scale must be an array');\n        }\n        scaleByColumn(this, scale);\n        return this;\n      }\n      case undefined: {\n        if (scale === undefined) {\n          scale = getScaleAll(this);\n        } else if (typeof scale !== 'number') {\n          throw new TypeError('scale must be a number');\n        }\n        scaleAll(this, scale);\n        return this;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  toString(options) {\n    return inspectMatrixWithOptions(this, options);\n  }\n\n  [Symbol.iterator]() {\n    return this.entries();\n  }\n\n  /**\n   * iterator from left to right, from top to bottom\n   * yield [row, column, value]\n   * @returns {Generator<[number, number, number], void, *>}\n   */\n  *entries() {\n    for (let row = 0; row < this.rows; row++) {\n      for (let col = 0; col < this.columns; col++) {\n        yield [row, col, this.get(row, col)];\n      }\n    }\n  }\n\n  /**\n   * iterator from left to right, from top to bottom\n   * yield value\n   * @returns {Generator<number, void, *>}\n   */\n  *values() {\n    for (let row = 0; row < this.rows; row++) {\n      for (let col = 0; col < this.columns; col++) {\n        yield this.get(row, col);\n      }\n    }\n  }\n}\n\nAbstractMatrix.prototype.klass = 'Matrix';\nif (typeof Symbol !== 'undefined') {\n  AbstractMatrix.prototype[Symbol.for('nodejs.util.inspect.custom')] =\n    inspectMatrix;\n}\n\nfunction compareNumbers(a, b) {\n  return a - b;\n}\n\nfunction isArrayOfNumbers(array) {\n  return array.every((element) => {\n    return typeof element === 'number';\n  });\n}\n\n// Synonyms\nAbstractMatrix.random = AbstractMatrix.rand;\nAbstractMatrix.randomInt = AbstractMatrix.randInt;\nAbstractMatrix.diagonal = AbstractMatrix.diag;\nAbstractMatrix.prototype.diagonal = AbstractMatrix.prototype.diag;\nAbstractMatrix.identity = AbstractMatrix.eye;\nAbstractMatrix.prototype.negate = AbstractMatrix.prototype.neg;\nAbstractMatrix.prototype.tensorProduct =\n  AbstractMatrix.prototype.kroneckerProduct;\n\nclass Matrix extends AbstractMatrix {\n  /**\n   * @type {Float64Array[]}\n   */\n  data;\n\n  /**\n   * Init an empty matrix\n   * @param {number} nRows\n   * @param {number} nColumns\n   */\n  #initData(nRows, nColumns) {\n    this.data = [];\n\n    if (Number.isInteger(nColumns) && nColumns >= 0) {\n      for (let i = 0; i < nRows; i++) {\n        this.data.push(new Float64Array(nColumns));\n      }\n    } else {\n      throw new TypeError('nColumns must be a positive integer');\n    }\n\n    this.rows = nRows;\n    this.columns = nColumns;\n  }\n\n  constructor(nRows, nColumns) {\n    super();\n    if (Matrix.isMatrix(nRows)) {\n      this.#initData(nRows.rows, nRows.columns);\n      Matrix.copy(nRows, this);\n    } else if (Number.isInteger(nRows) && nRows >= 0) {\n      this.#initData(nRows, nColumns);\n    } else if (isAnyArray.isAnyArray(nRows)) {\n      // Copy the values from the 2D array\n      const arrayData = nRows;\n      nRows = arrayData.length;\n      nColumns = nRows ? arrayData[0].length : 0;\n      if (typeof nColumns !== 'number') {\n        throw new TypeError(\n          'Data must be a 2D array with at least one element',\n        );\n      }\n      this.data = [];\n\n      for (let i = 0; i < nRows; i++) {\n        if (arrayData[i].length !== nColumns) {\n          throw new RangeError('Inconsistent array dimensions');\n        }\n        if (!isArrayOfNumbers(arrayData[i])) {\n          throw new TypeError('Input data contains non-numeric values');\n        }\n        this.data.push(Float64Array.from(arrayData[i]));\n      }\n\n      this.rows = nRows;\n      this.columns = nColumns;\n    } else {\n      throw new TypeError(\n        'First argument must be a positive number or an array',\n      );\n    }\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n\n  removeRow(index) {\n    checkRowIndex(this, index);\n    this.data.splice(index, 1);\n    this.rows -= 1;\n    return this;\n  }\n\n  addRow(index, array) {\n    if (array === undefined) {\n      array = index;\n      index = this.rows;\n    }\n    checkRowIndex(this, index, true);\n    array = Float64Array.from(checkRowVector(this, array));\n    this.data.splice(index, 0, array);\n    this.rows += 1;\n    return this;\n  }\n\n  removeColumn(index) {\n    checkColumnIndex(this, index);\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns - 1);\n      for (let j = 0; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      for (let j = index + 1; j < this.columns; j++) {\n        newRow[j - 1] = this.data[i][j];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns -= 1;\n    return this;\n  }\n\n  addColumn(index, array) {\n    if (typeof array === 'undefined') {\n      array = index;\n      index = this.columns;\n    }\n    checkColumnIndex(this, index, true);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns + 1);\n      let j = 0;\n      for (; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      newRow[j++] = array[i];\n      for (; j < this.columns + 1; j++) {\n        newRow[j] = this.data[i][j - 1];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns += 1;\n    return this;\n  }\n}\n\ninstallMathOperations(AbstractMatrix, Matrix);\n\n/**\n * @typedef {0 | 1 | number | boolean} Mask\n */\n\nclass SymmetricMatrix extends AbstractMatrix {\n  /** @type {Matrix} */\n  #matrix;\n\n  get size() {\n    return this.#matrix.size;\n  }\n\n  get rows() {\n    return this.#matrix.rows;\n  }\n\n  get columns() {\n    return this.#matrix.columns;\n  }\n\n  get diagonalSize() {\n    return this.rows;\n  }\n\n  /**\n   * not the same as matrix.isSymmetric()\n   * Here is to check if it's instanceof SymmetricMatrix without bundling issues\n   *\n   * @param value\n   * @returns {boolean}\n   */\n  static isSymmetricMatrix(value) {\n    return Matrix.isMatrix(value) && value.klassType === 'SymmetricMatrix';\n  }\n\n  /**\n   * @param diagonalSize\n   * @return {SymmetricMatrix}\n   */\n  static zeros(diagonalSize) {\n    return new this(diagonalSize);\n  }\n\n  /**\n   * @param diagonalSize\n   * @return {SymmetricMatrix}\n   */\n  static ones(diagonalSize) {\n    return new this(diagonalSize).fill(1);\n  }\n\n  /**\n   * @param {number | AbstractMatrix | ArrayLike<ArrayLike<number>>} diagonalSize\n   * @return {this}\n   */\n  constructor(diagonalSize) {\n    super();\n\n    if (Matrix.isMatrix(diagonalSize)) {\n      if (!diagonalSize.isSymmetric()) {\n        throw new TypeError('not symmetric data');\n      }\n\n      this.#matrix = Matrix.copy(\n        diagonalSize,\n        new Matrix(diagonalSize.rows, diagonalSize.rows),\n      );\n    } else if (Number.isInteger(diagonalSize) && diagonalSize >= 0) {\n      this.#matrix = new Matrix(diagonalSize, diagonalSize);\n    } else {\n      this.#matrix = new Matrix(diagonalSize);\n\n      if (!this.isSymmetric()) {\n        throw new TypeError('not symmetric data');\n      }\n    }\n  }\n\n  clone() {\n    const matrix = new SymmetricMatrix(this.diagonalSize);\n\n    for (const [row, col, value] of this.upperRightEntries()) {\n      matrix.set(row, col, value);\n    }\n\n    return matrix;\n  }\n\n  toMatrix() {\n    return new Matrix(this);\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.#matrix.get(rowIndex, columnIndex);\n  }\n  set(rowIndex, columnIndex, value) {\n    // symmetric set\n    this.#matrix.set(rowIndex, columnIndex, value);\n    this.#matrix.set(columnIndex, rowIndex, value);\n\n    return this;\n  }\n\n  removeCross(index) {\n    // symmetric remove side\n    this.#matrix.removeRow(index);\n    this.#matrix.removeColumn(index);\n\n    return this;\n  }\n\n  addCross(index, array) {\n    if (array === undefined) {\n      array = index;\n      index = this.diagonalSize;\n    }\n\n    const row = array.slice();\n    row.splice(index, 1);\n\n    this.#matrix.addRow(index, row);\n    this.#matrix.addColumn(index, array);\n\n    return this;\n  }\n\n  /**\n   * @param {Mask[]} mask\n   */\n  applyMask(mask) {\n    if (mask.length !== this.diagonalSize) {\n      throw new RangeError('Mask size do not match with matrix size');\n    }\n\n    // prepare sides to remove from matrix from mask\n    /** @type {number[]} */\n    const sidesToRemove = [];\n    for (const [index, passthroughs] of mask.entries()) {\n      if (passthroughs) continue;\n      sidesToRemove.push(index);\n    }\n    // to remove from highest to lowest for no mutation shifting\n    sidesToRemove.reverse();\n\n    // remove sides\n    for (const sideIndex of sidesToRemove) {\n      this.removeCross(sideIndex);\n    }\n\n    return this;\n  }\n\n  /**\n   * Compact format upper-right corner of matrix\n   * iterate from left to right, from top to bottom.\n   *\n   * ```\n   *   A B C D\n   * A 1 2 3 4\n   * B 2 5 6 7\n   * C 3 6 8 9\n   * D 4 7 9 10\n   * ```\n   *\n   * will return compact 1D array `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]`\n   *\n   * length is S(i=0, n=sideSize) => 10 for a 4 sideSized matrix\n   *\n   * @returns {number[]}\n   */\n  toCompact() {\n    const { diagonalSize } = this;\n\n    /** @type {number[]} */\n    const compact = new Array((diagonalSize * (diagonalSize + 1)) / 2);\n    for (let col = 0, row = 0, index = 0; index < compact.length; index++) {\n      compact[index] = this.get(row, col);\n\n      if (++col >= diagonalSize) col = ++row;\n    }\n\n    return compact;\n  }\n\n  /**\n   * @param {number[]} compact\n   * @return {SymmetricMatrix}\n   */\n  static fromCompact(compact) {\n    const compactSize = compact.length;\n    // compactSize = (sideSize * (sideSize + 1)) / 2\n    // https://mathsolver.microsoft.com/fr/solve-problem/y%20%3D%20%20x%20%60cdot%20%20%20%60frac%7B%20%20%60left(%20x%2B1%20%20%60right)%20%20%20%20%7D%7B%202%20%20%7D\n    // sideSize = (Sqrt(8 × compactSize + 1) - 1) / 2\n    const diagonalSize = (Math.sqrt(8 * compactSize + 1) - 1) / 2;\n\n    if (!Number.isInteger(diagonalSize)) {\n      throw new TypeError(\n        `This array is not a compact representation of a Symmetric Matrix, ${JSON.stringify(\n          compact,\n        )}`,\n      );\n    }\n\n    const matrix = new SymmetricMatrix(diagonalSize);\n    for (let col = 0, row = 0, index = 0; index < compactSize; index++) {\n      matrix.set(col, row, compact[index]);\n      if (++col >= diagonalSize) col = ++row;\n    }\n\n    return matrix;\n  }\n\n  /**\n   * half iterator upper-right-corner from left to right, from top to bottom\n   * yield [row, column, value]\n   *\n   * @returns {Generator<[number, number, number], void, *>}\n   */\n  *upperRightEntries() {\n    for (let row = 0, col = 0; row < this.diagonalSize; void 0) {\n      const value = this.get(row, col);\n\n      yield [row, col, value];\n\n      // at the end of row, move cursor to next row at diagonal position\n      if (++col >= this.diagonalSize) col = ++row;\n    }\n  }\n\n  /**\n   * half iterator upper-right-corner from left to right, from top to bottom\n   * yield value\n   *\n   * @returns {Generator<[number, number, number], void, *>}\n   */\n  *upperRightValues() {\n    for (let row = 0, col = 0; row < this.diagonalSize; void 0) {\n      const value = this.get(row, col);\n\n      yield value;\n\n      // at the end of row, move cursor to next row at diagonal position\n      if (++col >= this.diagonalSize) col = ++row;\n    }\n  }\n}\nSymmetricMatrix.prototype.klassType = 'SymmetricMatrix';\n\nclass DistanceMatrix extends SymmetricMatrix {\n  /**\n   * not the same as matrix.isSymmetric()\n   * Here is to check if it's instanceof SymmetricMatrix without bundling issues\n   *\n   * @param value\n   * @returns {boolean}\n   */\n  static isDistanceMatrix(value) {\n    return (\n      SymmetricMatrix.isSymmetricMatrix(value) &&\n      value.klassSubType === 'DistanceMatrix'\n    );\n  }\n\n  constructor(sideSize) {\n    super(sideSize);\n\n    if (!this.isDistance()) {\n      throw new TypeError('Provided arguments do no produce a distance matrix');\n    }\n  }\n\n  set(rowIndex, columnIndex, value) {\n    // distance matrix diagonal is 0\n    if (rowIndex === columnIndex) value = 0;\n\n    return super.set(rowIndex, columnIndex, value);\n  }\n\n  addCross(index, array) {\n    if (array === undefined) {\n      array = index;\n      index = this.diagonalSize;\n    }\n\n    // ensure distance\n    array = array.slice();\n    array[index] = 0;\n\n    return super.addCross(index, array);\n  }\n\n  toSymmetricMatrix() {\n    return new SymmetricMatrix(this);\n  }\n\n  clone() {\n    const matrix = new DistanceMatrix(this.diagonalSize);\n\n    for (const [row, col, value] of this.upperRightEntries()) {\n      if (row === col) continue;\n      matrix.set(row, col, value);\n    }\n\n    return matrix;\n  }\n\n  /**\n   * Compact format upper-right corner of matrix\n   * no diagonal (only zeros)\n   * iterable from left to right, from top to bottom.\n   *\n   * ```\n   *   A B C D\n   * A 0 1 2 3\n   * B 1 0 4 5\n   * C 2 4 0 6\n   * D 3 5 6 0\n   * ```\n   *\n   * will return compact 1D array `[1, 2, 3, 4, 5, 6]`\n   *\n   * length is S(i=0, n=sideSize-1) => 6 for a 4 side sized matrix\n   *\n   * @returns {number[]}\n   */\n  toCompact() {\n    const { diagonalSize } = this;\n    const compactLength = ((diagonalSize - 1) * diagonalSize) / 2;\n\n    /** @type {number[]} */\n    const compact = new Array(compactLength);\n    for (let col = 1, row = 0, index = 0; index < compact.length; index++) {\n      compact[index] = this.get(row, col);\n\n      if (++col >= diagonalSize) col = ++row + 1;\n    }\n\n    return compact;\n  }\n\n  /**\n   * @param {number[]} compact\n   */\n  static fromCompact(compact) {\n    const compactSize = compact.length;\n    // compactSize = (sideSize * (sideSize - 1)) / 2\n    // sideSize = (Sqrt(8 × compactSize + 1) + 1) / 2\n    const diagonalSize = (Math.sqrt(8 * compactSize + 1) + 1) / 2;\n\n    if (!Number.isInteger(diagonalSize)) {\n      throw new TypeError(\n        `This array is not a compact representation of a DistanceMatrix, ${JSON.stringify(\n          compact,\n        )}`,\n      );\n    }\n\n    const matrix = new this(diagonalSize);\n    for (let col = 1, row = 0, index = 0; index < compactSize; index++) {\n      matrix.set(col, row, compact[index]);\n      if (++col >= diagonalSize) col = ++row + 1;\n    }\n\n    return matrix;\n  }\n}\nDistanceMatrix.prototype.klassSubType = 'DistanceMatrix';\n\nclass BaseView extends AbstractMatrix {\n  constructor(matrix, rows, columns) {\n    super();\n    this.matrix = matrix;\n    this.rows = rows;\n    this.columns = columns;\n  }\n}\n\nclass MatrixColumnView extends BaseView {\n  constructor(matrix, column) {\n    checkColumnIndex(matrix, column);\n    super(matrix, matrix.rows, 1);\n    this.column = column;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(rowIndex, this.column, value);\n    return this;\n  }\n\n  get(rowIndex) {\n    return this.matrix.get(rowIndex, this.column);\n  }\n}\n\nclass MatrixColumnSelectionView extends BaseView {\n  constructor(matrix, columnIndices) {\n    checkColumnIndices(matrix, columnIndices);\n    super(matrix, matrix.rows, columnIndices.length);\n    this.columnIndices = columnIndices;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(rowIndex, this.columnIndices[columnIndex], value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(rowIndex, this.columnIndices[columnIndex]);\n  }\n}\n\nclass MatrixFlipColumnView extends BaseView {\n  constructor(matrix) {\n    super(matrix, matrix.rows, matrix.columns);\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(rowIndex, this.columns - columnIndex - 1, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(rowIndex, this.columns - columnIndex - 1);\n  }\n}\n\nclass MatrixFlipRowView extends BaseView {\n  constructor(matrix) {\n    super(matrix, matrix.rows, matrix.columns);\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(this.rows - rowIndex - 1, columnIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(this.rows - rowIndex - 1, columnIndex);\n  }\n}\n\nclass MatrixRowView extends BaseView {\n  constructor(matrix, row) {\n    checkRowIndex(matrix, row);\n    super(matrix, 1, matrix.columns);\n    this.row = row;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(this.row, columnIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(this.row, columnIndex);\n  }\n}\n\nclass MatrixRowSelectionView extends BaseView {\n  constructor(matrix, rowIndices) {\n    checkRowIndices(matrix, rowIndices);\n    super(matrix, rowIndices.length, matrix.columns);\n    this.rowIndices = rowIndices;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(this.rowIndices[rowIndex], columnIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(this.rowIndices[rowIndex], columnIndex);\n  }\n}\n\nclass MatrixSelectionView extends BaseView {\n  constructor(matrix, rowIndices, columnIndices) {\n    checkRowIndices(matrix, rowIndices);\n    checkColumnIndices(matrix, columnIndices);\n    super(matrix, rowIndices.length, columnIndices.length);\n    this.rowIndices = rowIndices;\n    this.columnIndices = columnIndices;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(\n      this.rowIndices[rowIndex],\n      this.columnIndices[columnIndex],\n      value,\n    );\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(\n      this.rowIndices[rowIndex],\n      this.columnIndices[columnIndex],\n    );\n  }\n}\n\nclass MatrixSubView extends BaseView {\n  constructor(matrix, startRow, endRow, startColumn, endColumn) {\n    checkRange(matrix, startRow, endRow, startColumn, endColumn);\n    super(matrix, endRow - startRow + 1, endColumn - startColumn + 1);\n    this.startRow = startRow;\n    this.startColumn = startColumn;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(\n      this.startRow + rowIndex,\n      this.startColumn + columnIndex,\n      value,\n    );\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(\n      this.startRow + rowIndex,\n      this.startColumn + columnIndex,\n    );\n  }\n}\n\nclass MatrixTransposeView extends BaseView {\n  constructor(matrix) {\n    super(matrix, matrix.columns, matrix.rows);\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(columnIndex, rowIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(columnIndex, rowIndex);\n  }\n}\n\nclass WrapperMatrix1D extends AbstractMatrix {\n  constructor(data, options = {}) {\n    const { rows = 1 } = options;\n\n    if (data.length % rows !== 0) {\n      throw new Error('the data length is not divisible by the number of rows');\n    }\n    super();\n    this.rows = rows;\n    this.columns = data.length / rows;\n    this.data = data;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    let index = this._calculateIndex(rowIndex, columnIndex);\n    this.data[index] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    let index = this._calculateIndex(rowIndex, columnIndex);\n    return this.data[index];\n  }\n\n  _calculateIndex(row, column) {\n    return row * this.columns + column;\n  }\n}\n\nclass WrapperMatrix2D extends AbstractMatrix {\n  constructor(data) {\n    super();\n    this.data = data;\n    this.rows = data.length;\n    this.columns = data[0].length;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n}\n\nfunction wrap(array, options) {\n  if (isAnyArray.isAnyArray(array)) {\n    if (array[0] && isAnyArray.isAnyArray(array[0])) {\n      return new WrapperMatrix2D(array);\n    } else {\n      return new WrapperMatrix1D(array, options);\n    }\n  } else {\n    throw new Error('the argument is not an array');\n  }\n}\n\nclass LuDecomposition {\n  constructor(matrix) {\n    matrix = WrapperMatrix2D.checkMatrix(matrix);\n\n    let lu = matrix.clone();\n    let rows = lu.rows;\n    let columns = lu.columns;\n    let pivotVector = new Float64Array(rows);\n    let pivotSign = 1;\n    let i, j, k, p, s, t, v;\n    let LUcolj, kmax;\n\n    for (i = 0; i < rows; i++) {\n      pivotVector[i] = i;\n    }\n\n    LUcolj = new Float64Array(rows);\n\n    for (j = 0; j < columns; j++) {\n      for (i = 0; i < rows; i++) {\n        LUcolj[i] = lu.get(i, j);\n      }\n\n      for (i = 0; i < rows; i++) {\n        kmax = Math.min(i, j);\n        s = 0;\n        for (k = 0; k < kmax; k++) {\n          s += lu.get(i, k) * LUcolj[k];\n        }\n        LUcolj[i] -= s;\n        lu.set(i, j, LUcolj[i]);\n      }\n\n      p = j;\n      for (i = j + 1; i < rows; i++) {\n        if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n          p = i;\n        }\n      }\n\n      if (p !== j) {\n        for (k = 0; k < columns; k++) {\n          t = lu.get(p, k);\n          lu.set(p, k, lu.get(j, k));\n          lu.set(j, k, t);\n        }\n\n        v = pivotVector[p];\n        pivotVector[p] = pivotVector[j];\n        pivotVector[j] = v;\n\n        pivotSign = -pivotSign;\n      }\n\n      if (j < rows && lu.get(j, j) !== 0) {\n        for (i = j + 1; i < rows; i++) {\n          lu.set(i, j, lu.get(i, j) / lu.get(j, j));\n        }\n      }\n    }\n\n    this.LU = lu;\n    this.pivotVector = pivotVector;\n    this.pivotSign = pivotSign;\n  }\n\n  isSingular() {\n    let data = this.LU;\n    let col = data.columns;\n    for (let j = 0; j < col; j++) {\n      if (data.get(j, j) === 0) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  solve(value) {\n    value = Matrix.checkMatrix(value);\n\n    let lu = this.LU;\n    let rows = lu.rows;\n\n    if (rows !== value.rows) {\n      throw new Error('Invalid matrix dimensions');\n    }\n    if (this.isSingular()) {\n      throw new Error('LU matrix is singular');\n    }\n\n    let count = value.columns;\n    let X = value.subMatrixRow(this.pivotVector, 0, count - 1);\n    let columns = lu.columns;\n    let i, j, k;\n\n    for (k = 0; k < columns; k++) {\n      for (i = k + 1; i < columns; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * lu.get(i, k));\n        }\n      }\n    }\n    for (k = columns - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        X.set(k, j, X.get(k, j) / lu.get(k, k));\n      }\n      for (i = 0; i < k; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * lu.get(i, k));\n        }\n      }\n    }\n    return X;\n  }\n\n  get determinant() {\n    let data = this.LU;\n    if (!data.isSquare()) {\n      throw new Error('Matrix must be square');\n    }\n    let determinant = this.pivotSign;\n    let col = data.columns;\n    for (let j = 0; j < col; j++) {\n      determinant *= data.get(j, j);\n    }\n    return determinant;\n  }\n\n  get lowerTriangularMatrix() {\n    let data = this.LU;\n    let rows = data.rows;\n    let columns = data.columns;\n    let X = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        if (i > j) {\n          X.set(i, j, data.get(i, j));\n        } else if (i === j) {\n          X.set(i, j, 1);\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get upperTriangularMatrix() {\n    let data = this.LU;\n    let rows = data.rows;\n    let columns = data.columns;\n    let X = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        if (i <= j) {\n          X.set(i, j, data.get(i, j));\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get pivotPermutationVector() {\n    return Array.from(this.pivotVector);\n  }\n}\n\nfunction hypotenuse(a, b) {\n  let r = 0;\n  if (Math.abs(a) > Math.abs(b)) {\n    r = b / a;\n    return Math.abs(a) * Math.sqrt(1 + r * r);\n  }\n  if (b !== 0) {\n    r = a / b;\n    return Math.abs(b) * Math.sqrt(1 + r * r);\n  }\n  return 0;\n}\n\nclass QrDecomposition {\n  constructor(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    let qr = value.clone();\n    let m = value.rows;\n    let n = value.columns;\n    let rdiag = new Float64Array(n);\n    let i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n      let nrm = 0;\n      for (i = k; i < m; i++) {\n        nrm = hypotenuse(nrm, qr.get(i, k));\n      }\n      if (nrm !== 0) {\n        if (qr.get(k, k) < 0) {\n          nrm = -nrm;\n        }\n        for (i = k; i < m; i++) {\n          qr.set(i, k, qr.get(i, k) / nrm);\n        }\n        qr.set(k, k, qr.get(k, k) + 1);\n        for (j = k + 1; j < n; j++) {\n          s = 0;\n          for (i = k; i < m; i++) {\n            s += qr.get(i, k) * qr.get(i, j);\n          }\n          s = -s / qr.get(k, k);\n          for (i = k; i < m; i++) {\n            qr.set(i, j, qr.get(i, j) + s * qr.get(i, k));\n          }\n        }\n      }\n      rdiag[k] = -nrm;\n    }\n\n    this.QR = qr;\n    this.Rdiag = rdiag;\n  }\n\n  solve(value) {\n    value = Matrix.checkMatrix(value);\n\n    let qr = this.QR;\n    let m = qr.rows;\n\n    if (value.rows !== m) {\n      throw new Error('Matrix row dimensions must agree');\n    }\n    if (!this.isFullRank()) {\n      throw new Error('Matrix is rank deficient');\n    }\n\n    let count = value.columns;\n    let X = value.clone();\n    let n = qr.columns;\n    let i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n      for (j = 0; j < count; j++) {\n        s = 0;\n        for (i = k; i < m; i++) {\n          s += qr.get(i, k) * X.get(i, j);\n        }\n        s = -s / qr.get(k, k);\n        for (i = k; i < m; i++) {\n          X.set(i, j, X.get(i, j) + s * qr.get(i, k));\n        }\n      }\n    }\n    for (k = n - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        X.set(k, j, X.get(k, j) / this.Rdiag[k]);\n      }\n      for (i = 0; i < k; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * qr.get(i, k));\n        }\n      }\n    }\n\n    return X.subMatrix(0, n - 1, 0, count - 1);\n  }\n\n  isFullRank() {\n    let columns = this.QR.columns;\n    for (let i = 0; i < columns; i++) {\n      if (this.Rdiag[i] === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  get upperTriangularMatrix() {\n    let qr = this.QR;\n    let n = qr.columns;\n    let X = new Matrix(n, n);\n    let i, j;\n    for (i = 0; i < n; i++) {\n      for (j = 0; j < n; j++) {\n        if (i < j) {\n          X.set(i, j, qr.get(i, j));\n        } else if (i === j) {\n          X.set(i, j, this.Rdiag[i]);\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get orthogonalMatrix() {\n    let qr = this.QR;\n    let rows = qr.rows;\n    let columns = qr.columns;\n    let X = new Matrix(rows, columns);\n    let i, j, k, s;\n\n    for (k = columns - 1; k >= 0; k--) {\n      for (i = 0; i < rows; i++) {\n        X.set(i, k, 0);\n      }\n      X.set(k, k, 1);\n      for (j = k; j < columns; j++) {\n        if (qr.get(k, k) !== 0) {\n          s = 0;\n          for (i = k; i < rows; i++) {\n            s += qr.get(i, k) * X.get(i, j);\n          }\n\n          s = -s / qr.get(k, k);\n\n          for (i = k; i < rows; i++) {\n            X.set(i, j, X.get(i, j) + s * qr.get(i, k));\n          }\n        }\n      }\n    }\n    return X;\n  }\n}\n\nclass SingularValueDecomposition {\n  constructor(value, options = {}) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    if (value.isEmpty()) {\n      throw new Error('Matrix must be non-empty');\n    }\n\n    let m = value.rows;\n    let n = value.columns;\n\n    const {\n      computeLeftSingularVectors = true,\n      computeRightSingularVectors = true,\n      autoTranspose = false,\n    } = options;\n\n    let wantu = Boolean(computeLeftSingularVectors);\n    let wantv = Boolean(computeRightSingularVectors);\n\n    let swapped = false;\n    let a;\n    if (m < n) {\n      if (!autoTranspose) {\n        a = value.clone();\n        // eslint-disable-next-line no-console\n        console.warn(\n          'Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose',\n        );\n      } else {\n        a = value.transpose();\n        m = a.rows;\n        n = a.columns;\n        swapped = true;\n        let aux = wantu;\n        wantu = wantv;\n        wantv = aux;\n      }\n    } else {\n      a = value.clone();\n    }\n\n    let nu = Math.min(m, n);\n    let ni = Math.min(m + 1, n);\n    let s = new Float64Array(ni);\n    let U = new Matrix(m, nu);\n    let V = new Matrix(n, n);\n\n    let e = new Float64Array(n);\n    let work = new Float64Array(m);\n\n    let si = new Float64Array(ni);\n    for (let i = 0; i < ni; i++) si[i] = i;\n\n    let nct = Math.min(m - 1, n);\n    let nrt = Math.max(0, Math.min(n - 2, m));\n    let mrc = Math.max(nct, nrt);\n\n    for (let k = 0; k < mrc; k++) {\n      if (k < nct) {\n        s[k] = 0;\n        for (let i = k; i < m; i++) {\n          s[k] = hypotenuse(s[k], a.get(i, k));\n        }\n        if (s[k] !== 0) {\n          if (a.get(k, k) < 0) {\n            s[k] = -s[k];\n          }\n          for (let i = k; i < m; i++) {\n            a.set(i, k, a.get(i, k) / s[k]);\n          }\n          a.set(k, k, a.get(k, k) + 1);\n        }\n        s[k] = -s[k];\n      }\n\n      for (let j = k + 1; j < n; j++) {\n        if (k < nct && s[k] !== 0) {\n          let t = 0;\n          for (let i = k; i < m; i++) {\n            t += a.get(i, k) * a.get(i, j);\n          }\n          t = -t / a.get(k, k);\n          for (let i = k; i < m; i++) {\n            a.set(i, j, a.get(i, j) + t * a.get(i, k));\n          }\n        }\n        e[j] = a.get(k, j);\n      }\n\n      if (wantu && k < nct) {\n        for (let i = k; i < m; i++) {\n          U.set(i, k, a.get(i, k));\n        }\n      }\n\n      if (k < nrt) {\n        e[k] = 0;\n        for (let i = k + 1; i < n; i++) {\n          e[k] = hypotenuse(e[k], e[i]);\n        }\n        if (e[k] !== 0) {\n          if (e[k + 1] < 0) {\n            e[k] = 0 - e[k];\n          }\n          for (let i = k + 1; i < n; i++) {\n            e[i] /= e[k];\n          }\n          e[k + 1] += 1;\n        }\n        e[k] = -e[k];\n        if (k + 1 < m && e[k] !== 0) {\n          for (let i = k + 1; i < m; i++) {\n            work[i] = 0;\n          }\n          for (let i = k + 1; i < m; i++) {\n            for (let j = k + 1; j < n; j++) {\n              work[i] += e[j] * a.get(i, j);\n            }\n          }\n          for (let j = k + 1; j < n; j++) {\n            let t = -e[j] / e[k + 1];\n            for (let i = k + 1; i < m; i++) {\n              a.set(i, j, a.get(i, j) + t * work[i]);\n            }\n          }\n        }\n        if (wantv) {\n          for (let i = k + 1; i < n; i++) {\n            V.set(i, k, e[i]);\n          }\n        }\n      }\n    }\n\n    let p = Math.min(n, m + 1);\n    if (nct < n) {\n      s[nct] = a.get(nct, nct);\n    }\n    if (m < p) {\n      s[p - 1] = 0;\n    }\n    if (nrt + 1 < p) {\n      e[nrt] = a.get(nrt, p - 1);\n    }\n    e[p - 1] = 0;\n\n    if (wantu) {\n      for (let j = nct; j < nu; j++) {\n        for (let i = 0; i < m; i++) {\n          U.set(i, j, 0);\n        }\n        U.set(j, j, 1);\n      }\n      for (let k = nct - 1; k >= 0; k--) {\n        if (s[k] !== 0) {\n          for (let j = k + 1; j < nu; j++) {\n            let t = 0;\n            for (let i = k; i < m; i++) {\n              t += U.get(i, k) * U.get(i, j);\n            }\n            t = -t / U.get(k, k);\n            for (let i = k; i < m; i++) {\n              U.set(i, j, U.get(i, j) + t * U.get(i, k));\n            }\n          }\n          for (let i = k; i < m; i++) {\n            U.set(i, k, -U.get(i, k));\n          }\n          U.set(k, k, 1 + U.get(k, k));\n          for (let i = 0; i < k - 1; i++) {\n            U.set(i, k, 0);\n          }\n        } else {\n          for (let i = 0; i < m; i++) {\n            U.set(i, k, 0);\n          }\n          U.set(k, k, 1);\n        }\n      }\n    }\n\n    if (wantv) {\n      for (let k = n - 1; k >= 0; k--) {\n        if (k < nrt && e[k] !== 0) {\n          for (let j = k + 1; j < n; j++) {\n            let t = 0;\n            for (let i = k + 1; i < n; i++) {\n              t += V.get(i, k) * V.get(i, j);\n            }\n            t = -t / V.get(k + 1, k);\n            for (let i = k + 1; i < n; i++) {\n              V.set(i, j, V.get(i, j) + t * V.get(i, k));\n            }\n          }\n        }\n        for (let i = 0; i < n; i++) {\n          V.set(i, k, 0);\n        }\n        V.set(k, k, 1);\n      }\n    }\n\n    let pp = p - 1;\n    let eps = Number.EPSILON;\n    while (p > 0) {\n      let k, kase;\n      for (k = p - 2; k >= -1; k--) {\n        if (k === -1) {\n          break;\n        }\n        const alpha =\n          Number.MIN_VALUE + eps * Math.abs(s[k] + Math.abs(s[k + 1]));\n        if (Math.abs(e[k]) <= alpha || Number.isNaN(e[k])) {\n          e[k] = 0;\n          break;\n        }\n      }\n      if (k === p - 2) {\n        kase = 4;\n      } else {\n        let ks;\n        for (ks = p - 1; ks >= k; ks--) {\n          if (ks === k) {\n            break;\n          }\n          let t =\n            (ks !== p ? Math.abs(e[ks]) : 0) +\n            (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n          if (Math.abs(s[ks]) <= eps * t) {\n            s[ks] = 0;\n            break;\n          }\n        }\n        if (ks === k) {\n          kase = 3;\n        } else if (ks === p - 1) {\n          kase = 1;\n        } else {\n          kase = 2;\n          k = ks;\n        }\n      }\n\n      k++;\n\n      switch (kase) {\n        case 1: {\n          let f = e[p - 2];\n          e[p - 2] = 0;\n          for (let j = p - 2; j >= k; j--) {\n            let t = hypotenuse(s[j], f);\n            let cs = s[j] / t;\n            let sn = f / t;\n            s[j] = t;\n            if (j !== k) {\n              f = -sn * e[j - 1];\n              e[j - 1] = cs * e[j - 1];\n            }\n            if (wantv) {\n              for (let i = 0; i < n; i++) {\n                t = cs * V.get(i, j) + sn * V.get(i, p - 1);\n                V.set(i, p - 1, -sn * V.get(i, j) + cs * V.get(i, p - 1));\n                V.set(i, j, t);\n              }\n            }\n          }\n          break;\n        }\n        case 2: {\n          let f = e[k - 1];\n          e[k - 1] = 0;\n          for (let j = k; j < p; j++) {\n            let t = hypotenuse(s[j], f);\n            let cs = s[j] / t;\n            let sn = f / t;\n            s[j] = t;\n            f = -sn * e[j];\n            e[j] = cs * e[j];\n            if (wantu) {\n              for (let i = 0; i < m; i++) {\n                t = cs * U.get(i, j) + sn * U.get(i, k - 1);\n                U.set(i, k - 1, -sn * U.get(i, j) + cs * U.get(i, k - 1));\n                U.set(i, j, t);\n              }\n            }\n          }\n          break;\n        }\n        case 3: {\n          const scale = Math.max(\n            Math.abs(s[p - 1]),\n            Math.abs(s[p - 2]),\n            Math.abs(e[p - 2]),\n            Math.abs(s[k]),\n            Math.abs(e[k]),\n          );\n          const sp = s[p - 1] / scale;\n          const spm1 = s[p - 2] / scale;\n          const epm1 = e[p - 2] / scale;\n          const sk = s[k] / scale;\n          const ek = e[k] / scale;\n          const b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n          const c = sp * epm1 * (sp * epm1);\n          let shift = 0;\n          if (b !== 0 || c !== 0) {\n            if (b < 0) {\n              shift = 0 - Math.sqrt(b * b + c);\n            } else {\n              shift = Math.sqrt(b * b + c);\n            }\n            shift = c / (b + shift);\n          }\n          let f = (sk + sp) * (sk - sp) + shift;\n          let g = sk * ek;\n          for (let j = k; j < p - 1; j++) {\n            let t = hypotenuse(f, g);\n            if (t === 0) t = Number.MIN_VALUE;\n            let cs = f / t;\n            let sn = g / t;\n            if (j !== k) {\n              e[j - 1] = t;\n            }\n            f = cs * s[j] + sn * e[j];\n            e[j] = cs * e[j] - sn * s[j];\n            g = sn * s[j + 1];\n            s[j + 1] = cs * s[j + 1];\n            if (wantv) {\n              for (let i = 0; i < n; i++) {\n                t = cs * V.get(i, j) + sn * V.get(i, j + 1);\n                V.set(i, j + 1, -sn * V.get(i, j) + cs * V.get(i, j + 1));\n                V.set(i, j, t);\n              }\n            }\n            t = hypotenuse(f, g);\n            if (t === 0) t = Number.MIN_VALUE;\n            cs = f / t;\n            sn = g / t;\n            s[j] = t;\n            f = cs * e[j] + sn * s[j + 1];\n            s[j + 1] = -sn * e[j] + cs * s[j + 1];\n            g = sn * e[j + 1];\n            e[j + 1] = cs * e[j + 1];\n            if (wantu && j < m - 1) {\n              for (let i = 0; i < m; i++) {\n                t = cs * U.get(i, j) + sn * U.get(i, j + 1);\n                U.set(i, j + 1, -sn * U.get(i, j) + cs * U.get(i, j + 1));\n                U.set(i, j, t);\n              }\n            }\n          }\n          e[p - 2] = f;\n          break;\n        }\n        case 4: {\n          if (s[k] <= 0) {\n            s[k] = s[k] < 0 ? -s[k] : 0;\n            if (wantv) {\n              for (let i = 0; i <= pp; i++) {\n                V.set(i, k, -V.get(i, k));\n              }\n            }\n          }\n          while (k < pp) {\n            if (s[k] >= s[k + 1]) {\n              break;\n            }\n            let t = s[k];\n            s[k] = s[k + 1];\n            s[k + 1] = t;\n            if (wantv && k < n - 1) {\n              for (let i = 0; i < n; i++) {\n                t = V.get(i, k + 1);\n                V.set(i, k + 1, V.get(i, k));\n                V.set(i, k, t);\n              }\n            }\n            if (wantu && k < m - 1) {\n              for (let i = 0; i < m; i++) {\n                t = U.get(i, k + 1);\n                U.set(i, k + 1, U.get(i, k));\n                U.set(i, k, t);\n              }\n            }\n            k++;\n          }\n          p--;\n          break;\n        }\n        // no default\n      }\n    }\n\n    if (swapped) {\n      let tmp = V;\n      V = U;\n      U = tmp;\n    }\n\n    this.m = m;\n    this.n = n;\n    this.s = s;\n    this.U = U;\n    this.V = V;\n  }\n\n  solve(value) {\n    let Y = value;\n    let e = this.threshold;\n    let scols = this.s.length;\n    let Ls = Matrix.zeros(scols, scols);\n\n    for (let i = 0; i < scols; i++) {\n      if (Math.abs(this.s[i]) <= e) {\n        Ls.set(i, i, 0);\n      } else {\n        Ls.set(i, i, 1 / this.s[i]);\n      }\n    }\n\n    let U = this.U;\n    let V = this.rightSingularVectors;\n\n    let VL = V.mmul(Ls);\n    let vrows = V.rows;\n    let urows = U.rows;\n    let VLU = Matrix.zeros(vrows, urows);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < urows; j++) {\n        let sum = 0;\n        for (let k = 0; k < scols; k++) {\n          sum += VL.get(i, k) * U.get(j, k);\n        }\n        VLU.set(i, j, sum);\n      }\n    }\n\n    return VLU.mmul(Y);\n  }\n\n  solveForDiagonal(value) {\n    return this.solve(Matrix.diag(value));\n  }\n\n  inverse() {\n    let V = this.V;\n    let e = this.threshold;\n    let vrows = V.rows;\n    let vcols = V.columns;\n    let X = new Matrix(vrows, this.s.length);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < vcols; j++) {\n        if (Math.abs(this.s[j]) > e) {\n          X.set(i, j, V.get(i, j) / this.s[j]);\n        }\n      }\n    }\n\n    let U = this.U;\n\n    let urows = U.rows;\n    let ucols = U.columns;\n    let Y = new Matrix(vrows, urows);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < urows; j++) {\n        let sum = 0;\n        for (let k = 0; k < ucols; k++) {\n          sum += X.get(i, k) * U.get(j, k);\n        }\n        Y.set(i, j, sum);\n      }\n    }\n\n    return Y;\n  }\n\n  get condition() {\n    return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n  }\n\n  get norm2() {\n    return this.s[0];\n  }\n\n  get rank() {\n    let tol = Math.max(this.m, this.n) * this.s[0] * Number.EPSILON;\n    let r = 0;\n    let s = this.s;\n    for (let i = 0, ii = s.length; i < ii; i++) {\n      if (s[i] > tol) {\n        r++;\n      }\n    }\n    return r;\n  }\n\n  get diagonal() {\n    return Array.from(this.s);\n  }\n\n  get threshold() {\n    return (Number.EPSILON / 2) * Math.max(this.m, this.n) * this.s[0];\n  }\n\n  get leftSingularVectors() {\n    return this.U;\n  }\n\n  get rightSingularVectors() {\n    return this.V;\n  }\n\n  get diagonalMatrix() {\n    return Matrix.diag(this.s);\n  }\n}\n\nfunction inverse(matrix, useSVD = false) {\n  matrix = WrapperMatrix2D.checkMatrix(matrix);\n  if (useSVD) {\n    return new SingularValueDecomposition(matrix).inverse();\n  } else {\n    return solve(matrix, Matrix.eye(matrix.rows));\n  }\n}\n\nfunction solve(leftHandSide, rightHandSide, useSVD = false) {\n  leftHandSide = WrapperMatrix2D.checkMatrix(leftHandSide);\n  rightHandSide = WrapperMatrix2D.checkMatrix(rightHandSide);\n  if (useSVD) {\n    return new SingularValueDecomposition(leftHandSide).solve(rightHandSide);\n  } else {\n    return leftHandSide.isSquare()\n      ? new LuDecomposition(leftHandSide).solve(rightHandSide)\n      : new QrDecomposition(leftHandSide).solve(rightHandSide);\n  }\n}\n\nfunction determinant(matrix) {\n  matrix = Matrix.checkMatrix(matrix);\n  if (matrix.isSquare()) {\n    if (matrix.columns === 0) {\n      return 1;\n    }\n\n    let a, b, c, d;\n    if (matrix.columns === 2) {\n      // 2 x 2 matrix\n      a = matrix.get(0, 0);\n      b = matrix.get(0, 1);\n      c = matrix.get(1, 0);\n      d = matrix.get(1, 1);\n\n      return a * d - b * c;\n    } else if (matrix.columns === 3) {\n      // 3 x 3 matrix\n      let subMatrix0, subMatrix1, subMatrix2;\n      subMatrix0 = new MatrixSelectionView(matrix, [1, 2], [1, 2]);\n      subMatrix1 = new MatrixSelectionView(matrix, [1, 2], [0, 2]);\n      subMatrix2 = new MatrixSelectionView(matrix, [1, 2], [0, 1]);\n      a = matrix.get(0, 0);\n      b = matrix.get(0, 1);\n      c = matrix.get(0, 2);\n\n      return (\n        a * determinant(subMatrix0) -\n        b * determinant(subMatrix1) +\n        c * determinant(subMatrix2)\n      );\n    } else {\n      // general purpose determinant using the LU decomposition\n      return new LuDecomposition(matrix).determinant;\n    }\n  } else {\n    throw Error('determinant can only be calculated for a square matrix');\n  }\n}\n\nfunction xrange(n, exception) {\n  let range = [];\n  for (let i = 0; i < n; i++) {\n    if (i !== exception) {\n      range.push(i);\n    }\n  }\n  return range;\n}\n\nfunction dependenciesOneRow(\n  error,\n  matrix,\n  index,\n  thresholdValue = 10e-10,\n  thresholdError = 10e-10,\n) {\n  if (error > thresholdError) {\n    return new Array(matrix.rows + 1).fill(0);\n  } else {\n    let returnArray = matrix.addRow(index, [0]);\n    for (let i = 0; i < returnArray.rows; i++) {\n      if (Math.abs(returnArray.get(i, 0)) < thresholdValue) {\n        returnArray.set(i, 0, 0);\n      }\n    }\n    return returnArray.to1DArray();\n  }\n}\n\nfunction linearDependencies(matrix, options = {}) {\n  const { thresholdValue = 10e-10, thresholdError = 10e-10 } = options;\n  matrix = Matrix.checkMatrix(matrix);\n\n  let n = matrix.rows;\n  let results = new Matrix(n, n);\n\n  for (let i = 0; i < n; i++) {\n    let b = Matrix.columnVector(matrix.getRow(i));\n    let Abis = matrix.subMatrixRow(xrange(n, i)).transpose();\n    let svd = new SingularValueDecomposition(Abis);\n    let x = svd.solve(b);\n    let error = Matrix.sub(b, Abis.mmul(x)).abs().max();\n    results.setRow(\n      i,\n      dependenciesOneRow(error, x, i, thresholdValue, thresholdError),\n    );\n  }\n  return results;\n}\n\nfunction pseudoInverse(matrix, threshold = Number.EPSILON) {\n  matrix = Matrix.checkMatrix(matrix);\n  if (matrix.isEmpty()) {\n    // with a zero dimension, the pseudo-inverse is the transpose, since all 0xn and nx0 matrices are singular\n    // (0xn)*(nx0)*(0xn) = 0xn\n    // (nx0)*(0xn)*(nx0) = nx0\n    return matrix.transpose();\n  }\n  let svdSolution = new SingularValueDecomposition(matrix, { autoTranspose: true });\n\n  let U = svdSolution.leftSingularVectors;\n  let V = svdSolution.rightSingularVectors;\n  let s = svdSolution.diagonal;\n\n  for (let i = 0; i < s.length; i++) {\n    if (Math.abs(s[i]) > threshold) {\n      s[i] = 1.0 / s[i];\n    } else {\n      s[i] = 0.0;\n    }\n  }\n\n  return V.mmul(Matrix.diag(s).mmul(U.transpose()));\n}\n\nfunction covariance(xMatrix, yMatrix = xMatrix, options = {}) {\n  xMatrix = new Matrix(xMatrix);\n  let yIsSame = false;\n  if (\n    typeof yMatrix === 'object' &&\n    !Matrix.isMatrix(yMatrix) &&\n    !isAnyArray.isAnyArray(yMatrix)\n  ) {\n    options = yMatrix;\n    yMatrix = xMatrix;\n    yIsSame = true;\n  } else {\n    yMatrix = new Matrix(yMatrix);\n  }\n  if (xMatrix.rows !== yMatrix.rows) {\n    throw new TypeError('Both matrices must have the same number of rows');\n  }\n  const { center = true } = options;\n  if (center) {\n    xMatrix = xMatrix.center('column');\n    if (!yIsSame) {\n      yMatrix = yMatrix.center('column');\n    }\n  }\n  const cov = xMatrix.transpose().mmul(yMatrix);\n  for (let i = 0; i < cov.rows; i++) {\n    for (let j = 0; j < cov.columns; j++) {\n      cov.set(i, j, cov.get(i, j) * (1 / (xMatrix.rows - 1)));\n    }\n  }\n  return cov;\n}\n\nfunction correlation(xMatrix, yMatrix = xMatrix, options = {}) {\n  xMatrix = new Matrix(xMatrix);\n  let yIsSame = false;\n  if (\n    typeof yMatrix === 'object' &&\n    !Matrix.isMatrix(yMatrix) &&\n    !isAnyArray.isAnyArray(yMatrix)\n  ) {\n    options = yMatrix;\n    yMatrix = xMatrix;\n    yIsSame = true;\n  } else {\n    yMatrix = new Matrix(yMatrix);\n  }\n  if (xMatrix.rows !== yMatrix.rows) {\n    throw new TypeError('Both matrices must have the same number of rows');\n  }\n\n  const { center = true, scale = true } = options;\n  if (center) {\n    xMatrix.center('column');\n    if (!yIsSame) {\n      yMatrix.center('column');\n    }\n  }\n  if (scale) {\n    xMatrix.scale('column');\n    if (!yIsSame) {\n      yMatrix.scale('column');\n    }\n  }\n\n  const sdx = xMatrix.standardDeviation('column', { unbiased: true });\n  const sdy = yIsSame\n    ? sdx\n    : yMatrix.standardDeviation('column', { unbiased: true });\n\n  const corr = xMatrix.transpose().mmul(yMatrix);\n  for (let i = 0; i < corr.rows; i++) {\n    for (let j = 0; j < corr.columns; j++) {\n      corr.set(\n        i,\n        j,\n        corr.get(i, j) * (1 / (sdx[i] * sdy[j])) * (1 / (xMatrix.rows - 1)),\n      );\n    }\n  }\n  return corr;\n}\n\nclass EigenvalueDecomposition {\n  constructor(matrix, options = {}) {\n    const { assumeSymmetric = false } = options;\n\n    matrix = WrapperMatrix2D.checkMatrix(matrix);\n    if (!matrix.isSquare()) {\n      throw new Error('Matrix is not a square matrix');\n    }\n\n    if (matrix.isEmpty()) {\n      throw new Error('Matrix must be non-empty');\n    }\n\n    let n = matrix.columns;\n    let V = new Matrix(n, n);\n    let d = new Float64Array(n);\n    let e = new Float64Array(n);\n    let value = matrix;\n    let i, j;\n\n    let isSymmetric = false;\n    if (assumeSymmetric) {\n      isSymmetric = true;\n    } else {\n      isSymmetric = matrix.isSymmetric();\n    }\n\n    if (isSymmetric) {\n      for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n          V.set(i, j, value.get(i, j));\n        }\n      }\n      tred2(n, e, d, V);\n      tql2(n, e, d, V);\n    } else {\n      let H = new Matrix(n, n);\n      let ort = new Float64Array(n);\n      for (j = 0; j < n; j++) {\n        for (i = 0; i < n; i++) {\n          H.set(i, j, value.get(i, j));\n        }\n      }\n      orthes(n, H, ort, V);\n      hqr2(n, e, d, V, H);\n    }\n\n    this.n = n;\n    this.e = e;\n    this.d = d;\n    this.V = V;\n  }\n\n  get realEigenvalues() {\n    return Array.from(this.d);\n  }\n\n  get imaginaryEigenvalues() {\n    return Array.from(this.e);\n  }\n\n  get eigenvectorMatrix() {\n    return this.V;\n  }\n\n  get diagonalMatrix() {\n    let n = this.n;\n    let e = this.e;\n    let d = this.d;\n    let X = new Matrix(n, n);\n    let i, j;\n    for (i = 0; i < n; i++) {\n      for (j = 0; j < n; j++) {\n        X.set(i, j, 0);\n      }\n      X.set(i, i, d[i]);\n      if (e[i] > 0) {\n        X.set(i, i + 1, e[i]);\n      } else if (e[i] < 0) {\n        X.set(i, i - 1, e[i]);\n      }\n    }\n    return X;\n  }\n}\n\nfunction tred2(n, e, d, V) {\n  let f, g, h, i, j, k, hh, scale;\n\n  for (j = 0; j < n; j++) {\n    d[j] = V.get(n - 1, j);\n  }\n\n  for (i = n - 1; i > 0; i--) {\n    scale = 0;\n    h = 0;\n    for (k = 0; k < i; k++) {\n      scale = scale + Math.abs(d[k]);\n    }\n\n    if (scale === 0) {\n      e[i] = d[i - 1];\n      for (j = 0; j < i; j++) {\n        d[j] = V.get(i - 1, j);\n        V.set(i, j, 0);\n        V.set(j, i, 0);\n      }\n    } else {\n      for (k = 0; k < i; k++) {\n        d[k] /= scale;\n        h += d[k] * d[k];\n      }\n\n      f = d[i - 1];\n      g = Math.sqrt(h);\n      if (f > 0) {\n        g = -g;\n      }\n\n      e[i] = scale * g;\n      h = h - f * g;\n      d[i - 1] = f - g;\n      for (j = 0; j < i; j++) {\n        e[j] = 0;\n      }\n\n      for (j = 0; j < i; j++) {\n        f = d[j];\n        V.set(j, i, f);\n        g = e[j] + V.get(j, j) * f;\n        for (k = j + 1; k <= i - 1; k++) {\n          g += V.get(k, j) * d[k];\n          e[k] += V.get(k, j) * f;\n        }\n        e[j] = g;\n      }\n\n      f = 0;\n      for (j = 0; j < i; j++) {\n        e[j] /= h;\n        f += e[j] * d[j];\n      }\n\n      hh = f / (h + h);\n      for (j = 0; j < i; j++) {\n        e[j] -= hh * d[j];\n      }\n\n      for (j = 0; j < i; j++) {\n        f = d[j];\n        g = e[j];\n        for (k = j; k <= i - 1; k++) {\n          V.set(k, j, V.get(k, j) - (f * e[k] + g * d[k]));\n        }\n        d[j] = V.get(i - 1, j);\n        V.set(i, j, 0);\n      }\n    }\n    d[i] = h;\n  }\n\n  for (i = 0; i < n - 1; i++) {\n    V.set(n - 1, i, V.get(i, i));\n    V.set(i, i, 1);\n    h = d[i + 1];\n    if (h !== 0) {\n      for (k = 0; k <= i; k++) {\n        d[k] = V.get(k, i + 1) / h;\n      }\n\n      for (j = 0; j <= i; j++) {\n        g = 0;\n        for (k = 0; k <= i; k++) {\n          g += V.get(k, i + 1) * V.get(k, j);\n        }\n        for (k = 0; k <= i; k++) {\n          V.set(k, j, V.get(k, j) - g * d[k]);\n        }\n      }\n    }\n\n    for (k = 0; k <= i; k++) {\n      V.set(k, i + 1, 0);\n    }\n  }\n\n  for (j = 0; j < n; j++) {\n    d[j] = V.get(n - 1, j);\n    V.set(n - 1, j, 0);\n  }\n\n  V.set(n - 1, n - 1, 1);\n  e[0] = 0;\n}\n\nfunction tql2(n, e, d, V) {\n  let g, h, i, j, k, l, m, p, r, dl1, c, c2, c3, el1, s, s2;\n\n  for (i = 1; i < n; i++) {\n    e[i - 1] = e[i];\n  }\n\n  e[n - 1] = 0;\n\n  let f = 0;\n  let tst1 = 0;\n  let eps = Number.EPSILON;\n\n  for (l = 0; l < n; l++) {\n    tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n    m = l;\n    while (m < n) {\n      if (Math.abs(e[m]) <= eps * tst1) {\n        break;\n      }\n      m++;\n    }\n\n    if (m > l) {\n      do {\n\n        g = d[l];\n        p = (d[l + 1] - g) / (2 * e[l]);\n        r = hypotenuse(p, 1);\n        if (p < 0) {\n          r = -r;\n        }\n\n        d[l] = e[l] / (p + r);\n        d[l + 1] = e[l] * (p + r);\n        dl1 = d[l + 1];\n        h = g - d[l];\n        for (i = l + 2; i < n; i++) {\n          d[i] -= h;\n        }\n\n        f = f + h;\n\n        p = d[m];\n        c = 1;\n        c2 = c;\n        c3 = c;\n        el1 = e[l + 1];\n        s = 0;\n        s2 = 0;\n        for (i = m - 1; i >= l; i--) {\n          c3 = c2;\n          c2 = c;\n          s2 = s;\n          g = c * e[i];\n          h = c * p;\n          r = hypotenuse(p, e[i]);\n          e[i + 1] = s * r;\n          s = e[i] / r;\n          c = p / r;\n          p = c * d[i] - s * g;\n          d[i + 1] = h + s * (c * g + s * d[i]);\n\n          for (k = 0; k < n; k++) {\n            h = V.get(k, i + 1);\n            V.set(k, i + 1, s * V.get(k, i) + c * h);\n            V.set(k, i, c * V.get(k, i) - s * h);\n          }\n        }\n\n        p = (-s * s2 * c3 * el1 * e[l]) / dl1;\n        e[l] = s * p;\n        d[l] = c * p;\n      } while (Math.abs(e[l]) > eps * tst1);\n    }\n    d[l] = d[l] + f;\n    e[l] = 0;\n  }\n\n  for (i = 0; i < n - 1; i++) {\n    k = i;\n    p = d[i];\n    for (j = i + 1; j < n; j++) {\n      if (d[j] < p) {\n        k = j;\n        p = d[j];\n      }\n    }\n\n    if (k !== i) {\n      d[k] = d[i];\n      d[i] = p;\n      for (j = 0; j < n; j++) {\n        p = V.get(j, i);\n        V.set(j, i, V.get(j, k));\n        V.set(j, k, p);\n      }\n    }\n  }\n}\n\nfunction orthes(n, H, ort, V) {\n  let low = 0;\n  let high = n - 1;\n  let f, g, h, i, j, m;\n  let scale;\n\n  for (m = low + 1; m <= high - 1; m++) {\n    scale = 0;\n    for (i = m; i <= high; i++) {\n      scale = scale + Math.abs(H.get(i, m - 1));\n    }\n\n    if (scale !== 0) {\n      h = 0;\n      for (i = high; i >= m; i--) {\n        ort[i] = H.get(i, m - 1) / scale;\n        h += ort[i] * ort[i];\n      }\n\n      g = Math.sqrt(h);\n      if (ort[m] > 0) {\n        g = -g;\n      }\n\n      h = h - ort[m] * g;\n      ort[m] = ort[m] - g;\n\n      for (j = m; j < n; j++) {\n        f = 0;\n        for (i = high; i >= m; i--) {\n          f += ort[i] * H.get(i, j);\n        }\n\n        f = f / h;\n        for (i = m; i <= high; i++) {\n          H.set(i, j, H.get(i, j) - f * ort[i]);\n        }\n      }\n\n      for (i = 0; i <= high; i++) {\n        f = 0;\n        for (j = high; j >= m; j--) {\n          f += ort[j] * H.get(i, j);\n        }\n\n        f = f / h;\n        for (j = m; j <= high; j++) {\n          H.set(i, j, H.get(i, j) - f * ort[j]);\n        }\n      }\n\n      ort[m] = scale * ort[m];\n      H.set(m, m - 1, scale * g);\n    }\n  }\n\n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      V.set(i, j, i === j ? 1 : 0);\n    }\n  }\n\n  for (m = high - 1; m >= low + 1; m--) {\n    if (H.get(m, m - 1) !== 0) {\n      for (i = m + 1; i <= high; i++) {\n        ort[i] = H.get(i, m - 1);\n      }\n\n      for (j = m; j <= high; j++) {\n        g = 0;\n        for (i = m; i <= high; i++) {\n          g += ort[i] * V.get(i, j);\n        }\n\n        g = g / ort[m] / H.get(m, m - 1);\n        for (i = m; i <= high; i++) {\n          V.set(i, j, V.get(i, j) + g * ort[i]);\n        }\n      }\n    }\n  }\n}\n\nfunction hqr2(nn, e, d, V, H) {\n  let n = nn - 1;\n  let low = 0;\n  let high = nn - 1;\n  let eps = Number.EPSILON;\n  let exshift = 0;\n  let norm = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let z = 0;\n  let iter = 0;\n  let i, j, k, l, m, t, w, x, y;\n  let ra, sa, vr, vi;\n  let notlast, cdivres;\n\n  for (i = 0; i < nn; i++) {\n    if (i < low || i > high) {\n      d[i] = H.get(i, i);\n      e[i] = 0;\n    }\n\n    for (j = Math.max(i - 1, 0); j < nn; j++) {\n      norm = norm + Math.abs(H.get(i, j));\n    }\n  }\n\n  while (n >= low) {\n    l = n;\n    while (l > low) {\n      s = Math.abs(H.get(l - 1, l - 1)) + Math.abs(H.get(l, l));\n      if (s === 0) {\n        s = norm;\n      }\n      if (Math.abs(H.get(l, l - 1)) < eps * s) {\n        break;\n      }\n      l--;\n    }\n\n    if (l === n) {\n      H.set(n, n, H.get(n, n) + exshift);\n      d[n] = H.get(n, n);\n      e[n] = 0;\n      n--;\n      iter = 0;\n    } else if (l === n - 1) {\n      w = H.get(n, n - 1) * H.get(n - 1, n);\n      p = (H.get(n - 1, n - 1) - H.get(n, n)) / 2;\n      q = p * p + w;\n      z = Math.sqrt(Math.abs(q));\n      H.set(n, n, H.get(n, n) + exshift);\n      H.set(n - 1, n - 1, H.get(n - 1, n - 1) + exshift);\n      x = H.get(n, n);\n\n      if (q >= 0) {\n        z = p >= 0 ? p + z : p - z;\n        d[n - 1] = x + z;\n        d[n] = d[n - 1];\n        if (z !== 0) {\n          d[n] = x - w / z;\n        }\n        e[n - 1] = 0;\n        e[n] = 0;\n        x = H.get(n, n - 1);\n        s = Math.abs(x) + Math.abs(z);\n        p = x / s;\n        q = z / s;\n        r = Math.sqrt(p * p + q * q);\n        p = p / r;\n        q = q / r;\n\n        for (j = n - 1; j < nn; j++) {\n          z = H.get(n - 1, j);\n          H.set(n - 1, j, q * z + p * H.get(n, j));\n          H.set(n, j, q * H.get(n, j) - p * z);\n        }\n\n        for (i = 0; i <= n; i++) {\n          z = H.get(i, n - 1);\n          H.set(i, n - 1, q * z + p * H.get(i, n));\n          H.set(i, n, q * H.get(i, n) - p * z);\n        }\n\n        for (i = low; i <= high; i++) {\n          z = V.get(i, n - 1);\n          V.set(i, n - 1, q * z + p * V.get(i, n));\n          V.set(i, n, q * V.get(i, n) - p * z);\n        }\n      } else {\n        d[n - 1] = x + p;\n        d[n] = x + p;\n        e[n - 1] = z;\n        e[n] = -z;\n      }\n\n      n = n - 2;\n      iter = 0;\n    } else {\n      x = H.get(n, n);\n      y = 0;\n      w = 0;\n      if (l < n) {\n        y = H.get(n - 1, n - 1);\n        w = H.get(n, n - 1) * H.get(n - 1, n);\n      }\n\n      if (iter === 10) {\n        exshift += x;\n        for (i = low; i <= n; i++) {\n          H.set(i, i, H.get(i, i) - x);\n        }\n        s = Math.abs(H.get(n, n - 1)) + Math.abs(H.get(n - 1, n - 2));\n        // eslint-disable-next-line no-multi-assign\n        x = y = 0.75 * s;\n        w = -0.4375 * s * s;\n      }\n\n      if (iter === 30) {\n        s = (y - x) / 2;\n        s = s * s + w;\n        if (s > 0) {\n          s = Math.sqrt(s);\n          if (y < x) {\n            s = -s;\n          }\n          s = x - w / ((y - x) / 2 + s);\n          for (i = low; i <= n; i++) {\n            H.set(i, i, H.get(i, i) - s);\n          }\n          exshift += s;\n          // eslint-disable-next-line no-multi-assign\n          x = y = w = 0.964;\n        }\n      }\n\n      iter = iter + 1;\n\n      m = n - 2;\n      while (m >= l) {\n        z = H.get(m, m);\n        r = x - z;\n        s = y - z;\n        p = (r * s - w) / H.get(m + 1, m) + H.get(m, m + 1);\n        q = H.get(m + 1, m + 1) - z - r - s;\n        r = H.get(m + 2, m + 1);\n        s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n        p = p / s;\n        q = q / s;\n        r = r / s;\n        if (m === l) {\n          break;\n        }\n        if (\n          Math.abs(H.get(m, m - 1)) * (Math.abs(q) + Math.abs(r)) <\n          eps *\n            (Math.abs(p) *\n              (Math.abs(H.get(m - 1, m - 1)) +\n                Math.abs(z) +\n                Math.abs(H.get(m + 1, m + 1))))\n        ) {\n          break;\n        }\n        m--;\n      }\n\n      for (i = m + 2; i <= n; i++) {\n        H.set(i, i - 2, 0);\n        if (i > m + 2) {\n          H.set(i, i - 3, 0);\n        }\n      }\n\n      for (k = m; k <= n - 1; k++) {\n        notlast = k !== n - 1;\n        if (k !== m) {\n          p = H.get(k, k - 1);\n          q = H.get(k + 1, k - 1);\n          r = notlast ? H.get(k + 2, k - 1) : 0;\n          x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n          if (x !== 0) {\n            p = p / x;\n            q = q / x;\n            r = r / x;\n          }\n        }\n\n        if (x === 0) {\n          break;\n        }\n\n        s = Math.sqrt(p * p + q * q + r * r);\n        if (p < 0) {\n          s = -s;\n        }\n\n        if (s !== 0) {\n          if (k !== m) {\n            H.set(k, k - 1, -s * x);\n          } else if (l !== m) {\n            H.set(k, k - 1, -H.get(k, k - 1));\n          }\n\n          p = p + s;\n          x = p / s;\n          y = q / s;\n          z = r / s;\n          q = q / p;\n          r = r / p;\n\n          for (j = k; j < nn; j++) {\n            p = H.get(k, j) + q * H.get(k + 1, j);\n            if (notlast) {\n              p = p + r * H.get(k + 2, j);\n              H.set(k + 2, j, H.get(k + 2, j) - p * z);\n            }\n\n            H.set(k, j, H.get(k, j) - p * x);\n            H.set(k + 1, j, H.get(k + 1, j) - p * y);\n          }\n\n          for (i = 0; i <= Math.min(n, k + 3); i++) {\n            p = x * H.get(i, k) + y * H.get(i, k + 1);\n            if (notlast) {\n              p = p + z * H.get(i, k + 2);\n              H.set(i, k + 2, H.get(i, k + 2) - p * r);\n            }\n\n            H.set(i, k, H.get(i, k) - p);\n            H.set(i, k + 1, H.get(i, k + 1) - p * q);\n          }\n\n          for (i = low; i <= high; i++) {\n            p = x * V.get(i, k) + y * V.get(i, k + 1);\n            if (notlast) {\n              p = p + z * V.get(i, k + 2);\n              V.set(i, k + 2, V.get(i, k + 2) - p * r);\n            }\n\n            V.set(i, k, V.get(i, k) - p);\n            V.set(i, k + 1, V.get(i, k + 1) - p * q);\n          }\n        }\n      }\n    }\n  }\n\n  if (norm === 0) {\n    return;\n  }\n\n  for (n = nn - 1; n >= 0; n--) {\n    p = d[n];\n    q = e[n];\n\n    if (q === 0) {\n      l = n;\n      H.set(n, n, 1);\n      for (i = n - 1; i >= 0; i--) {\n        w = H.get(i, i) - p;\n        r = 0;\n        for (j = l; j <= n; j++) {\n          r = r + H.get(i, j) * H.get(j, n);\n        }\n\n        if (e[i] < 0) {\n          z = w;\n          s = r;\n        } else {\n          l = i;\n          if (e[i] === 0) {\n            H.set(i, n, w !== 0 ? -r / w : -r / (eps * norm));\n          } else {\n            x = H.get(i, i + 1);\n            y = H.get(i + 1, i);\n            q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n            t = (x * s - z * r) / q;\n            H.set(i, n, t);\n            H.set(\n              i + 1,\n              n,\n              Math.abs(x) > Math.abs(z) ? (-r - w * t) / x : (-s - y * t) / z,\n            );\n          }\n\n          t = Math.abs(H.get(i, n));\n          if (eps * t * t > 1) {\n            for (j = i; j <= n; j++) {\n              H.set(j, n, H.get(j, n) / t);\n            }\n          }\n        }\n      }\n    } else if (q < 0) {\n      l = n - 1;\n\n      if (Math.abs(H.get(n, n - 1)) > Math.abs(H.get(n - 1, n))) {\n        H.set(n - 1, n - 1, q / H.get(n, n - 1));\n        H.set(n - 1, n, -(H.get(n, n) - p) / H.get(n, n - 1));\n      } else {\n        cdivres = cdiv(0, -H.get(n - 1, n), H.get(n - 1, n - 1) - p, q);\n        H.set(n - 1, n - 1, cdivres[0]);\n        H.set(n - 1, n, cdivres[1]);\n      }\n\n      H.set(n, n - 1, 0);\n      H.set(n, n, 1);\n      for (i = n - 2; i >= 0; i--) {\n        ra = 0;\n        sa = 0;\n        for (j = l; j <= n; j++) {\n          ra = ra + H.get(i, j) * H.get(j, n - 1);\n          sa = sa + H.get(i, j) * H.get(j, n);\n        }\n\n        w = H.get(i, i) - p;\n\n        if (e[i] < 0) {\n          z = w;\n          r = ra;\n          s = sa;\n        } else {\n          l = i;\n          if (e[i] === 0) {\n            cdivres = cdiv(-ra, -sa, w, q);\n            H.set(i, n - 1, cdivres[0]);\n            H.set(i, n, cdivres[1]);\n          } else {\n            x = H.get(i, i + 1);\n            y = H.get(i + 1, i);\n            vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n            vi = (d[i] - p) * 2 * q;\n            if (vr === 0 && vi === 0) {\n              vr =\n                eps *\n                norm *\n                (Math.abs(w) +\n                  Math.abs(q) +\n                  Math.abs(x) +\n                  Math.abs(y) +\n                  Math.abs(z));\n            }\n            cdivres = cdiv(\n              x * r - z * ra + q * sa,\n              x * s - z * sa - q * ra,\n              vr,\n              vi,\n            );\n            H.set(i, n - 1, cdivres[0]);\n            H.set(i, n, cdivres[1]);\n            if (Math.abs(x) > Math.abs(z) + Math.abs(q)) {\n              H.set(\n                i + 1,\n                n - 1,\n                (-ra - w * H.get(i, n - 1) + q * H.get(i, n)) / x,\n              );\n              H.set(\n                i + 1,\n                n,\n                (-sa - w * H.get(i, n) - q * H.get(i, n - 1)) / x,\n              );\n            } else {\n              cdivres = cdiv(\n                -r - y * H.get(i, n - 1),\n                -s - y * H.get(i, n),\n                z,\n                q,\n              );\n              H.set(i + 1, n - 1, cdivres[0]);\n              H.set(i + 1, n, cdivres[1]);\n            }\n          }\n\n          t = Math.max(Math.abs(H.get(i, n - 1)), Math.abs(H.get(i, n)));\n          if (eps * t * t > 1) {\n            for (j = i; j <= n; j++) {\n              H.set(j, n - 1, H.get(j, n - 1) / t);\n              H.set(j, n, H.get(j, n) / t);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  for (i = 0; i < nn; i++) {\n    if (i < low || i > high) {\n      for (j = i; j < nn; j++) {\n        V.set(i, j, H.get(i, j));\n      }\n    }\n  }\n\n  for (j = nn - 1; j >= low; j--) {\n    for (i = low; i <= high; i++) {\n      z = 0;\n      for (k = low; k <= Math.min(j, high); k++) {\n        z = z + V.get(i, k) * H.get(k, j);\n      }\n      V.set(i, j, z);\n    }\n  }\n}\n\nfunction cdiv(xr, xi, yr, yi) {\n  let r, d;\n  if (Math.abs(yr) > Math.abs(yi)) {\n    r = yi / yr;\n    d = yr + r * yi;\n    return [(xr + r * xi) / d, (xi - r * xr) / d];\n  } else {\n    r = yr / yi;\n    d = yi + r * yr;\n    return [(r * xr + xi) / d, (r * xi - xr) / d];\n  }\n}\n\nclass CholeskyDecomposition {\n  constructor(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n    if (!value.isSymmetric()) {\n      throw new Error('Matrix is not symmetric');\n    }\n\n    let a = value;\n    let dimension = a.rows;\n    let l = new Matrix(dimension, dimension);\n    let positiveDefinite = true;\n    let i, j, k;\n\n    for (j = 0; j < dimension; j++) {\n      let d = 0;\n      for (k = 0; k < j; k++) {\n        let s = 0;\n        for (i = 0; i < k; i++) {\n          s += l.get(k, i) * l.get(j, i);\n        }\n        s = (a.get(j, k) - s) / l.get(k, k);\n        l.set(j, k, s);\n        d = d + s * s;\n      }\n\n      d = a.get(j, j) - d;\n\n      positiveDefinite &= d > 0;\n      l.set(j, j, Math.sqrt(Math.max(d, 0)));\n      for (k = j + 1; k < dimension; k++) {\n        l.set(j, k, 0);\n      }\n    }\n\n    this.L = l;\n    this.positiveDefinite = Boolean(positiveDefinite);\n  }\n\n  isPositiveDefinite() {\n    return this.positiveDefinite;\n  }\n\n  solve(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    let l = this.L;\n    let dimension = l.rows;\n\n    if (value.rows !== dimension) {\n      throw new Error('Matrix dimensions do not match');\n    }\n    if (this.isPositiveDefinite() === false) {\n      throw new Error('Matrix is not positive definite');\n    }\n\n    let count = value.columns;\n    let B = value.clone();\n    let i, j, k;\n\n    for (k = 0; k < dimension; k++) {\n      for (j = 0; j < count; j++) {\n        for (i = 0; i < k; i++) {\n          B.set(k, j, B.get(k, j) - B.get(i, j) * l.get(k, i));\n        }\n        B.set(k, j, B.get(k, j) / l.get(k, k));\n      }\n    }\n\n    for (k = dimension - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        for (i = k + 1; i < dimension; i++) {\n          B.set(k, j, B.get(k, j) - B.get(i, j) * l.get(i, k));\n        }\n        B.set(k, j, B.get(k, j) / l.get(k, k));\n      }\n    }\n\n    return B;\n  }\n\n  get lowerTriangularMatrix() {\n    return this.L;\n  }\n}\n\nclass nipals {\n  constructor(X, options = {}) {\n    X = WrapperMatrix2D.checkMatrix(X);\n    let { Y } = options;\n    const {\n      scaleScores = false,\n      maxIterations = 1000,\n      terminationCriteria = 1e-10,\n    } = options;\n\n    let u;\n    if (Y) {\n      if (isAnyArray.isAnyArray(Y) && typeof Y[0] === 'number') {\n        Y = Matrix.columnVector(Y);\n      } else {\n        Y = WrapperMatrix2D.checkMatrix(Y);\n      }\n      if (Y.rows !== X.rows) {\n        throw new Error('Y should have the same number of rows as X');\n      }\n      u = Y.getColumnVector(0);\n    } else {\n      u = X.getColumnVector(0);\n    }\n\n    let diff = 1;\n    let t, q, w, tOld;\n\n    for (\n      let counter = 0;\n      counter < maxIterations && diff > terminationCriteria;\n      counter++\n    ) {\n      w = X.transpose().mmul(u).div(u.transpose().mmul(u).get(0, 0));\n      w = w.div(w.norm());\n\n      t = X.mmul(w).div(w.transpose().mmul(w).get(0, 0));\n\n      if (counter > 0) {\n        diff = t.clone().sub(tOld).pow(2).sum();\n      }\n      tOld = t.clone();\n\n      if (Y) {\n        q = Y.transpose().mmul(t).div(t.transpose().mmul(t).get(0, 0));\n        q = q.div(q.norm());\n\n        u = Y.mmul(q).div(q.transpose().mmul(q).get(0, 0));\n      } else {\n        u = t;\n      }\n    }\n\n    if (Y) {\n      let p = X.transpose().mmul(t).div(t.transpose().mmul(t).get(0, 0));\n      p = p.div(p.norm());\n      let xResidual = X.clone().sub(t.clone().mmul(p.transpose()));\n      let residual = u.transpose().mmul(t).div(t.transpose().mmul(t).get(0, 0));\n      let yResidual = Y.clone().sub(\n        t.clone().mulS(residual.get(0, 0)).mmul(q.transpose()),\n      );\n\n      this.t = t;\n      this.p = p.transpose();\n      this.w = w.transpose();\n      this.q = q;\n      this.u = u;\n      this.s = t.transpose().mmul(t);\n      this.xResidual = xResidual;\n      this.yResidual = yResidual;\n      this.betas = residual;\n    } else {\n      this.w = w.transpose();\n      this.s = t.transpose().mmul(t).sqrt();\n      if (scaleScores) {\n        this.t = t.clone().div(this.s.get(0, 0));\n      } else {\n        this.t = t;\n      }\n      this.xResidual = X.sub(t.mmul(w.transpose()));\n    }\n  }\n}\n\nexports.AbstractMatrix = AbstractMatrix;\nexports.CHO = CholeskyDecomposition;\nexports.CholeskyDecomposition = CholeskyDecomposition;\nexports.DistanceMatrix = DistanceMatrix;\nexports.EVD = EigenvalueDecomposition;\nexports.EigenvalueDecomposition = EigenvalueDecomposition;\nexports.LU = LuDecomposition;\nexports.LuDecomposition = LuDecomposition;\nexports.Matrix = Matrix;\nexports.MatrixColumnSelectionView = MatrixColumnSelectionView;\nexports.MatrixColumnView = MatrixColumnView;\nexports.MatrixFlipColumnView = MatrixFlipColumnView;\nexports.MatrixFlipRowView = MatrixFlipRowView;\nexports.MatrixRowSelectionView = MatrixRowSelectionView;\nexports.MatrixRowView = MatrixRowView;\nexports.MatrixSelectionView = MatrixSelectionView;\nexports.MatrixSubView = MatrixSubView;\nexports.MatrixTransposeView = MatrixTransposeView;\nexports.NIPALS = nipals;\nexports.Nipals = nipals;\nexports.QR = QrDecomposition;\nexports.QrDecomposition = QrDecomposition;\nexports.SVD = SingularValueDecomposition;\nexports.SingularValueDecomposition = SingularValueDecomposition;\nexports.SymmetricMatrix = SymmetricMatrix;\nexports.WrapperMatrix1D = WrapperMatrix1D;\nexports.WrapperMatrix2D = WrapperMatrix2D;\nexports.correlation = correlation;\nexports.covariance = covariance;\nexports.default = Matrix;\nexports.determinant = determinant;\nexports.inverse = inverse;\nexports.linearDependencies = linearDependencies;\nexports.pseudoInverse = pseudoInverse;\nexports.solve = solve;\nexports.wrap = wrap;\n","import * as matrix from './matrix.js';\n\nexport const AbstractMatrix = matrix.AbstractMatrix;\nexport const CHO = matrix.CHO;\nexport const CholeskyDecomposition = matrix.CholeskyDecomposition;\nexport const DistanceMatrix = matrix.DistanceMatrix;\nexport const EVD = matrix.EVD;\nexport const EigenvalueDecomposition = matrix.EigenvalueDecomposition;\nexport const LU = matrix.LU;\nexport const LuDecomposition = matrix.LuDecomposition;\nexport const Matrix = matrix.Matrix;\nexport const MatrixColumnSelectionView = matrix.MatrixColumnSelectionView;\nexport const MatrixColumnView = matrix.MatrixColumnView;\nexport const MatrixFlipColumnView = matrix.MatrixFlipColumnView;\nexport const MatrixFlipRowView = matrix.MatrixFlipRowView;\nexport const MatrixRowSelectionView = matrix.MatrixRowSelectionView;\nexport const MatrixRowView = matrix.MatrixRowView;\nexport const MatrixSelectionView = matrix.MatrixSelectionView;\nexport const MatrixSubView = matrix.MatrixSubView;\nexport const MatrixTransposeView = matrix.MatrixTransposeView;\nexport const NIPALS = matrix.NIPALS;\nexport const Nipals = matrix.Nipals;\nexport const QR = matrix.QR;\nexport const QrDecomposition = matrix.QrDecomposition;\nexport const SVD = matrix.SVD;\nexport const SingularValueDecomposition = matrix.SingularValueDecomposition;\nexport const SymmetricMatrix = matrix.SymmetricMatrix;\nexport const WrapperMatrix1D = matrix.WrapperMatrix1D;\nexport const WrapperMatrix2D = matrix.WrapperMatrix2D;\nexport const correlation = matrix.correlation;\nexport const covariance = matrix.covariance;\nexport default matrix.default.Matrix ? matrix.default.Matrix : matrix.Matrix;\nexport const determinant = matrix.determinant;\nexport const inverse = matrix.inverse;\nexport const linearDependencies = matrix.linearDependencies;\nexport const pseudoInverse = matrix.pseudoInverse;\nexport const solve = matrix.solve;\nexport const wrap = matrix.wrap;\n","import type { Point } from '@allmaps/types'\n\nimport type { EvaluationType, TransformationType } from './shared/types'\n\n/**\n * Transformation class. Abstract class, extended by the various transformations.\n * */\nexport default abstract class Transformation {\n  sourcePoints: Point[]\n  destinationPoints: Point[]\n\n  pointCount: number\n  pointCountMinimum: number\n\n  type: string\n\n  /**\n   * Create a transformation\n   * @param {Point[]} sourcePoints - The source points\n   * @param {Point[]} destinationPoints - The destination points\n   * @param {TransformationType} type - The transformation type\n   * @param {number} pointCountMinimum - The minimum number of points for the transformation type\n   */\n  constructor(\n    sourcePoints: Point[],\n    destinationPoints: Point[],\n    type: TransformationType,\n    pointCountMinimum: number\n  ) {\n    this.sourcePoints = sourcePoints\n    this.destinationPoints = destinationPoints\n\n    this.pointCount = this.sourcePoints.length\n\n    this.type = type\n    this.pointCountMinimum = pointCountMinimum\n\n    if (this.pointCount < this.pointCountMinimum) {\n      throw new Error(\n        'Not enough control points. A ' +\n          this.type +\n          ' transformation requires a minimum of ' +\n          this.pointCountMinimum +\n          ' points, but ' +\n          this.pointCount +\n          ' are given.'\n      )\n    }\n  }\n\n  evaluate(\n    newSourcePoint: Point,\n    evaluationType: EvaluationType = 'function'\n  ): Point {\n    if (evaluationType == 'function') {\n      return this.evaluateFunction(newSourcePoint)\n    } else if (evaluationType == 'partialDerivativeX') {\n      return this.evaluatePartialDerivativeX(newSourcePoint)\n    } else if (evaluationType == 'partialDerivativeY') {\n      return this.evaluatePartialDerivativeY(newSourcePoint)\n    } else {\n      throw new Error('Evaluation of type ' + evaluationType + ' not supported')\n    }\n  }\n\n  abstract evaluateFunction(_newSourcePoint: Point): Point\n\n  abstract evaluatePartialDerivativeX(_newSourcePoint: Point): Point\n\n  abstract evaluatePartialDerivativeY(_newSourcePoint: Point): Point\n}\n","import { Matrix, pseudoInverse } from 'ml-matrix'\n\nimport Transformation from '../transformation.js'\n\nimport type { Point } from '@allmaps/types'\n\nexport default class Helmert extends Transformation {\n  helmertParametersMatrix: Matrix\n  helmertParameters: number[]\n\n  scale?: number\n  rotation?: number\n  translation?: Point\n\n  constructor(sourcePoints: Point[], destinationPoints: Point[]) {\n    super(sourcePoints, destinationPoints, 'helmert', 2)\n\n    // 2D Helmert transformation (= similarity transformation)\n    // This solution uses the 'Pseudo Inverse' for estimating a least-square solution, see https://en.wikipedia.org/wiki/Moore%E2%80%93Penrose_inverse\n\n    // The system of equations is solved for x and y jointly (because they are inter-related)\n    // Hence destinationPointsMatrix, helmertCoefsMatrix and helmertParametersMatrix are one Matrix\n\n    const destinationPointsMatrix: Matrix = Matrix.columnVector(\n      destinationPoints.flat()\n    )\n\n    // Construct 2Nx4 Matrix helmertCoefsMatrix\n    // 1 0 x0 -y0\n    // 0 1 y0 x0\n    // 1 0 x1 -y1\n    // 0 1 y1 x1\n    // ...\n    const helmertCoefsMatrix = Matrix.zeros(2 * this.pointCount, 4)\n    for (let i = 0; i < this.pointCount; i++) {\n      helmertCoefsMatrix.set(2 * i, 0, 1)\n      helmertCoefsMatrix.set(2 * i, 1, 0)\n      helmertCoefsMatrix.set(2 * i, 2, this.sourcePoints[i][0])\n      helmertCoefsMatrix.set(2 * i, 3, -this.sourcePoints[i][1])\n      helmertCoefsMatrix.set(2 * i + 1, 0, 0)\n      helmertCoefsMatrix.set(2 * i + 1, 1, 1)\n      helmertCoefsMatrix.set(2 * i + 1, 2, this.sourcePoints[i][1])\n      helmertCoefsMatrix.set(2 * i + 1, 3, this.sourcePoints[i][0])\n    }\n\n    // Compute helmert parameters by solving the linear system of equations for each component\n    // Will result in a Matrix([[t_x], [t_y], [m], [n]])\n    const pseudoInverseHelmertCoefsMatrix = pseudoInverse(helmertCoefsMatrix)\n    this.helmertParametersMatrix = pseudoInverseHelmertCoefsMatrix.mmul(\n      destinationPointsMatrix\n    )\n    this.helmertParameters = this.helmertParametersMatrix.to1DArray()\n\n    // Set the derived parameters\n    this.scale = Math.sqrt(\n      this.helmertParameters[2] ** 2 + this.helmertParameters[3] ** 2\n    )\n    this.rotation = Math.atan2(\n      this.helmertParameters[3],\n      this.helmertParameters[2]\n    )\n    this.translation = [this.helmertParameters[0], this.helmertParameters[1]]\n  }\n\n  // Evaluate the transformation function at a new point\n  evaluateFunction(newSourcePoint: Point): Point {\n    if (!this.helmertParameters) {\n      throw new Error('Helmert parameters not computed')\n    }\n\n    // Apply the helmert coefficients to the input point\n    const newDestinationPoint: Point = [\n      this.helmertParameters[0] +\n        this.helmertParameters[2] * newSourcePoint[0] -\n        this.helmertParameters[3] * newSourcePoint[1],\n      this.helmertParameters[1] +\n        this.helmertParameters[2] * newSourcePoint[1] +\n        this.helmertParameters[3] * newSourcePoint[0]\n    ]\n    // Alternatively, using derived helmert parameters\n    // this.translation[0] +\n    //   this.scale * Math.cos(rotation) * newSourcePoint[0] -\n    //   this.scale * Math.sin(rotation) * newSourcePoint[1],\n    // this.translation[1] +\n    //   this.scale * Math.cos(rotation) * newSourcePoint[1] +\n    //   this.scale * Math.sin(rotation) * newSourcePoint[0]\n\n    return newDestinationPoint\n  }\n\n  // Evaluate the transformation function's partial derivative to x at a new point\n  evaluatePartialDerivativeX(_newSourcePoint: Point): Point {\n    if (!this.helmertParameters) {\n      throw new Error('Helmert parameters not computed')\n    }\n\n    // Apply the helmert coefficients to the input point\n    const newDestinationPointPartDerX: Point = [\n      this.helmertParameters[2],\n      this.helmertParameters[3]\n    ]\n\n    return newDestinationPointPartDerX\n  }\n\n  // Evaluate the transformation function's partial derivative to y at a new point\n  evaluatePartialDerivativeY(_newSourcePoint: Point): Point {\n    if (!this.helmertParameters) {\n      throw new Error('Helmert parameters not computed')\n    }\n\n    // Apply the helmert coefficients to the input point\n    const newDestinationPointPartDerY: Point = [\n      -this.helmertParameters[3],\n      this.helmertParameters[2]\n    ]\n\n    return newDestinationPointPartDerY\n  }\n}\n","import Helmert from './helmert.js'\n\nimport Transformation from '../transformation.js'\n\nimport type { Point } from '@allmaps/types'\n\nexport default class Straight extends Transformation {\n  scale?: number\n  sourcePointsCenter: Point\n  destinationPointsCenter: Point\n  translation?: Point\n\n  constructor(sourcePoints: Point[], destinationPoints: Point[]) {\n    super(sourcePoints, destinationPoints, 'straight', 2)\n\n    // Compute the corrensponing Helmert transform and get the scale from it\n    const helmertTransformation = new Helmert(\n      this.sourcePoints,\n      this.destinationPoints\n    )\n    this.scale = helmertTransformation.scale\n\n    if (!this.scale) {\n      throw new Error('Scale could not be computed')\n    }\n\n    // Compute the centers of the source points and destination points\n    this.sourcePointsCenter = this.sourcePoints\n      .reduce((center, point) => [center[0] + point[0], center[1] + point[1]])\n      .map((coordinate) => coordinate / this.pointCount) as Point\n    this.destinationPointsCenter = this.destinationPoints\n      .reduce((center, point) => [center[0] + point[0], center[1] + point[1]])\n      .map((coordinate) => coordinate / this.pointCount) as Point\n\n    // Compute the translation vector from the (scaled) center of the source points to the center of the destination points\n    const scale = this.scale\n    this.translation = this.destinationPointsCenter.map(\n      (coord, i) => coord - this.sourcePointsCenter[i] * scale\n    ) as Point\n  }\n\n  // Evaluate the transformation function at a new point\n  evaluateFunction(newSourcePoint: Point): Point {\n    if (!this.scale || !this.translation) {\n      throw new Error('Straight parameters not computed')\n    }\n\n    const newDestinationPoint: Point = [\n      this.translation[0] + this.scale * newSourcePoint[0],\n      this.translation[1] + this.scale * newSourcePoint[1]\n    ]\n\n    return newDestinationPoint\n  }\n\n  // Evaluate the transformation function's partial derivative to x at a new point\n  evaluatePartialDerivativeX(_newSourcePoint: Point): Point {\n    if (!this.scale || !this.translation) {\n      throw new Error('Straight parameters not computed')\n    }\n\n    const newDestinationPointPartDerX: Point = [this.scale, 0]\n\n    return newDestinationPointPartDerX\n  }\n\n  // Evaluate the transformation function's partial derivative to y at a new point\n  evaluatePartialDerivativeY(_newSourcePoint: Point): Point {\n    if (!this.scale || !this.translation) {\n      throw new Error('Straight parameters not computed')\n    }\n\n    const newDestinationPointPartDerY: Point = [0, this.scale]\n\n    return newDestinationPointPartDerY\n  }\n}\n","import { Matrix, pseudoInverse } from 'ml-matrix'\n\nimport Transformation from '../transformation.js'\n\nimport type { Point } from '@allmaps/types'\nimport type { TransformationType } from './types.js'\n\nexport default class Polynomial extends Transformation {\n  polynomialParametersMatrices: [Matrix, Matrix]\n  polynomialParameters: [number[], number[]]\n\n  order: number\n  pointCountMinimum: number\n\n  constructor(\n    sourcePoints: Point[],\n    destinationPoints: Point[],\n    order?: number\n  ) {\n    order = order || 1\n    const pointsCountMinimum = ((order + 1) * (order + 2)) / 2\n    // If there are less control points then there are coefficients to be determined (for each dimension), the system can not be solved\n\n    super(\n      sourcePoints,\n      destinationPoints,\n      ('polynomial' + order) as TransformationType,\n      pointsCountMinimum\n    )\n\n    this.order = order\n    this.pointCountMinimum = pointsCountMinimum\n\n    if (this.order < 1 || this.order > 3) {\n      throw new Error(\n        'Only polynomial transformations of order 1, 2 or 3 are supported'\n      )\n    }\n\n    // 2D polynomial transformation of order 1, 2 or 3\n    // This solution uses the 'Pseudo Inverse' for estimating a least-square solution, see https://en.wikipedia.org/wiki/Moore%E2%80%93Penrose_inverse\n\n    // The system of equations is solved for x and y separately (because they are independent)\n    // Hence destinationPointsMatrices and polynomialParametersMatrices are one Matrix\n    // Since they both use the same coefficients, there is only one polynomialCoefsMatrix\n\n    const destinationPointsMatrices: [Matrix, Matrix] = [\n      Matrix.columnVector(this.destinationPoints.map((value) => value[0])),\n      Matrix.columnVector(this.destinationPoints.map((value) => value[1]))\n    ]\n\n    // Construct Nx3 Matrix polynomialCoefsMatrix\n    // for order = 1\n    // 1 x0 y0\n    // 1 x1 y1\n    // 1 x2 y2\n    // ...\n    // for order = 2\n    // 1 x0 y0 x0^2 y0^2 x0*y0\n    // ...\n    // for order = 3\n    // 1 x0 y0 x0^2 y0^2 x0*y0 x0^3 y0^3 x0^2*y0 x0*y0^2\n    // ...\n    const polynomialCoefsMatrix = Matrix.zeros(\n      this.pointCount,\n      this.pointCountMinimum\n    )\n    for (let i = 0; i < this.pointCount; i++) {\n      switch (this.order) {\n        case 1:\n          polynomialCoefsMatrix.set(i, 0, 1)\n          polynomialCoefsMatrix.set(i, 1, this.sourcePoints[i][0])\n          polynomialCoefsMatrix.set(i, 2, this.sourcePoints[i][1])\n          break\n\n        case 2:\n          polynomialCoefsMatrix.set(i, 0, 1)\n          polynomialCoefsMatrix.set(i, 1, this.sourcePoints[i][0])\n          polynomialCoefsMatrix.set(i, 2, this.sourcePoints[i][1])\n          polynomialCoefsMatrix.set(i, 3, this.sourcePoints[i][0] ** 2)\n          polynomialCoefsMatrix.set(i, 4, this.sourcePoints[i][1] ** 2)\n          polynomialCoefsMatrix.set(\n            i,\n            5,\n            this.sourcePoints[i][0] * this.sourcePoints[i][1]\n          )\n          break\n\n        case 3:\n          polynomialCoefsMatrix.set(i, 0, 1)\n          polynomialCoefsMatrix.set(i, 1, this.sourcePoints[i][0])\n          polynomialCoefsMatrix.set(i, 2, this.sourcePoints[i][1])\n          polynomialCoefsMatrix.set(i, 3, this.sourcePoints[i][0] ** 2)\n          polynomialCoefsMatrix.set(i, 4, this.sourcePoints[i][1] ** 2)\n          polynomialCoefsMatrix.set(\n            i,\n            5,\n            this.sourcePoints[i][0] * this.sourcePoints[i][1]\n          )\n          polynomialCoefsMatrix.set(i, 6, this.sourcePoints[i][0] ** 3)\n          polynomialCoefsMatrix.set(i, 7, this.sourcePoints[i][1] ** 3)\n          polynomialCoefsMatrix.set(\n            i,\n            8,\n            this.sourcePoints[i][0] ** 2 * this.sourcePoints[i][1]\n          )\n          polynomialCoefsMatrix.set(\n            i,\n            9,\n            this.sourcePoints[i][0] * this.sourcePoints[i][1] ** 2\n          )\n          break\n\n        default:\n          break\n      }\n    }\n\n    // Compute polynomial parameters by solving the linear system of equations for each component\n    // Note: this solution uses the 'pseudo inverse' see https://en.wikipedia.org/wiki/Moore%E2%80%93Penrose_inverse\n    // This wil result in:\n    // For order = 1: polynomialParametersMatrices = [Matrix([[a0_x], [ax_x], [ay_x]]), Matrix([[a0_y], [ax_y], [ay_y]])]\n    // For order = 2: ... (simirlar, following the same order as in polynomialCoefsMatrix)\n    // For order = 3: ... (simirlar, following the same order as in polynomialCoefsMatrix)\n    const pseudoInversePolynomialCoefsMatrix = pseudoInverse(\n      polynomialCoefsMatrix\n    )\n    this.polynomialParametersMatrices = [\n      pseudoInversePolynomialCoefsMatrix.mmul(destinationPointsMatrices[0]),\n      pseudoInversePolynomialCoefsMatrix.mmul(destinationPointsMatrices[1])\n    ]\n    this.polynomialParameters = this.polynomialParametersMatrices.map(\n      (matrix) => matrix.to1DArray()\n    ) as [number[], number[]]\n  }\n\n  // Evaluate the transformation function at a new point\n  evaluateFunction(newSourcePoint: Point): Point {\n    if (!this.polynomialParameters) {\n      throw new Error('Polynomial parameters not computed')\n    }\n\n    // Apply the helmert coefficients to the input point\n    const newDestinationPoint: Point = [0, 0]\n    for (let i = 0; i < 2; i++) {\n      switch (this.order) {\n        case 1:\n          newDestinationPoint[i] +=\n            this.polynomialParameters[i][0] +\n            this.polynomialParameters[i][1] * newSourcePoint[0] +\n            this.polynomialParameters[i][2] * newSourcePoint[1]\n          break\n\n        case 2:\n          newDestinationPoint[i] +=\n            this.polynomialParameters[i][0] +\n            this.polynomialParameters[i][1] * newSourcePoint[0] +\n            this.polynomialParameters[i][2] * newSourcePoint[1] +\n            this.polynomialParameters[i][3] * newSourcePoint[0] ** 2 +\n            this.polynomialParameters[i][4] * newSourcePoint[1] ** 2 +\n            this.polynomialParameters[i][5] *\n              newSourcePoint[0] *\n              newSourcePoint[1]\n          break\n\n        case 3:\n          newDestinationPoint[i] +=\n            this.polynomialParameters[i][0] +\n            this.polynomialParameters[i][1] * newSourcePoint[0] +\n            this.polynomialParameters[i][2] * newSourcePoint[1] +\n            this.polynomialParameters[i][3] * newSourcePoint[0] ** 2 +\n            this.polynomialParameters[i][4] * newSourcePoint[1] ** 2 +\n            this.polynomialParameters[i][5] *\n              newSourcePoint[0] *\n              newSourcePoint[1] +\n            this.polynomialParameters[i][6] * newSourcePoint[0] ** 3 +\n            this.polynomialParameters[i][7] * newSourcePoint[1] ** 3 +\n            this.polynomialParameters[i][8] *\n              newSourcePoint[0] ** 2 *\n              newSourcePoint[1] +\n            this.polynomialParameters[i][9] *\n              newSourcePoint[0] *\n              newSourcePoint[1] ** 2\n          break\n\n        default:\n          break\n      }\n    }\n\n    return newDestinationPoint\n  }\n\n  // Evaluate the transformation function's partial derivative to x at a new point\n  evaluatePartialDerivativeX(newSourcePoint: Point): Point {\n    if (!this.polynomialParameters) {\n      throw new Error('Polynomial parameters not computed')\n    }\n\n    // Apply the helmert coefficients to the input point\n    const newDestinationPointPartDerX: Point = [0, 0]\n    for (let i = 0; i < 2; i++) {\n      switch (this.order) {\n        case 1:\n          newDestinationPointPartDerX[i] += this.polynomialParameters[i][1]\n          break\n\n        case 2:\n          newDestinationPointPartDerX[i] +=\n            this.polynomialParameters[i][1] +\n            2 * this.polynomialParameters[i][3] * newSourcePoint[0] +\n            this.polynomialParameters[i][5] * newSourcePoint[1]\n          break\n\n        case 3:\n          newDestinationPointPartDerX[i] +=\n            this.polynomialParameters[i][1] +\n            2 * this.polynomialParameters[i][3] * newSourcePoint[0] +\n            this.polynomialParameters[i][5] * newSourcePoint[1] +\n            3 * this.polynomialParameters[i][6] * newSourcePoint[0] ** 2 +\n            2 *\n              this.polynomialParameters[i][8] *\n              newSourcePoint[0] *\n              newSourcePoint[1] +\n            this.polynomialParameters[i][9] * newSourcePoint[1] ** 2\n          break\n\n        default:\n          break\n      }\n    }\n\n    return newDestinationPointPartDerX\n  }\n\n  // Evaluate the transformation function's partial derivative to x at a new point\n  evaluatePartialDerivativeY(newSourcePoint: Point): Point {\n    if (!this.polynomialParameters) {\n      throw new Error('Polynomial parameters not computed')\n    }\n\n    // Apply the helmert coefficients to the input point\n    const newDestinationPointPartDerY: Point = [0, 0]\n    for (let i = 0; i < 2; i++) {\n      switch (this.order) {\n        case 1:\n          newDestinationPointPartDerY[i] += this.polynomialParameters[i][2]\n          break\n\n        case 2:\n          newDestinationPointPartDerY[i] +=\n            this.polynomialParameters[i][2] +\n            2 * this.polynomialParameters[i][4] * newSourcePoint[1] +\n            this.polynomialParameters[i][5] * newSourcePoint[0]\n          break\n\n        case 3:\n          newDestinationPointPartDerY[i] +=\n            this.polynomialParameters[i][2] +\n            2 * this.polynomialParameters[i][4] * newSourcePoint[1] +\n            this.polynomialParameters[i][5] * newSourcePoint[0] +\n            3 * this.polynomialParameters[i][7] * newSourcePoint[1] ** 2 +\n            this.polynomialParameters[i][8] * newSourcePoint[0] ** 2 +\n            2 *\n              this.polynomialParameters[i][9] *\n              newSourcePoint[0] *\n              newSourcePoint[1]\n          break\n\n        default:\n          break\n      }\n    }\n\n    return newDestinationPointPartDerY\n  }\n}\n","import { Matrix, SingularValueDecomposition } from 'ml-matrix'\n\nimport Transformation from '../transformation.js'\n\nimport type { Point } from '@allmaps/types'\n\nexport default class Projective extends Transformation {\n  projectiveParametersMatrix: Matrix\n  projectiveParameters: number[][]\n\n  constructor(sourcePoints: Point[], destinationPoints: Point[]) {\n    super(sourcePoints, destinationPoints, 'projective', 4)\n\n    // 2D projective (= perspective) transformation\n    // See https://citeseerx.ist.psu.edu/doc/10.1.1.186.4411 for more information\n\n    // The system of equations is solved for x and y jointly (because they are inter-related)\n    // Hence projectiveCoefsMatrix and projectiveParametersMatrix are one Matrix\n\n    // Construct 2Nx9 Matrix projectiveCoefsMatrix\n    // −x0 −y0 −1  0   0   0  x'0x0 x'0y0 x'0\n    // 0   0   0   −x0 −y0 −1 y'0x0 y'0y0 y'0\n    // ...\n    const projectiveCoefsMatrix = Matrix.zeros(2 * this.pointCount, 9)\n    for (let i = 0; i < this.pointCount; i++) {\n      projectiveCoefsMatrix.set(2 * i, 0, -sourcePoints[i][0])\n      projectiveCoefsMatrix.set(2 * i, 1, -sourcePoints[i][1])\n      projectiveCoefsMatrix.set(2 * i, 2, -1)\n      projectiveCoefsMatrix.set(2 * i, 3, 0)\n      projectiveCoefsMatrix.set(2 * i, 4, 0)\n      projectiveCoefsMatrix.set(2 * i, 5, 0)\n      projectiveCoefsMatrix.set(\n        2 * i,\n        6,\n        destinationPoints[i][0] * sourcePoints[i][0]\n      )\n      projectiveCoefsMatrix.set(\n        2 * i,\n        7,\n        destinationPoints[i][0] * sourcePoints[i][1]\n      )\n      projectiveCoefsMatrix.set(2 * i, 8, destinationPoints[i][0])\n      projectiveCoefsMatrix.set(2 * i + 1, 0, 0)\n      projectiveCoefsMatrix.set(2 * i + 1, 1, 0)\n      projectiveCoefsMatrix.set(2 * i + 1, 2, 0)\n      projectiveCoefsMatrix.set(2 * i + 1, 3, -sourcePoints[i][0])\n      projectiveCoefsMatrix.set(2 * i + 1, 4, -sourcePoints[i][1])\n      projectiveCoefsMatrix.set(2 * i + 1, 5, -1)\n      projectiveCoefsMatrix.set(\n        2 * i + 1,\n        6,\n        destinationPoints[i][1] * sourcePoints[i][0]\n      )\n      projectiveCoefsMatrix.set(\n        2 * i + 1,\n        7,\n        destinationPoints[i][1] * sourcePoints[i][1]\n      )\n      projectiveCoefsMatrix.set(2 * i + 1, 8, destinationPoints[i][1])\n    }\n\n    // Compute the last (i.e. 9th) 'right singular vector', i.e. the one with the smallest singular value. (For a set of gcps that exactly follow a projective transformations, the singular value is null and this vector spans the null-space)\n    const svd = new SingularValueDecomposition(projectiveCoefsMatrix)\n    this.projectiveParametersMatrix = Matrix.from1DArray(\n      3,\n      3,\n      svd.rightSingularVectors.getColumn(8)\n    ).transpose()\n    this.projectiveParameters = this.projectiveParametersMatrix.to2DArray()\n  }\n\n  // Evaluate the transformation function at a new point\n  evaluateFunction(newSourcePoint: Point): Point {\n    if (!this.projectiveParameters) {\n      throw new Error('projective parameters not computed')\n    }\n\n    // Apply the coefficients to the input point\n    const c =\n      this.projectiveParameters[0][2] * newSourcePoint[0] +\n      this.projectiveParameters[1][2] * newSourcePoint[1] +\n      this.projectiveParameters[2][2]\n    const num1 =\n      this.projectiveParameters[0][0] * newSourcePoint[0] +\n      this.projectiveParameters[1][0] * newSourcePoint[1] +\n      this.projectiveParameters[2][0]\n    const num2 =\n      this.projectiveParameters[0][1] * newSourcePoint[0] +\n      this.projectiveParameters[1][1] * newSourcePoint[1] +\n      this.projectiveParameters[2][1]\n    const newDestinationPoint: Point = [num1 / c, num2 / c]\n\n    return newDestinationPoint\n  }\n\n  // Evaluate the transformation function's partial derivative to x at a new point\n  evaluatePartialDerivativeX(newSourcePoint: Point): Point {\n    if (!this.projectiveParameters) {\n      throw new Error('projective parameters not computed')\n    }\n\n    // Apply the coefficients to the input point\n    const c =\n      this.projectiveParameters[0][2] * newSourcePoint[0] +\n      this.projectiveParameters[1][2] * newSourcePoint[1] +\n      this.projectiveParameters[2][2]\n    const num1 =\n      this.projectiveParameters[0][0] * newSourcePoint[0] +\n      this.projectiveParameters[1][0] * newSourcePoint[1] +\n      this.projectiveParameters[2][0]\n    const num2 =\n      this.projectiveParameters[0][1] * newSourcePoint[0] +\n      this.projectiveParameters[1][1] * newSourcePoint[1] +\n      this.projectiveParameters[2][1]\n    const newDestinationPointPartDerX: Point = [\n      (c * this.projectiveParameters[0][0] -\n        this.projectiveParameters[0][2] * num1) /\n        c ** 2,\n      (c * this.projectiveParameters[0][1] -\n        this.projectiveParameters[0][2] * num2) /\n        c ** 2\n    ]\n\n    return newDestinationPointPartDerX\n  }\n\n  // Evaluate the transformation function's partial derivative to y at a new point\n  evaluatePartialDerivativeY(newSourcePoint: Point): Point {\n    if (!this.projectiveParameters) {\n      throw new Error('projective parameters not computed')\n    }\n\n    // Apply the coefficients to the input point\n    const c =\n      this.projectiveParameters[0][2] * newSourcePoint[0] +\n      this.projectiveParameters[1][2] * newSourcePoint[1] +\n      this.projectiveParameters[2][2]\n    const num1 =\n      this.projectiveParameters[0][0] * newSourcePoint[0] +\n      this.projectiveParameters[1][0] * newSourcePoint[1] +\n      this.projectiveParameters[2][0]\n    const num2 =\n      this.projectiveParameters[0][1] * newSourcePoint[0] +\n      this.projectiveParameters[1][1] * newSourcePoint[1] +\n      this.projectiveParameters[2][1]\n    const newDestinationPointPartDerY: Point = [\n      (c * this.projectiveParameters[1][0] -\n        this.projectiveParameters[1][2] * num1) /\n        c ** 2,\n      (c * this.projectiveParameters[1][1] -\n        this.projectiveParameters[1][2] * num2) /\n        c ** 2\n    ]\n\n    return newDestinationPointPartDerY\n  }\n}\n","import { Matrix, inverse } from 'ml-matrix'\n\nimport Transformation from '../transformation.js'\n\nimport type { KernelFunction, NormFunction } from './types.js'\n\nimport type { Point } from '@allmaps/types'\n\nexport default class RBF extends Transformation {\n  kernelFunction: KernelFunction\n  normFunction: NormFunction\n\n  weightsMatrices: [Matrix, Matrix]\n  rbfWeights: [number[], number[]]\n  affineWeights: [number[], number[]]\n\n  epsilon?: number\n\n  constructor(\n    sourcePoints: Point[],\n    destinationPoints: Point[],\n    kernelFunction: KernelFunction,\n    normFunction: NormFunction,\n    epsilon?: number\n  ) {\n    super(sourcePoints, destinationPoints, 'thinPlateSpline', 3)\n\n    this.kernelFunction = kernelFunction\n    this.normFunction = normFunction\n\n    // 2D Radial Basis Function interpolation\n    // See notebook https://observablehq.com/d/0b57d3b587542794 for code source and explanation\n\n    // The system of equations is solved for x and y separately (because they are independant)\n    // Hence destinationPointsMatrices and weightsMatrices are an Array of two column vector matrices\n    // Since they both use the same coefficients, there is only one kernelsAndAffineCoefsMatrix\n\n    const destinationPointsMatrices: [Matrix, Matrix] = [\n      Matrix.columnVector(\n        [...this.destinationPoints, [0, 0], [0, 0], [0, 0]].map(\n          (value) => value[0]\n        )\n      ),\n      Matrix.columnVector(\n        [...this.destinationPoints, [0, 0], [0, 0], [0, 0]].map(\n          (value) => value[1]\n        )\n      )\n    ]\n\n    // Pre-compute kernelsMatrix: fill it with the point to point distances between all control points\n    const kernelsMatrix = Matrix.zeros(this.pointCount, this.pointCount)\n    for (let i = 0; i < this.pointCount; i++) {\n      for (let j = 0; j < this.pointCount; j++) {\n        kernelsMatrix.set(\n          i,\n          j,\n          normFunction(this.sourcePoints[i], this.sourcePoints[j])\n        )\n      }\n    }\n\n    // If it's not provided, and if it's an input to the kernelFunction,\n    // compute epsilon as the average distance between the control points\n    if (epsilon === undefined) {\n      epsilon =\n        kernelsMatrix.sum() / (Math.pow(this.pointCount, 2) - this.pointCount)\n    }\n\n    this.epsilon = epsilon\n\n    // Finish the computation of kernelsMatrix by applying the requested kernel function\n    for (let i = 0; i < this.pointCount; i++) {\n      for (let j = 0; j < this.pointCount; j++) {\n        kernelsMatrix.set(\n          i,\n          j,\n          kernelFunction(kernelsMatrix.get(i, j), { epsilon: epsilon })\n        )\n      }\n    }\n\n    // Extend kernelsMatrix to include the affine transformation\n    const affineCoefsMatrix = Matrix.zeros(this.pointCount, 3)\n    const kernelsAndAffineCoefsMatrix = Matrix.zeros(\n      this.pointCount + 3,\n      this.pointCount + 3\n    )\n    // Construct Nx3 Matrix affineCoefsMatrix\n    // 1 x0 y0\n    // 1 x1 y1\n    // 1 x2 y2\n    // ...\n    for (let i = 0; i < this.pointCount; i++) {\n      affineCoefsMatrix.set(i, 0, 1)\n      affineCoefsMatrix.set(i, 1, this.sourcePoints[i][0])\n      affineCoefsMatrix.set(i, 2, this.sourcePoints[i][1])\n    }\n    // Combine kernelsMatrix and affineCoefsMatrix into new matrix kernelsAndAffineCoefsMatrix\n    // Note: mlMatrix has no knowledge of block matrices, but this approach is good enough\n    // To speed this up, we could maybe use kernelsMatrix.addRow() and kernelsMatrix.addVector()\n    for (let i = 0; i < this.pointCount + 3; i++) {\n      for (let j = 0; j < this.pointCount + 3; j++) {\n        if (i < this.pointCount && j < this.pointCount) {\n          kernelsAndAffineCoefsMatrix.set(i, j, kernelsMatrix.get(i, j))\n        } else if (i >= this.pointCount && j < this.pointCount) {\n          kernelsAndAffineCoefsMatrix.set(\n            i,\n            j,\n            affineCoefsMatrix.transpose().get(i - this.pointCount, j)\n          )\n        } else if (i < this.pointCount && j >= this.pointCount) {\n          kernelsAndAffineCoefsMatrix.set(\n            i,\n            j,\n            affineCoefsMatrix.get(i, j - this.pointCount)\n          )\n        }\n      }\n    }\n\n    // Compute basis functions weights and the affine parameters by solving the linear system of equations for each component\n    // Note: the same kernelsAndAffineCoefsMatrix is used for both solutions\n    const inverseKernelsAndAffineCoefsMatrix = inverse(\n      kernelsAndAffineCoefsMatrix\n    )\n    this.weightsMatrices = [\n      inverseKernelsAndAffineCoefsMatrix.mmul(destinationPointsMatrices[0]),\n      inverseKernelsAndAffineCoefsMatrix.mmul(destinationPointsMatrices[1])\n    ]\n\n    // Store rbf and affine parts of the weights more as arrays for more efficient access on evaluation\n    this.rbfWeights = this.weightsMatrices.map((matrix) =>\n      matrix.selection([...Array(this.pointCount).keys()], [0]).to1DArray()\n    ) as [number[], number[]]\n    this.affineWeights = this.weightsMatrices.map((matrix) =>\n      matrix\n        .selection(\n          [0, 1, 2].map((n) => n + this.pointCount),\n          [0]\n        )\n        .to1DArray()\n    ) as [number[], number[]]\n  }\n\n  // Evaluate the transformation function at a new point\n  evaluateFunction(newSourcePoint: Point): Point {\n    if (!this.rbfWeights || !this.affineWeights) {\n      throw new Error('Weights not computed')\n    }\n\n    // Compute the distances of that point to all control points\n    const newDistances = this.sourcePoints.map((sourcePoint) =>\n      this.normFunction(newSourcePoint, sourcePoint)\n    )\n\n    // Sum the weighted contributions of the input point\n    const newDestinationPoint: Point = [0, 0]\n    for (let i = 0; i < 2; i++) {\n      // Apply the weights to the new distances\n      newDestinationPoint[i] = newDistances.reduce(\n        (sum, dist, index) =>\n          sum +\n          this.kernelFunction(dist, { epsilon: this.epsilon }) *\n            this.rbfWeights[i][index],\n        0\n      )\n      // Add the affine part\n      newDestinationPoint[i] +=\n        this.affineWeights[i][0] +\n        this.affineWeights[i][1] * newSourcePoint[0] +\n        this.affineWeights[i][2] * newSourcePoint[1]\n    }\n    return newDestinationPoint\n  }\n\n  // Evaluate the transformation function's partial derivative to x at a new point\n  evaluatePartialDerivativeX(newSourcePoint: Point): Point {\n    if (!this.rbfWeights || !this.affineWeights) {\n      throw new Error('Weights not computed')\n    }\n\n    // Compute the distances of that point to all control points\n    const newDistances = this.sourcePoints.map((sourcePoint) =>\n      this.normFunction(newSourcePoint, sourcePoint)\n    )\n\n    // Sum the weighted contributions of the input point\n    const newDestinationPointPartDerX: Point = [0, 0]\n    for (let i = 0; i < 2; i++) {\n      // Apply the weights to the new distances\n      newDestinationPointPartDerX[i] = newDistances.reduce(\n        (sum, dist, index) =>\n          sum +\n          (dist == 0\n            ? 0\n            : this.kernelFunction(dist, {\n                derivative: 1,\n                epsilon: this.epsilon\n              }) *\n              ((newSourcePoint[0] - this.sourcePoints[index][0]) / dist) *\n              this.rbfWeights[i][index]),\n        0\n      )\n      // Add the affine part\n      newDestinationPointPartDerX[i] += this.affineWeights[i][1]\n    }\n    return newDestinationPointPartDerX\n  }\n\n  // Evaluate the transformation function's partial derivative to y at a new point\n  evaluatePartialDerivativeY(newSourcePoint: Point): Point {\n    if (!this.rbfWeights || !this.affineWeights) {\n      throw new Error('Weights not computed')\n    }\n\n    // Compute the distances of that point to all control points\n    const newDistances = this.sourcePoints.map((sourcePoint) =>\n      this.normFunction(newSourcePoint, sourcePoint)\n    )\n\n    // Sum the weighted contributions of the input point\n    const newDestinationPointPartDerY: Point = [0, 0]\n    for (let i = 0; i < 2; i++) {\n      // Apply the weights to the new distances\n      newDestinationPointPartDerY[i] = newDistances.reduce(\n        (sum, dist, index) =>\n          sum +\n          (dist == 0\n            ? 0\n            : this.kernelFunction(dist, {\n                derivative: 1,\n                epsilon: this.epsilon\n              }) *\n              ((newSourcePoint[1] - this.sourcePoints[index][1]) / dist) *\n              this.rbfWeights[i][index]),\n        0\n      )\n      // Add the affine part\n      newDestinationPointPartDerY[i] += this.affineWeights[i][2]\n    }\n    return newDestinationPointPartDerY\n  }\n}\n","import { KernelFunctionOptions } from './types'\n\nexport function linearKernel(\n  r: number,\n  options: KernelFunctionOptions\n): number {\n  if (!options.derivative) {\n    return r\n  } else if (options.derivative == 1) {\n    return 1\n  } else {\n    throw new Error(\n      'Derivate of order ' + options.derivative + ' not implemented'\n    )\n  }\n}\n\nexport function cubicKernel(r: number, options: KernelFunctionOptions) {\n  if (!options.derivative) {\n    return Math.pow(r, 3)\n  } else if (options.derivative == 1) {\n    return 3 * Math.pow(r, 2)\n  } else {\n    throw new Error(\n      'Derivate of order ' + options.derivative + ' not implemented'\n    )\n  }\n}\n\nexport function quinticKernel(r: number, options: KernelFunctionOptions) {\n  if (!options.derivative) {\n    return Math.pow(r, 5)\n  } else if (options.derivative == 1) {\n    return 5 * Math.pow(r, 4)\n  } else {\n    throw new Error(\n      'Derivate of order ' + options.derivative + ' not implemented'\n    )\n  }\n}\n\nexport function thinPlateKernel(r: number, options: KernelFunctionOptions) {\n  if (!options.derivative) {\n    if (r === 0) {\n      return 0\n    }\n    return Math.pow(r, 2) * Math.log(r)\n  } else if (options.derivative == 1) {\n    if (r === 0) {\n      return 0\n    }\n    return r + 2 * r * Math.log(r)\n  } else {\n    throw new Error(\n      'Derivate of order ' + options.derivative + ' not implemented'\n    )\n  }\n}\n\nexport function gaussianKernel(r: number, options: KernelFunctionOptions) {\n  options.epsilon = options.epsilon || 1\n  if (!options.derivative) {\n    return Math.exp(-Math.pow(r / options.epsilon, 2))\n  } else if (options.derivative == 1) {\n    return (\n      ((-2 * r) / options.epsilon ** 2) *\n      Math.exp(-Math.pow(r / options.epsilon, 2))\n    )\n  } else {\n    throw new Error(\n      'Derivate of order ' + options.derivative + ' not implemented'\n    )\n  }\n}\n\nexport function inverseMultiquadricKernel(\n  r: number,\n  options: KernelFunctionOptions\n) {\n  options.epsilon = options.epsilon || 1\n  if (!options.derivative) {\n    return 1.0 / Math.sqrt(Math.pow(r / options.epsilon, 2) + 1)\n  } else if (options.derivative == 1) {\n    return (\n      -r /\n      (options.epsilon ** 2 *\n        Math.pow(Math.pow(r / options.epsilon, 2) + 1, 3 / 2))\n    )\n  } else {\n    throw new Error(\n      'Derivate of order ' + options.derivative + ' not implemented'\n    )\n  }\n}\n\nexport function multiquadricKernel(r: number, options: KernelFunctionOptions) {\n  options.epsilon = options.epsilon || 1\n  if (!options.derivative) {\n    return Math.sqrt(Math.pow(r / options.epsilon, 2) + 1)\n  } else if (options.derivative == 1) {\n    return (\n      r /\n      (options.epsilon ** 2 * Math.sqrt(Math.pow(r / options.epsilon, 2) + 1))\n    )\n  } else {\n    throw new Error(\n      'Derivate of order ' + options.derivative + ' not implemented'\n    )\n  }\n}\n","import type { Point } from '@allmaps/types'\n\nexport function euclideanNorm(point0: Point, point1: Point): number {\n  const sub = [point1[0] - point0[0], point1[1] - point0[1]]\n  const norm = Math.sqrt(sub[0] ** 2 + sub[1] ** 2)\n  return norm\n}\n","// TODO: consider implementing these functions in this module instead of using dependencies\nimport getWorldMidpoint from '@turf/midpoint'\nimport getWorldDistance from '@turf/distance'\n\nimport {\n  midPoint,\n  distance,\n  conformLineString,\n  conformRing\n} from '@allmaps/stdlib'\n\nimport GcpTransformer from '../transformer'\n\nimport type { TransformGcp, Segment, TransformOptions } from './types.js'\n\nimport type { Point, LineString, Ring, Polygon } from '@allmaps/types'\n\nexport function mergeOptions(\n  optionsFromTransform?: Partial<TransformOptions>,\n  optionsFromGCPTransformer?: Partial<TransformOptions>,\n  optionsFromDataFormat?: Partial<TransformOptions>\n): TransformOptions {\n  const optionsDefault: TransformOptions = {\n    maxOffsetRatio: 0,\n    maxDepth: 0,\n    destinationIsGeographic: false,\n    sourceIsGeographic: false,\n    inputIsMultiGeometry: false,\n    differentHandedness: false,\n    evaluationType: 'function'\n  }\n\n  return {\n    ...optionsDefault,\n    ...optionsFromDataFormat,\n    ...optionsFromGCPTransformer,\n    ...optionsFromTransform\n  }\n}\n\nexport function transformLineStringForwardToLineString(\n  transformer: GcpTransformer,\n  lineString: LineString,\n  options: TransformOptions\n): LineString {\n  lineString = conformLineString(lineString)\n\n  const points = lineString.map((point) => ({\n    source: point,\n    destination: transformer.transformForward(point)\n  }))\n\n  const segments = pointsToSegments(points, false)\n  const extendedSegments =\n    recursivelyAddMidpointsWithDestinationMidPointFromTransform(\n      transformer,\n      segments,\n      options\n    )\n\n  return segmentsToPoints(extendedSegments, true).map(\n    (point) => point.destination\n  )\n}\n\nexport function transformLineStringBackwardToLineString(\n  transformer: GcpTransformer,\n  lineString: LineString,\n  options: TransformOptions\n): LineString {\n  lineString = conformLineString(lineString)\n\n  const points: TransformGcp[] = lineString.map((point) => ({\n    source: transformer.transformBackward(point),\n    destination: point\n  }))\n\n  const segments = pointsToSegments(points, false)\n  const extendendSegements =\n    recursivelyAddMidpointsWithSourceMidPointFromTransform(\n      transformer,\n      segments,\n      options\n    )\n\n  return segmentsToPoints(extendendSegements, true).map((point) => point.source)\n}\n\nexport function transformRingForwardToRing(\n  transformer: GcpTransformer,\n  ring: Ring,\n  options: TransformOptions\n): Ring {\n  ring = conformRing(ring)\n\n  const points = ring.map((point) => ({\n    source: point,\n    destination: transformer.transformForward(point)\n  }))\n\n  const segments = pointsToSegments(points, true)\n  const extendedSegments =\n    recursivelyAddMidpointsWithDestinationMidPointFromTransform(\n      transformer,\n      segments,\n      options\n    )\n\n  return segmentsToPoints(extendedSegments, false).map(\n    (point) => point.destination\n  )\n}\n\nexport function transformRingBackwardToRing(\n  transformer: GcpTransformer,\n  ring: Ring,\n  options: TransformOptions\n): Ring {\n  ring = conformRing(ring)\n\n  const points: TransformGcp[] = ring.map((point) => ({\n    source: transformer.transformBackward(point),\n    destination: point\n  }))\n\n  const segments = pointsToSegments(points, true)\n  const extendendSegements =\n    recursivelyAddMidpointsWithSourceMidPointFromTransform(\n      transformer,\n      segments,\n      options\n    )\n\n  return segmentsToPoints(extendendSegements, false).map(\n    (point) => point.source\n  )\n}\n\nexport function transformPolygonForwardToPolygon(\n  transformer: GcpTransformer,\n  polygon: Polygon,\n  options: TransformOptions\n): Polygon {\n  return polygon.map((ring) => {\n    return transformRingForwardToRing(transformer, ring, options)\n  })\n}\n\nexport function transformPolygonBackwardToPolygon(\n  transformer: GcpTransformer,\n  polygon: Polygon,\n  options: TransformOptions\n): Polygon {\n  return polygon.map((ring) => {\n    return transformRingBackwardToRing(transformer, ring, options)\n  })\n}\n\nfunction pointsToSegments(points: TransformGcp[], close = false): Segment[] {\n  const segmentCount = points.length - (close ? 0 : 1)\n\n  const segments: Segment[] = []\n  for (let index = 0; index < segmentCount; index++) {\n    segments.push({\n      from: points[index],\n      to: points[(index + 1) % points.length]\n    })\n  }\n\n  return segments\n}\n\nfunction segmentsToPoints(segments: Segment[], close = false): TransformGcp[] {\n  const points = segments.map((segment) => segment.from)\n  if (close) {\n    points.push(segments[segments.length - 1].to)\n  }\n  return points\n}\n\nfunction recursivelyAddMidpointsWithDestinationMidPointFromTransform(\n  transformer: GcpTransformer,\n  segments: Segment[],\n  options: TransformOptions\n) {\n  if (options.maxDepth <= 0) {\n    return segments\n  }\n\n  return segments\n    .map((segment) =>\n      addMidpointWithDestinationMidPointFromTransform(\n        transformer,\n        segment,\n        options,\n        0\n      )\n    )\n    .flat(1)\n}\n\nfunction recursivelyAddMidpointsWithSourceMidPointFromTransform(\n  transformer: GcpTransformer,\n  segments: Segment[],\n  options: TransformOptions\n) {\n  if (options.maxDepth <= 0) {\n    return segments\n  }\n\n  return segments\n    .map((segment) =>\n      addMidpointWithSourceMidPointFromTransform(\n        transformer,\n        segment,\n        options,\n        0\n      )\n    )\n    .flat(1)\n}\n\nfunction addMidpointWithDestinationMidPointFromTransform(\n  transformer: GcpTransformer,\n  segment: Segment,\n  options: TransformOptions,\n  depth: number\n): Segment | Segment[] {\n  if (depth >= options.maxDepth) {\n    return segment\n  }\n\n  const sourceMidPointFunction = options.sourceIsGeographic\n    ? (point1: Point, point2: Point) =>\n        getWorldMidpoint(point1, point2).geometry.coordinates as Point\n    : midPoint\n  const sourceMidPoint = sourceMidPointFunction(\n    segment.from.source,\n    segment.to.source\n  )\n\n  const destinationMidPointFunction = options.destinationIsGeographic\n    ? (point1: Point, point2: Point) =>\n        getWorldMidpoint(point1, point2).geometry.coordinates as Point\n    : midPoint\n  const destinationMidPoint = destinationMidPointFunction(\n    segment.from.destination,\n    segment.to.destination\n  )\n  const destinationMidPointFromTransform =\n    transformer.transformForward(sourceMidPoint)\n\n  const destinationDistanceFunction = options.destinationIsGeographic\n    ? getWorldDistance\n    : distance\n  const segmentDestinationDistance = destinationDistanceFunction(\n    segment.from.destination,\n    segment.to.destination\n  )\n  const destinationMidPointsDistance = destinationDistanceFunction(\n    destinationMidPoint,\n    destinationMidPointFromTransform\n  )\n\n  if (\n    destinationMidPointsDistance / segmentDestinationDistance >\n      options.maxOffsetRatio &&\n    segmentDestinationDistance > 0\n  ) {\n    const newSegmentMidpoint: TransformGcp = {\n      source: sourceMidPoint,\n      destination: destinationMidPointFromTransform\n    }\n\n    return [\n      addMidpointWithDestinationMidPointFromTransform(\n        transformer,\n        { from: segment.from, to: newSegmentMidpoint },\n        options,\n        depth + 1\n      ),\n      addMidpointWithDestinationMidPointFromTransform(\n        transformer,\n        { from: newSegmentMidpoint, to: segment.to },\n        options,\n        depth + 1\n      )\n    ].flat(1)\n  } else {\n    return segment\n  }\n}\n\nfunction addMidpointWithSourceMidPointFromTransform(\n  transformer: GcpTransformer,\n  segment: Segment,\n  options: TransformOptions,\n  depth: number\n): Segment | Segment[] {\n  if (depth >= options.maxDepth) {\n    return segment\n  }\n\n  const destinationMidPointFunction = options.destinationIsGeographic\n    ? (point1: Point, point2: Point) =>\n        getWorldMidpoint(point1, point2).geometry.coordinates as Point\n    : midPoint\n  const destinationMidPoint = destinationMidPointFunction(\n    segment.from.destination,\n    segment.to.destination\n  )\n\n  const sourceMidPointFunction = options.sourceIsGeographic\n    ? (point1: Point, point2: Point) =>\n        getWorldMidpoint(point1, point2).geometry.coordinates as Point\n    : midPoint\n  const sourceMidPoint = sourceMidPointFunction(\n    segment.from.source,\n    segment.to.source\n  )\n  const sourceMidPointFromTransform = transformer.transformBackward(\n    destinationMidPoint as Point\n  )\n\n  const sourceDistanceFunction = options.sourceIsGeographic\n    ? getWorldDistance\n    : distance\n  const segmentSourceDistance = sourceDistanceFunction(\n    segment.from.source,\n    segment.to.source\n  )\n  const sourceMidPointsDistance = sourceDistanceFunction(\n    sourceMidPoint,\n    sourceMidPointFromTransform\n  )\n\n  if (\n    sourceMidPointsDistance / segmentSourceDistance > options.maxOffsetRatio &&\n    segmentSourceDistance > 0\n  ) {\n    const newSegmentMidpoint: TransformGcp = {\n      source: sourceMidPointFromTransform,\n      destination: destinationMidPoint\n    }\n\n    return [\n      addMidpointWithSourceMidPointFromTransform(\n        transformer,\n        { from: segment.from, to: newSegmentMidpoint },\n        options,\n        depth + 1\n      ),\n      addMidpointWithSourceMidPointFromTransform(\n        transformer,\n        { from: newSegmentMidpoint, to: segment.to },\n        options,\n        depth + 1\n      )\n    ].flat(1)\n  } else {\n    return segment\n  }\n}\n","import {\n  isPoint,\n  isLineString,\n  isPolygon,\n  isMultiPoint,\n  isMultiLineString,\n  isMultiPolygon,\n  isGeojsonPoint,\n  isGeojsonLineString,\n  isGeojsonPolygon,\n  isGeojsonMultiPoint,\n  isGeojsonMultiLineString,\n  isGeojsonMultiPolygon,\n  convertPointToGeojsonPoint,\n  convertLineStringToGeojsonLineString,\n  convertPolygonToGeojsonPolygon,\n  convertGeojsonPointToPoint,\n  convertGeojsonLineStringToLineString,\n  convertGeojsonPolygonToPolygon,\n  geometriesToFeatureCollection,\n  featureCollectionToGeometries,\n  stringToSvgGeometriesGenerator,\n  svgGeometriesToSvgString,\n  expandGeojsonMultiPointToGeojsonPointArray,\n  expandGeojsonMultiLineStringToGeojsonLineStringArray,\n  expandGeojsonMultiPolygonToGeojsonPolygonArray,\n  joinGeojsonPointArrayToGeojsonMultiPoint,\n  joinGeojsonLineStringArrayToGeojsonMultiLineString,\n  joinGeojsonPolygonArrayToGeojsonMultiPolygon,\n  flipY\n} from '@allmaps/stdlib'\n\nimport Transformation from './transformation.js'\n\nimport Straight from './shared/straight.js'\nimport Helmert from './shared/helmert.js'\nimport Polynomial from './shared/polynomial.js'\nimport Projective from './shared/projective.js'\nimport RBF from './shared/radial-basis-function.js'\n\nimport { thinPlateKernel } from './shared/kernel-functions.js'\nimport { euclideanNorm } from './shared/norm-functions.js'\n\nimport {\n  mergeOptions,\n  transformLineStringForwardToLineString,\n  transformLineStringBackwardToLineString,\n  transformPolygonForwardToPolygon,\n  transformPolygonBackwardToPolygon\n} from './shared/transform-helper-functions.js'\n\nimport type {\n  Point,\n  LineString,\n  Polygon,\n  MultiPoint,\n  MultiLineString,\n  MultiPolygon,\n  Geometry,\n  Gcp,\n  GeojsonPoint,\n  GeojsonLineString,\n  GeojsonPolygon,\n  GeojsonMultiPoint,\n  GeojsonMultiLineString,\n  GeojsonMultiPolygon,\n  GeojsonGeometry,\n  GeojsonFeatureCollection,\n  SvgGeometry\n} from '@allmaps/types'\n\nimport type {\n  TransformGcp,\n  TransformationType,\n  TransformOptions\n} from './shared/types.js'\n\n/**\n * A Ground Control Point Transformer, containing a forward and backward transformation and\n * specifying functions to transform geometries using these transformations.\n * */\nexport default class GcpTransformer {\n  gcps: TransformGcp[]\n  sourcePoints: Point[]\n  destinationPoints: Point[]\n  type: TransformationType\n  options?: Partial<TransformOptions>\n\n  forwardTransformation?: Transformation\n  backwardTransformation?: Transformation\n\n  /**\n   * Create a GcpTransformer\n   * @param {TransformGcp[] | Gcp[]} gcps - An array of Ground Control Points (GCPs)\n   * @param {TransformationType} [type='polynomial'] - The transformation type\n   */ constructor(\n    gcps: TransformGcp[] | Gcp[],\n    type: TransformationType = 'polynomial',\n    options?: Partial<TransformOptions>\n  ) {\n    if (options) {\n      this.options = options\n    }\n    if (gcps.length === 0) {\n      throw new Error('No control points')\n    }\n    this.gcps = gcps.map((gcp) => {\n      if ('resource' in gcp && 'geo' in gcp) {\n        return {\n          source: gcp.resource,\n          destination: gcp.geo\n        }\n      } else if ('source' in gcp && 'destination' in gcp) {\n        return gcp\n      } else {\n        throw new Error('Unsupported GCP type')\n      }\n    })\n    this.sourcePoints = this.gcps.map((gcp) => gcp.source)\n    this.destinationPoints = this.gcps.map((gcp) => gcp.destination)\n    this.type = type\n  }\n\n  /**\n   * Create forward transformation\n   */\n  createForwardTransformation(): void {\n    this.forwardTransformation = this.computeTransformation(\n      this.sourcePoints.map((point) => this.assureEqualHandedness(point)),\n      this.destinationPoints\n    )\n  }\n\n  /**\n   * Create backward transformation\n   */\n  createBackwardTransformation(): void {\n    this.backwardTransformation = this.computeTransformation(\n      this.destinationPoints,\n      this.sourcePoints.map((point) => this.assureEqualHandedness(point))\n    )\n  }\n\n  // Base functions\n  transformForward(\n    input: Point | GeojsonPoint,\n    options?: Partial<TransformOptions>\n  ): Point\n  transformForward(\n    input: LineString | GeojsonLineString,\n    options?: Partial<TransformOptions>\n  ): LineString\n  transformForward(\n    input: Polygon | GeojsonPolygon,\n    options?: Partial<TransformOptions>\n  ): Polygon\n  transformForward(\n    input: MultiPoint | GeojsonMultiPoint,\n    options?: Partial<TransformOptions>\n  ): MultiPoint\n  transformForward(\n    input: MultiLineString | GeojsonMultiLineString,\n    options?: Partial<TransformOptions>\n  ): MultiLineString\n  transformForward(\n    input: MultiPolygon | GeojsonMultiPolygon,\n    options?: Partial<TransformOptions>\n  ): MultiPolygon\n  /**\n   * Transforms a Geometry or a GeoJSON geometry forward to a Geometry\n   * @param {Geometry | GeojsonGeometry} input - Geometry or GeoJSON geometry to transform\n   * @param {Partial<TransformOptions>} [options] - Transform options\n   * @returns {Geometry} Forward transform of input as Geometry\n   * @type {{\n   * (input:Point | GeojsonPoint) => Point;\n   * (input:LineString | GeojsonLineString) => LineString;\n   * (input:Polygon | GeojsonPolygon) => Polygon;\n   * (input:MultiPoint | GeojsonMultiPoint) => MultiPoint;\n   * (input:MultiLineString | GeojsonMultiLineString) => MultiLineString;\n   * (input:MultiPolygon | GeojsonMultiPolygon) => MultiPolygon;\n   * }}\n   */\n  transformForward(\n    input: Geometry | GeojsonGeometry,\n    options?: Partial<TransformOptions>\n  ): Geometry {\n    if (!mergeOptions(options, this.options).inputIsMultiGeometry) {\n      if (isPoint(input)) {\n        if (!this.forwardTransformation) {\n          this.createForwardTransformation()\n        }\n        return this.forwardTransformation!.evaluate(\n          this.assureEqualHandedness(input),\n          mergeOptions(options, this.options).evaluationType\n        )\n      } else if (isGeojsonPoint(input)) {\n        return this.transformForward(convertGeojsonPointToPoint(input), options)\n      } else if (isLineString(input)) {\n        return transformLineStringForwardToLineString(\n          this,\n          input,\n          mergeOptions(options, this.options)\n        )\n      } else if (isGeojsonLineString(input)) {\n        return transformLineStringForwardToLineString(\n          this,\n          convertGeojsonLineStringToLineString(input),\n          mergeOptions(options, this.options, {\n            sourceIsGeographic: true\n          })\n        )\n      } else if (isPolygon(input)) {\n        return transformPolygonForwardToPolygon(\n          this,\n          input,\n          mergeOptions(options, this.options)\n        )\n      } else if (isGeojsonPolygon(input)) {\n        return transformPolygonForwardToPolygon(\n          this,\n          convertGeojsonPolygonToPolygon(input),\n          mergeOptions(options, this.options, { sourceIsGeographic: true })\n        )\n      }\n    }\n    if (options) {\n      options.inputIsMultiGeometry = false // false for piecewise single geometries\n    }\n    if (isMultiPoint(input)) {\n      return input.map((element) => this.transformForward(element, options))\n    } else if (isGeojsonMultiPoint(input)) {\n      return expandGeojsonMultiPointToGeojsonPointArray(input).map((element) =>\n        this.transformForward(element, options)\n      )\n    } else if (isMultiLineString(input)) {\n      return input.map((element) => this.transformForward(element, options))\n    } else if (isGeojsonMultiLineString(input)) {\n      return expandGeojsonMultiLineStringToGeojsonLineStringArray(input).map(\n        (element) => this.transformForward(element, options)\n      )\n    } else if (isMultiPolygon(input)) {\n      return input.map((element) => this.transformForward(element, options))\n    } else if (isGeojsonMultiPolygon(input)) {\n      return expandGeojsonMultiPolygonToGeojsonPolygonArray(input).map(\n        (element) => this.transformForward(element, options)\n      )\n    } else {\n      throw new Error('Input type not supported')\n    }\n  }\n\n  transformForwardAsGeojson(\n    input: Point | GeojsonPoint,\n    options?: Partial<TransformOptions>\n  ): GeojsonPoint\n  transformForwardAsGeojson(\n    input: LineString | GeojsonLineString,\n    options?: Partial<TransformOptions>\n  ): GeojsonLineString\n  transformForwardAsGeojson(\n    input: Polygon | GeojsonPolygon,\n    options?: Partial<TransformOptions>\n  ): GeojsonPolygon\n  transformForwardAsGeojson(\n    input: MultiPoint | GeojsonMultiPoint,\n    options?: Partial<TransformOptions>\n  ): GeojsonMultiPoint\n  transformForwardAsGeojson(\n    input: MultiLineString | GeojsonMultiLineString,\n    options?: Partial<TransformOptions>\n  ): GeojsonMultiLineString\n  transformForwardAsGeojson(\n    input: MultiPolygon | GeojsonMultiPolygon,\n    options?: Partial<TransformOptions>\n  ): GeojsonMultiPolygon\n  /**\n   * Transforms a Geometry or a GeoJSON geometry forward to a GeoJSON geometry\n   * @param {Geometry | GeojsonGeometry} input - Geometry or GeoJSON geometry to transform\n   * @param {Partial<TransformOptions>} [options] - Transform options\n   * @returns {GeojsonGeometry} Forward transform of input, as GeoJSON geometry\n   * @type {{\n   * (input:Point | GeojsonPoint) => GeojsonPoint;\n   * (input:LineString | GeojsonLineString) => GeojsonLineString;\n   * (input:Polygon | GeojsonPolygon) => GeojsonPolygon;\n   * (input:MultiPoint | GeojsonMultiPoint) => GeojsonMultiPoint;\n   * (input:MultiLineString | GeojsonMultiLineString) => GeojsonMultiLineString;\n   * (input:MultiPolygon | GeojsonMultiPolygon) => GeojsonMultiPolygon;\n   * }}\n   */\n  transformForwardAsGeojson(\n    input: Geometry | GeojsonGeometry,\n    options?: Partial<TransformOptions>\n  ): GeojsonGeometry {\n    if (!mergeOptions(options, this.options).inputIsMultiGeometry) {\n      if (isPoint(input)) {\n        return convertPointToGeojsonPoint(this.transformForward(input))\n      } else if (isGeojsonPoint(input)) {\n        return convertPointToGeojsonPoint(\n          this.transformForward(convertGeojsonPointToPoint(input))\n        )\n      } else if (isLineString(input)) {\n        return convertLineStringToGeojsonLineString(\n          transformLineStringForwardToLineString(\n            this,\n            input,\n            mergeOptions(options, this.options, {\n              destinationIsGeographic: true\n            })\n          )\n        )\n      } else if (isGeojsonLineString(input)) {\n        return convertLineStringToGeojsonLineString(\n          transformLineStringForwardToLineString(\n            this,\n            convertGeojsonLineStringToLineString(input),\n            mergeOptions(options, this.options, {\n              sourceIsGeographic: true,\n              destinationIsGeographic: true\n            })\n          )\n        )\n      } else if (isPolygon(input)) {\n        return convertPolygonToGeojsonPolygon(\n          transformPolygonForwardToPolygon(\n            this,\n            input,\n            mergeOptions(options, this.options, {\n              destinationIsGeographic: true\n            })\n          )\n        )\n      } else if (isGeojsonPolygon(input)) {\n        return convertPolygonToGeojsonPolygon(\n          transformPolygonForwardToPolygon(\n            this,\n            convertGeojsonPolygonToPolygon(input),\n            mergeOptions(options, this.options, {\n              sourceIsGeographic: true,\n              destinationIsGeographic: true\n            })\n          )\n        )\n      }\n    }\n    if (options) {\n      options.inputIsMultiGeometry = false // false for piecewise single geometries\n    }\n    if (isMultiPoint(input)) {\n      return joinGeojsonPointArrayToGeojsonMultiPoint(\n        input.map((element) => this.transformForwardAsGeojson(element, options))\n      )\n    } else if (isGeojsonMultiPoint(input)) {\n      return joinGeojsonPointArrayToGeojsonMultiPoint(\n        expandGeojsonMultiPointToGeojsonPointArray(input).map((element) =>\n          this.transformForwardAsGeojson(element, options)\n        )\n      )\n    } else if (isMultiLineString(input)) {\n      return joinGeojsonLineStringArrayToGeojsonMultiLineString(\n        input.map((element) => this.transformForwardAsGeojson(element, options))\n      )\n    } else if (isGeojsonMultiLineString(input)) {\n      return joinGeojsonLineStringArrayToGeojsonMultiLineString(\n        expandGeojsonMultiLineStringToGeojsonLineStringArray(input).map(\n          (element) => this.transformForwardAsGeojson(element, options)\n        )\n      )\n    } else if (isMultiPolygon(input)) {\n      return joinGeojsonPolygonArrayToGeojsonMultiPolygon(\n        input.map((element) => this.transformForwardAsGeojson(element, options))\n      )\n    } else if (isGeojsonMultiPolygon(input)) {\n      return joinGeojsonPolygonArrayToGeojsonMultiPolygon(\n        expandGeojsonMultiPolygonToGeojsonPolygonArray(input).map((element) =>\n          this.transformForwardAsGeojson(element, options)\n        )\n      )\n    } else {\n      throw new Error('Input type not supported')\n    }\n  }\n\n  transformBackward(\n    input: Point | GeojsonPoint,\n    options?: Partial<TransformOptions>\n  ): Point\n  transformBackward(\n    input: LineString | GeojsonLineString,\n    options?: Partial<TransformOptions>\n  ): LineString\n  transformBackward(\n    input: Polygon | GeojsonPolygon,\n    options?: Partial<TransformOptions>\n  ): Polygon\n  transformBackward(\n    input: MultiPoint | GeojsonMultiPoint,\n    options?: Partial<TransformOptions>\n  ): MultiPoint\n  transformBackward(\n    input: MultiLineString | GeojsonMultiLineString,\n    options?: Partial<TransformOptions>\n  ): MultiLineString\n  transformBackward(\n    input: MultiPolygon | GeojsonMultiPolygon,\n    options?: Partial<TransformOptions>\n  ): MultiPolygon\n  /**\n   * Transforms a geometry or a GeoJSON geometry backward to a Geometry\n   * @param {Geometry | GeojsonGeometry} input - Geometry or GeoJSON geometry to transform\n   * @param {Partial<TransformOptions>} [options] - Transform options\n   * @returns {Geometry} backward transform of input, as geometry\n   * @type {{\n   * (input:Point | GeojsonPoint) => Point;\n   * (input:LineString | GeojsonLineString) => LineString;\n   * (input:Polygon | GeojsonPolygon) => Polygon;\n   * (input:MultiPoint | GeojsonMultiPoint) => MultiPoint;\n   * (input:MultiLineString | GeojsonMultiLineString) => MultiLineString;\n   * (input:MultiPolygon | GeojsonMultiPolygon) => MultiPolygon;\n   * }}\n   */\n  transformBackward(\n    input: Geometry | GeojsonGeometry,\n    options?: Partial<TransformOptions>\n  ): Geometry {\n    if (!mergeOptions(options, this.options).inputIsMultiGeometry) {\n      if (isPoint(input)) {\n        if (!this.backwardTransformation) {\n          this.createBackwardTransformation()\n        }\n        return this.assureEqualHandedness(\n          this.backwardTransformation!.evaluate(input)\n        )\n      } else if (isGeojsonPoint(input)) {\n        return this.transformBackward(convertGeojsonPointToPoint(input))\n      } else if (isLineString(input)) {\n        return transformLineStringBackwardToLineString(\n          this,\n          input,\n          mergeOptions(options, this.options)\n        )\n      } else if (isGeojsonLineString(input)) {\n        return transformLineStringBackwardToLineString(\n          this,\n          convertGeojsonLineStringToLineString(input),\n          mergeOptions(options, this.options, {\n            destinationIsGeographic: true\n          })\n        )\n      } else if (isPolygon(input)) {\n        return transformPolygonBackwardToPolygon(\n          this,\n          input,\n          mergeOptions(options, this.options)\n        )\n      } else if (isGeojsonPolygon(input)) {\n        return transformPolygonBackwardToPolygon(\n          this,\n          convertGeojsonPolygonToPolygon(input),\n          mergeOptions(options, this.options, {\n            destinationIsGeographic: true\n          })\n        )\n      }\n    }\n    if (options) {\n      options.inputIsMultiGeometry = false // false for piecewise single geometries\n    }\n    if (isMultiPoint(input)) {\n      return input.map((element) => this.transformBackward(element, options))\n    } else if (isGeojsonMultiPoint(input)) {\n      return expandGeojsonMultiPointToGeojsonPointArray(input).map((element) =>\n        this.transformBackward(element, options)\n      )\n    } else if (isMultiLineString(input)) {\n      return input.map((element) => this.transformBackward(element, options))\n    } else if (isGeojsonMultiLineString(input)) {\n      return expandGeojsonMultiLineStringToGeojsonLineStringArray(input).map(\n        (element) => this.transformBackward(element, options)\n      )\n    } else if (isMultiPolygon(input)) {\n      return input.map((element) => this.transformBackward(element, options))\n    } else if (isGeojsonMultiPolygon(input)) {\n      return expandGeojsonMultiPolygonToGeojsonPolygonArray(input).map(\n        (element) => this.transformBackward(element, options)\n      )\n    } else {\n      throw new Error('Input type not supported')\n    }\n  }\n\n  transformBackwardAsGeojson(\n    input: Point | GeojsonPoint,\n    options?: Partial<TransformOptions>\n  ): GeojsonPoint\n  transformBackwardAsGeojson(\n    input: LineString | GeojsonLineString,\n    options?: Partial<TransformOptions>\n  ): GeojsonLineString\n  transformBackwardAsGeojson(\n    input: Polygon | GeojsonPolygon,\n    options?: Partial<TransformOptions>\n  ): GeojsonPolygon\n  transformBackwardAsGeojson(\n    input: MultiPoint | GeojsonMultiPoint,\n    options?: Partial<TransformOptions>\n  ): GeojsonMultiPoint\n  transformBackwardAsGeojson(\n    input: MultiLineString | GeojsonMultiLineString,\n    options?: Partial<TransformOptions>\n  ): GeojsonMultiLineString\n  transformBackwardAsGeojson(\n    input: MultiPolygon | GeojsonMultiPolygon,\n    options?: Partial<TransformOptions>\n  ): GeojsonMultiPolygon\n  /**\n   * Transforms a Geometry or a GeoJSON geometry backward to a GeoJSON geometry\n   * @param {Geometry | GeojsonGeometry} input - Geometry or GeoJSON geometry to transform\n   * @param {Partial<TransformOptions>} [options] - Transform options\n   * @returns {GeojsonGeometry} backward transform of input, as GeoJSON geometry\n   * @type {{\n   * (input:Point | GeojsonPoint) => GeojsonPoint;\n   * (input:LineString | GeojsonLineString) => GeojsonLineString;\n   * (input:Polygon | GeojsonPolygon) => GeojsonPolygon;\n   * (input:MultiPoint | GeojsonMultiPoint) => GeojsonMultiPoint;\n   * (input:MultiLineString | GeojsonMultiLineString) => GeojsonMultiLineString;\n   * (input:MultiPolygon | GeojsonMultiPolygon) => GeojsonMultiPolygon;\n   * }}\n   */\n  transformBackwardAsGeojson(\n    input: Geometry | GeojsonGeometry,\n    options?: Partial<TransformOptions>\n  ): GeojsonGeometry {\n    if (!mergeOptions(options, this.options).inputIsMultiGeometry) {\n      if (isPoint(input)) {\n        return convertPointToGeojsonPoint(this.transformBackward(input))\n      } else if (isGeojsonPoint(input)) {\n        return convertPointToGeojsonPoint(\n          this.transformBackward(convertGeojsonPointToPoint(input))\n        )\n      } else if (isLineString(input)) {\n        return convertLineStringToGeojsonLineString(\n          transformLineStringBackwardToLineString(\n            this,\n            input,\n            mergeOptions(options, this.options, {\n              sourceIsGeographic: true\n            })\n          )\n        )\n      } else if (isGeojsonLineString(input)) {\n        return convertLineStringToGeojsonLineString(\n          transformLineStringBackwardToLineString(\n            this,\n            convertGeojsonLineStringToLineString(input),\n            mergeOptions(options, this.options, {\n              sourceIsGeographic: true,\n              destinationIsGeographic: true\n            })\n          )\n        )\n      } else if (isPolygon(input)) {\n        return convertPolygonToGeojsonPolygon(\n          transformPolygonBackwardToPolygon(\n            this,\n            input,\n            mergeOptions(options, this.options, {\n              sourceIsGeographic: true\n            })\n          )\n        )\n      } else if (isGeojsonPolygon(input)) {\n        return convertPolygonToGeojsonPolygon(\n          transformPolygonBackwardToPolygon(\n            this,\n            convertGeojsonPolygonToPolygon(input),\n            mergeOptions(options, this.options, {\n              sourceIsGeographic: true,\n              destinationIsGeographic: true\n            })\n          )\n        )\n      }\n    }\n    if (options) {\n      options.inputIsMultiGeometry = false // false for piecewise single geometries\n    }\n    if (isMultiPoint(input)) {\n      return joinGeojsonPointArrayToGeojsonMultiPoint(\n        input.map((element) =>\n          this.transformBackwardAsGeojson(element, options)\n        )\n      )\n    } else if (isGeojsonMultiPoint(input)) {\n      return joinGeojsonPointArrayToGeojsonMultiPoint(\n        expandGeojsonMultiPointToGeojsonPointArray(input).map((element) =>\n          this.transformBackwardAsGeojson(element, options)\n        )\n      )\n    } else if (isMultiLineString(input)) {\n      return joinGeojsonLineStringArrayToGeojsonMultiLineString(\n        input.map((element) =>\n          this.transformBackwardAsGeojson(element, options)\n        )\n      )\n    } else if (isGeojsonMultiLineString(input)) {\n      return joinGeojsonLineStringArrayToGeojsonMultiLineString(\n        expandGeojsonMultiLineStringToGeojsonLineStringArray(input).map(\n          (element) => this.transformBackwardAsGeojson(element, options)\n        )\n      )\n    } else if (isMultiPolygon(input)) {\n      return joinGeojsonPolygonArrayToGeojsonMultiPolygon(\n        input.map((element) =>\n          this.transformBackwardAsGeojson(element, options)\n        )\n      )\n    } else if (isGeojsonMultiPolygon(input)) {\n      return joinGeojsonPolygonArrayToGeojsonMultiPolygon(\n        expandGeojsonMultiPolygonToGeojsonPolygonArray(input).map((element) =>\n          this.transformBackwardAsGeojson(element, options)\n        )\n      )\n    } else {\n      throw new Error('Input type not supported')\n    }\n  }\n\n  // Alias\n\n  transformToGeo(\n    input: Point | GeojsonPoint,\n    options?: Partial<TransformOptions>\n  ): Point\n  transformToGeo(\n    input: LineString | GeojsonLineString,\n    options?: Partial<TransformOptions>\n  ): LineString\n  transformToGeo(\n    input: Polygon | GeojsonPolygon,\n    options?: Partial<TransformOptions>\n  ): Polygon\n  transformToGeo(\n    input: MultiPoint | GeojsonMultiPoint,\n    options?: Partial<TransformOptions>\n  ): MultiPoint\n  transformToGeo(\n    input: MultiLineString | GeojsonMultiLineString,\n    options?: Partial<TransformOptions>\n  ): MultiLineString\n  transformToGeo(\n    input: MultiPolygon | GeojsonMultiPolygon,\n    options?: Partial<TransformOptions>\n  ): MultiPolygon\n  /**\n   * Transforms Geometry or GeoJSON geometry forward, as Geometry\n   * @param {Geometry | GeojsonGeometry} input - Input to transform\n   * @param {Partial<TransformOptions>} [options] - Transform options\n   * @returns {Geometry} Forward transform of input, as Geometry\n   * @type {{\n   * (input:Point | GeojsonPoint) => Point;\n   * (input:LineString | GeojsonLineString) => LineString;\n   * (input:Polygon | GeojsonPolygon) => Polygon;\n   * (input:MultiPoint | GeojsonMultiPoint) => MultiPoint;\n   * (input:MultiLineString | GeojsonMultiLineString) => MultiLineString;\n   * (input:MultiPolygon | GeojsonMultiPolygon) => MultiPolygon;\n   * }}\n   */\n  transformToGeo(\n    input: Geometry | GeojsonGeometry,\n    options?: Partial<TransformOptions>\n  ): Geometry {\n    if (!mergeOptions(options, this.options).inputIsMultiGeometry) {\n      if (isPoint(input)) {\n        return this.transformForward(input as Point, options)\n      } else if (isGeojsonPoint(input)) {\n        return this.transformForward(input as GeojsonPoint, options)\n      } else if (isLineString(input)) {\n        return this.transformForward(input as LineString, options)\n      } else if (isGeojsonLineString(input)) {\n        return this.transformForward(input as GeojsonLineString, options)\n      } else if (isPolygon(input)) {\n        return this.transformForward(input as Polygon, options)\n      } else if (isGeojsonPolygon(input)) {\n        return this.transformForward(input as GeojsonPolygon, options)\n      }\n    }\n    if (options) {\n      options.inputIsMultiGeometry = false // false for piecewise single geometries\n    }\n    if (isMultiPoint(input)) {\n      return this.transformForward(input as MultiPoint, options)\n    } else if (isGeojsonMultiPoint(input)) {\n      return this.transformForward(input as GeojsonMultiPoint, options)\n    } else if (isMultiLineString(input)) {\n      return this.transformForward(input as MultiLineString, options)\n    } else if (isGeojsonMultiLineString(input)) {\n      return this.transformForward(input as GeojsonMultiLineString, options)\n    } else if (isMultiPolygon(input)) {\n      return this.transformForward(input as MultiPolygon, options)\n    } else if (isGeojsonMultiPolygon(input)) {\n      return this.transformForward(input as GeojsonMultiPolygon, options)\n    } else {\n      throw new Error('Input type not supported')\n    }\n  }\n\n  transformToGeoAsGeojson(\n    input: Point | GeojsonPoint,\n    options?: Partial<TransformOptions>\n  ): GeojsonPoint\n  transformToGeoAsGeojson(\n    input: LineString | GeojsonLineString,\n    options?: Partial<TransformOptions>\n  ): GeojsonLineString\n  transformToGeoAsGeojson(\n    input: Polygon | GeojsonPolygon,\n    options?: Partial<TransformOptions>\n  ): GeojsonPolygon\n  transformToGeoAsGeojson(\n    input: MultiPoint | GeojsonMultiPoint,\n    options?: Partial<TransformOptions>\n  ): GeojsonMultiPoint\n  transformToGeoAsGeojson(\n    input: MultiLineString | GeojsonMultiLineString,\n    options?: Partial<TransformOptions>\n  ): GeojsonMultiLineString\n  transformToGeoAsGeojson(\n    input: MultiPolygon | GeojsonMultiPolygon,\n    options?: Partial<TransformOptions>\n  ): GeojsonMultiPolygon\n  /**\n   * Transforms a Geometry or a GeoJSON geometry forward, to a GeoJSON geometry\n   * @param {Geometry | GeojsonGeometry} input - Input to transform\n   * @param {Partial<TransformOptions>} [options] - Transform options\n   * @returns {Geometry} Forward transform of input, as GeoJSON geometry\n   * @type {{\n   * (input:Point | GeojsonPoint) => GeojsonPoint;\n   * (input:LineString | GeojsonLineString) => GeojsonLineString;\n   * (input:Polygon | GeojsonPolygon) => GeojsonPolygon;\n   * (input:MultiPoint | GeojsonMultiPoint) => GeojsonMultiPoint;\n   * (input:MultiLineString | GeojsonMultiLineString) => GeojsonMultiLineString;\n   * (input:MultiPolygon | GeojsonMultiPolygon) => GeojsonMultiPolygon;\n   * }}\n   */\n  transformToGeoAsGeojson(\n    input: Geometry | GeojsonGeometry,\n    options?: Partial<TransformOptions>\n  ): GeojsonGeometry {\n    if (!mergeOptions(options, this.options).inputIsMultiGeometry) {\n      if (isPoint(input)) {\n        return this.transformForwardAsGeojson(input as Point, options)\n      } else if (isGeojsonPoint(input)) {\n        return this.transformForwardAsGeojson(input as GeojsonPoint, options)\n      } else if (isLineString(input)) {\n        return this.transformForwardAsGeojson(input as LineString, options)\n      } else if (isGeojsonLineString(input)) {\n        return this.transformForwardAsGeojson(\n          input as GeojsonLineString,\n          options\n        )\n      } else if (isPolygon(input)) {\n        return this.transformForwardAsGeojson(input as Polygon, options)\n      } else if (isGeojsonPolygon(input)) {\n        return this.transformForwardAsGeojson(input as GeojsonPolygon, options)\n      }\n    }\n    if (options) {\n      options.inputIsMultiGeometry = false // false for piecewise single geometries\n    }\n    if (isMultiPoint(input)) {\n      return this.transformForwardAsGeojson(input as MultiPoint, options)\n    } else if (isGeojsonMultiPoint(input)) {\n      return this.transformForwardAsGeojson(input as GeojsonMultiPoint, options)\n    } else if (isMultiLineString(input)) {\n      return this.transformForwardAsGeojson(input as MultiLineString, options)\n    } else if (isGeojsonMultiLineString(input)) {\n      return this.transformForwardAsGeojson(\n        input as GeojsonMultiLineString,\n        options\n      )\n    } else if (isMultiPolygon(input)) {\n      return this.transformForwardAsGeojson(input as MultiPolygon, options)\n    } else if (isGeojsonMultiPolygon(input)) {\n      return this.transformForwardAsGeojson(\n        input as GeojsonMultiPolygon,\n        options\n      )\n    } else {\n      throw new Error('Input type not supported')\n    }\n  }\n\n  transformToResource(\n    input: Point | GeojsonPoint,\n    options?: Partial<TransformOptions>\n  ): Point\n  transformToResource(\n    input: LineString | GeojsonLineString,\n    options?: Partial<TransformOptions>\n  ): LineString\n  transformToResource(\n    input: Polygon | GeojsonPolygon,\n    options?: Partial<TransformOptions>\n  ): Polygon\n  transformToResource(\n    input: MultiPoint | GeojsonMultiPoint,\n    options?: Partial<TransformOptions>\n  ): MultiPoint\n  transformToResource(\n    input: MultiLineString | GeojsonMultiLineString,\n    options?: Partial<TransformOptions>\n  ): MultiLineString\n  transformToResource(\n    input: MultiPolygon | GeojsonMultiPolygon,\n    options?: Partial<TransformOptions>\n  ): MultiPolygon\n  /**\n   * Transforms a Geometry or a GeoJSON geometry backward, to a Geometry\n   * @param {Geometry | GeojsonGeometry} input - Input to transform\n   * @param {Partial<TransformOptions>} [options] - Transform options\n   * @returns {Geometry} Backward transform of input, as a Geometry\n   * @type {{\n   * (input:Point | GeojsonPoint) => Point;\n   * (input:LineString | GeojsonLineString) => LineString;\n   * (input:Polygon | GeojsonPolygon) => Polygon;\n   * (input:MultiPoint | GeojsonMultiPoint) => MultiPoint;\n   * (input:MultiLineString | GeojsonMultiLineString) => MultiLineString;\n   * (input:MultiPolygon | GeojsonMultiPolygon) => MultiPolygon;\n   * }}\n   */\n  transformToResource(\n    input: Geometry | GeojsonGeometry,\n    options?: Partial<TransformOptions>\n  ): Geometry {\n    if (!mergeOptions(options, this.options).inputIsMultiGeometry) {\n      if (isPoint(input)) {\n        return this.transformBackward(input as Point, options)\n      } else if (isGeojsonPoint(input)) {\n        return this.transformBackward(input as GeojsonPoint, options)\n      } else if (isLineString(input)) {\n        return this.transformBackward(input as LineString, options)\n      } else if (isGeojsonLineString(input)) {\n        return this.transformBackward(input as GeojsonLineString, options)\n      } else if (isPolygon(input)) {\n        return this.transformBackward(input as Polygon, options)\n      } else if (isGeojsonPolygon(input)) {\n        return this.transformBackward(input as GeojsonPolygon, options)\n      }\n    }\n    if (options) {\n      options.inputIsMultiGeometry = false // false for piecewise single geometries\n    }\n    if (isMultiPoint(input)) {\n      return this.transformBackward(input as MultiPoint, options)\n    } else if (isGeojsonMultiPoint(input)) {\n      return this.transformBackward(input as GeojsonMultiPoint, options)\n    } else if (isMultiLineString(input)) {\n      return this.transformBackward(input as MultiLineString, options)\n    } else if (isGeojsonMultiLineString(input)) {\n      return this.transformBackward(input as GeojsonMultiLineString, options)\n    } else if (isMultiPolygon(input)) {\n      return this.transformBackward(input as MultiPolygon, options)\n    } else if (isGeojsonMultiPolygon(input)) {\n      return this.transformBackward(input as GeojsonMultiPolygon, options)\n    } else {\n      throw new Error('Input type not supported')\n    }\n  }\n\n  transformToResourceAsGeojson(\n    input: Point | GeojsonPoint,\n    options?: Partial<TransformOptions>\n  ): GeojsonPoint\n  transformToResourceAsGeojson(\n    input: LineString | GeojsonLineString,\n    options?: Partial<TransformOptions>\n  ): GeojsonLineString\n  transformToResourceAsGeojson(\n    input: Polygon | GeojsonPolygon,\n    options?: Partial<TransformOptions>\n  ): GeojsonPolygon\n  transformToResourceAsGeojson(\n    input: MultiPoint | GeojsonMultiPoint,\n    options?: Partial<TransformOptions>\n  ): GeojsonMultiPoint\n  transformToResourceAsGeojson(\n    input: MultiLineString | GeojsonMultiLineString,\n    options?: Partial<TransformOptions>\n  ): GeojsonMultiLineString\n  transformToResourceAsGeojson(\n    input: MultiPolygon | GeojsonMultiPolygon,\n    options?: Partial<TransformOptions>\n  ): GeojsonMultiPolygon\n  /**\n   * Transforms a Geometry or a GeoJSON geometry backward, to a GeoJSON geometry\n   * @param {Geometry | GeojsonGeometry} input - Input to transform\n   * @param {Partial<TransformOptions>} [options] - Transform options\n   * @returns {GeojsonGeometry} Backward transform of input, as a GeoJSON geometry\n   * @type {{\n   * (input:Point | GeojsonPoint) => GeojsonPoint;\n   * (input:LineString | GeojsonLineString) => GeojsonLineString;\n   * (input:Polygon | GeojsonPolygon) => GeojsonPolygon;\n   * (input:MultiPoMultiint | GeojsonMultiPoint) => GeojsonMultiPoint;\n   * (input:MultiLineString | GeojsonMultiLineString) => GeojsonMultiLineString;\n   * (input:MultiPolygon | GeojsonMultiPolygon) => GeojsonMultiPolygon;\n   * }}\n   */\n  transformToResourceAsGeojson(\n    input: Geometry | GeojsonGeometry,\n    options?: Partial<TransformOptions>\n  ): GeojsonGeometry {\n    if (!mergeOptions(options, this.options).inputIsMultiGeometry) {\n      if (isPoint(input)) {\n        return this.transformBackwardAsGeojson(input as Point, options)\n      } else if (isGeojsonPoint(input)) {\n        return this.transformBackwardAsGeojson(input as GeojsonPoint, options)\n      } else if (isLineString(input)) {\n        return this.transformBackwardAsGeojson(input as LineString, options)\n      } else if (isGeojsonLineString(input)) {\n        return this.transformBackwardAsGeojson(\n          input as GeojsonLineString,\n          options\n        )\n      } else if (isPolygon(input)) {\n        return this.transformBackwardAsGeojson(input as Polygon, options)\n      } else if (isGeojsonPolygon(input)) {\n        return this.transformBackwardAsGeojson(input as GeojsonPolygon, options)\n      }\n    }\n    if (options) {\n      options.inputIsMultiGeometry = false // false for piecewise single geometries\n    }\n    if (isMultiPoint(input)) {\n      return this.transformBackwardAsGeojson(input as MultiPoint, options)\n    } else if (isGeojsonMultiPoint(input)) {\n      return this.transformBackwardAsGeojson(\n        input as GeojsonMultiPoint,\n        options\n      )\n    } else if (isMultiLineString(input)) {\n      return this.transformBackwardAsGeojson(input as MultiLineString, options)\n    } else if (isGeojsonMultiLineString(input)) {\n      return this.transformBackwardAsGeojson(\n        input as GeojsonMultiLineString,\n        options\n      )\n    } else if (isMultiPolygon(input)) {\n      return this.transformBackwardAsGeojson(input as MultiPolygon, options)\n    } else if (isGeojsonMultiPolygon(input)) {\n      return this.transformBackwardAsGeojson(\n        input as GeojsonMultiPolygon,\n        options\n      )\n    } else {\n      throw new Error('Input type not supported')\n    }\n  }\n\n  // Shortcuts for SVG <> GeoJSON\n\n  /**\n   * Transforms a SVG geometry forward to a GeoJSON geometry\n   *\n   * Note: Multi-geometries are not supported\n   * @param {SvgGeometry} geometry - SVG geometry to transform\n   * @param {Partial<TransformOptions>} [options] - Transform options\n   * @returns {GeojsonGeometry} Forward transform of input, as a GeoJSON geometry\n   */\n  transformSvgToGeojson(\n    geometry: SvgGeometry,\n    options?: Partial<TransformOptions>\n  ): GeojsonGeometry {\n    if (geometry.type === 'circle') {\n      return this.transformForwardAsGeojson(geometry.coordinates)\n    } else if (geometry.type === 'line') {\n      return this.transformForwardAsGeojson(geometry.coordinates, options)\n    } else if (geometry.type === 'polyline') {\n      return this.transformForwardAsGeojson(geometry.coordinates, options)\n    } else if (geometry.type === 'rect') {\n      return this.transformForwardAsGeojson([geometry.coordinates], options)\n    } else if (geometry.type === 'polygon') {\n      return this.transformForwardAsGeojson([geometry.coordinates], options)\n    } else {\n      throw new Error(`Unsupported SVG geometry`)\n    }\n  }\n\n  /**\n   * Transforms a SVG string forward to a GeoJSON FeatureCollection\n   *\n   * Note: Multi-geometries are not supported\n   * @param {string} svg - SVG string to transform\n   * @param {Partial<TransformOptions>} [options] - Transform options\n   * @returns {GeojsonFeatureCollection} Forward transform of input, as a GeoJSON FeatureCollection\n   */\n  transformSvgStringToGeojsonFeatureCollection(\n    svg: string,\n    options?: Partial<TransformOptions>\n  ): GeojsonFeatureCollection {\n    const geojsonGeometries = []\n    for (const svgGeometry of stringToSvgGeometriesGenerator(svg)) {\n      const geojsonGeometry = this.transformSvgToGeojson(svgGeometry, options)\n      geojsonGeometries.push(geojsonGeometry)\n    }\n    return geometriesToFeatureCollection(geojsonGeometries)\n  }\n\n  /**\n   * Transforms a GeoJSON geometry backward to a SVG geometry\n   *\n   * Note: Multi-geometries are not supported\n   * @param {GeojsonGeometry} geometry - GeoJSON geometry to transform\n   * @param {Partial<TransformOptions>} [options] - Transform options\n   * @returns {SvgGeometry} Backward transform of input, as SVG geometry\n   */\n  transformGeojsonToSvg(\n    geometry: GeojsonGeometry,\n    options?: Partial<TransformOptions>\n  ): SvgGeometry {\n    if (geometry.type === 'Point') {\n      return {\n        type: 'circle',\n        coordinates: this.transformBackward(geometry)\n      }\n    } else if (geometry.type === 'LineString') {\n      return {\n        type: 'polyline',\n        coordinates: this.transformBackward(geometry, options)\n      }\n    } else if (geometry.type === 'Polygon') {\n      return {\n        type: 'polygon',\n        coordinates: this.transformBackward(geometry, options)[0]\n      }\n    } else {\n      throw new Error(`Unsupported GeoJSON geometry`)\n    }\n  }\n\n  /**\n   * Transforms a GeoJSON FeatureCollection backward to a SVG string\n   *\n   * Note: Multi-geometries are not supported\n   * @param {GeojsonFeatureCollection} geojson - GeoJSON FeatureCollection to transform\n   * @param {Partial<TransformOptions>} [options] - Transform options\n   * @returns {string} Backward transform of input, as SVG string\n   */\n  transformGeojsonFeatureCollectionToSvgString(\n    geojson: GeojsonFeatureCollection,\n    options?: Partial<TransformOptions>\n  ): string {\n    const svgGeometries = []\n    for (const geojsonGeometry of featureCollectionToGeometries(geojson)) {\n      const svgGeometry = this.transformGeojsonToSvg(geojsonGeometry, options)\n      svgGeometries.push(svgGeometry)\n    }\n\n    return svgGeometriesToSvgString(svgGeometries)\n  }\n\n  private assureEqualHandedness(point: Point): Point {\n    return this.options?.differentHandedness ? flipY(point) : point\n  }\n\n  private computeTransformation(\n    sourcePoints: Point[],\n    destinationPoints: Point[]\n  ): Transformation {\n    if (this.type === 'straight') {\n      return new Straight(sourcePoints, destinationPoints)\n    } else if (this.type === 'helmert') {\n      return new Helmert(sourcePoints, destinationPoints)\n    } else if (this.type === 'polynomial1' || this.type === 'polynomial') {\n      return new Polynomial(sourcePoints, destinationPoints)\n    } else if (this.type === 'polynomial2') {\n      return new Polynomial(sourcePoints, destinationPoints, 2)\n    } else if (this.type === 'polynomial3') {\n      return new Polynomial(sourcePoints, destinationPoints, 3)\n    } else if (this.type === 'projective') {\n      return new Projective(sourcePoints, destinationPoints)\n    } else if (this.type === 'thinPlateSpline') {\n      return new RBF(\n        sourcePoints,\n        destinationPoints,\n        thinPlateKernel,\n        euclideanNorm\n      )\n    } else {\n      throw new Error(`Unsupported transformation type: ${this.type}`)\n    }\n  }\n}\n","import { Point } from '@allmaps/types'\n\nimport { DistortionMeasure } from './shared/types'\n\nexport const supportedDistortionMeasures = [\n  'log2sigma',\n  'twoOmega',\n  'airyKavr',\n  'signDetJ',\n  'thetaa'\n]\n\n/**\n * Compute distortion from partial derivatives\n *\n * @export\n * @param {Point} partialDerivativeX - the partial derivative to 'x' of the transformation, evaluated at a set point\n * @param {Point} partialDerivativeY - the partial derivative to 'x' of the transformation, evaluated at a set point\n * @param {DistortionMeasure} [distortionMeasure] - the requested distortion measure, or undefined to return 0\n * @param {number} [referenceScale] - the reference area scaling (sigma) to take into account, e.g. computed via a helmert transform\n * @returns {number} - the distortion measure at the set point\n */\nexport function computeDistortionFromPartialDerivatives(\n  partialDerivativeX: Point,\n  partialDerivativeY: Point,\n  distortionMeasure?: DistortionMeasure,\n  referenceScale = 1\n): number {\n  if (!distortionMeasure) {\n    return 0\n  }\n  const E = partialDerivativeX[0] ** 2 + partialDerivativeX[1] ** 2\n  const G = partialDerivativeY[0] ** 2 + partialDerivativeY[1] ** 2\n  const F =\n    partialDerivativeX[0] * partialDerivativeY[0] +\n    partialDerivativeX[1] * partialDerivativeY[1]\n  const a = Math.sqrt(0.5 * (E + G + Math.sqrt((E - G) ** 2 + 4 * F ** 2)))\n  const b = Math.sqrt(0.5 * (E + G - Math.sqrt((E - G) ** 2 + 4 * F ** 2)))\n  const thetaxp = Math.atan(partialDerivativeX[1] / partialDerivativeX[0])\n  const alphap =\n    Math.sign(-F) * Math.asin(Math.sqrt((1 - a ** 2 / E) / (1 - (a / b) ** 2)))\n  switch (supportedDistortionMeasures.indexOf(distortionMeasure)) {\n    case 0:\n      return (Math.log(a * b) - 2 * Math.log(referenceScale)) / Math.log(2)\n    case 1:\n      return 2 * Math.asin((a - b) / (a + b))\n    case 2:\n      return (\n        0.5 *\n        (Math.log(a / referenceScale) ** 2 + Math.log(b / referenceScale) ** 2)\n      )\n    case 3:\n      return Math.sign(\n        partialDerivativeX[0] * partialDerivativeY[1] -\n          partialDerivativeX[1] * partialDerivativeY[0]\n      )\n    case 4:\n      return thetaxp - alphap\n    default:\n      throw new Error('Distortion ' + distortionMeasure + ' not supported')\n  }\n}\n"],"names":["toString","isAnyArray","value","tag","max","input","options","_options$fromIndex","fromIndex","_options$toIndex","toIndex","maxValue","i","min","minValue","rescale","output","currentMin","currentMax","_options$min","_options$max","factor","matrix","require$$0","require$$1","indent","indentData","inspectMatrix","inspectMatrixWithOptions","maxRows","maxColumns","maxNumSize","padMinus","inspectData","rows","columns","maxI","maxJ","result","loop","j","line","formatNumber","num","formatNumber2","len","str","fix","exp","installMathOperations","AbstractMatrix","Matrix","arg0","checkRowIndex","index","outer","checkColumnIndex","checkRowVector","vector","checkColumnVector","checkRowIndices","rowIndices","checkColumnIndices","columnIndices","checkRange","startRow","endRow","startColumn","endColumn","checkNumber","newArray","length","array","name","checkNonEmpty","sumByRow","sum","sumByColumn","sumAll","v","productByRow","productByColumn","productAll","varianceByRow","unbiased","mean","cols","variance","sum1","sum2","x","varianceByColumn","varianceAll","size","centerByRow","centerByColumn","centerAll","getScaleByRow","scale","scaleByRow","getScaleByColumn","scaleByColumn","getScaleAll","divider","scaleAll","newRows","newColumns","newData","newMatrix","row","column","random","interval","data","l","matrix1","matrix2","callback","copy","previousColumn","isEchelonForm","checked","isReducedEchelonForm","k","h","iMax","tmp","m","n","p","pivot","row1","row2","temp","column1","column2","by","idx","diag","type","vector2","vector1","dot","other","Bcolj","s","a11","b11","a12","b12","a21","b21","a22","b22","m1","m2","m3","m4","m5","m6","m7","c00","c01","c10","c11","a00","a01","a02","a10","a20","b00","b01","b02","b10","b20","m8","m9","m10","m11","m12","m13","m14","m15","m16","m17","m18","m19","m20","m21","m22","m23","c02","c12","c20","c21","c22","y","r1","c1","r2","c2","embed","mat","r","c","resultat","blockMult","a","b","halfRows","halfCols","middle","first","last","q","AxI","IxB","compareFunction","compareNumbers","indices","rowIndex","columnIndex","trace","from","to","center","col","isArrayOfNumbers","element","#initData","nRows","nColumns","arrayData","newRow","SymmetricMatrix","#matrix","diagonalSize","mask","sidesToRemove","passthroughs","sideIndex","compact","compactSize","DistanceMatrix","sideSize","compactLength","BaseView","MatrixColumnView","MatrixColumnSelectionView","MatrixFlipColumnView","MatrixFlipRowView","MatrixRowView","MatrixRowSelectionView","MatrixSelectionView","MatrixSubView","MatrixTransposeView","WrapperMatrix1D","WrapperMatrix2D","wrap","LuDecomposition","lu","pivotVector","pivotSign","t","LUcolj","kmax","count","X","determinant","hypotenuse","QrDecomposition","qr","rdiag","nrm","SingularValueDecomposition$1","computeLeftSingularVectors","computeRightSingularVectors","autoTranspose","wantu","wantv","swapped","aux","nu","ni","U","V","e","work","si","nct","nrt","mrc","pp","eps","kase","alpha","ks","f","cs","sn","sp","spm1","epm1","sk","ek","shift","g","Y","scols","Ls","VL","vrows","urows","VLU","vcols","ucols","tol","ii","inverse","useSVD","SingularValueDecomposition","solve","leftHandSide","rightHandSide","d","subMatrix0","subMatrix1","subMatrix2","xrange","exception","range","dependenciesOneRow","error","thresholdValue","thresholdError","returnArray","linearDependencies","results","Abis","pseudoInverse","threshold","svdSolution","covariance","xMatrix","yMatrix","yIsSame","cov","correlation","sdx","sdy","corr","EigenvalueDecomposition","assumeSymmetric","isSymmetric","tred2","tql2","H","ort","orthes","hqr2","hh","dl1","c3","el1","s2","tst1","low","high","nn","exshift","norm","z","iter","w","ra","sa","vr","vi","notlast","cdivres","cdiv","xr","xi","yr","yi","CholeskyDecomposition","dimension","positiveDefinite","B","nipals","scaleScores","maxIterations","terminationCriteria","u","diff","tOld","counter","xResidual","residual","yResidual","Matrix_1","SingularValueDecomposition_1","_default","inverse_1","pseudoInverse_1","matrix.Matrix","matrix.SingularValueDecomposition","matrix.default","matrix.inverse","matrix.pseudoInverse","Transformation","sourcePoints","destinationPoints","pointCountMinimum","newSourcePoint","evaluationType","Helmert","destinationPointsMatrix","helmertCoefsMatrix","pseudoInverseHelmertCoefsMatrix","_newSourcePoint","Straight","helmertTransformation","point","coordinate","coord","Polynomial","order","pointsCountMinimum","destinationPointsMatrices","polynomialCoefsMatrix","pseudoInversePolynomialCoefsMatrix","newDestinationPoint","newDestinationPointPartDerX","newDestinationPointPartDerY","Projective","projectiveCoefsMatrix","svd","num1","num2","RBF","kernelFunction","normFunction","epsilon","kernelsMatrix","affineCoefsMatrix","kernelsAndAffineCoefsMatrix","inverseKernelsAndAffineCoefsMatrix","newDistances","sourcePoint","dist","thinPlateKernel","euclideanNorm","point0","point1","sub","mergeOptions","optionsFromTransform","optionsFromGCPTransformer","optionsFromDataFormat","transformLineStringForwardToLineString","transformer","lineString","conformLineString","points","segments","pointsToSegments","extendedSegments","recursivelyAddMidpointsWithDestinationMidPointFromTransform","segmentsToPoints","transformLineStringBackwardToLineString","extendendSegements","recursivelyAddMidpointsWithSourceMidPointFromTransform","transformRingForwardToRing","ring","conformRing","transformRingBackwardToRing","transformPolygonForwardToPolygon","polygon","transformPolygonBackwardToPolygon","close","segmentCount","segment","addMidpointWithDestinationMidPointFromTransform","addMidpointWithSourceMidPointFromTransform","depth","sourceMidPoint","point2","getWorldMidpoint","midPoint","destinationMidPoint","destinationMidPointFromTransform","destinationDistanceFunction","getWorldDistance","distance","segmentDestinationDistance","newSegmentMidpoint","sourceMidPointFromTransform","sourceDistanceFunction","segmentSourceDistance","GcpTransformer","gcps","gcp","isPoint","isGeojsonPoint","convertGeojsonPointToPoint","isLineString","isGeojsonLineString","convertGeojsonLineStringToLineString","isPolygon","isGeojsonPolygon","convertGeojsonPolygonToPolygon","isMultiPoint","isGeojsonMultiPoint","expandGeojsonMultiPointToGeojsonPointArray","isMultiLineString","isGeojsonMultiLineString","expandGeojsonMultiLineStringToGeojsonLineStringArray","isMultiPolygon","isGeojsonMultiPolygon","expandGeojsonMultiPolygonToGeojsonPolygonArray","convertPointToGeojsonPoint","convertLineStringToGeojsonLineString","convertPolygonToGeojsonPolygon","joinGeojsonPointArrayToGeojsonMultiPoint","joinGeojsonLineStringArrayToGeojsonMultiLineString","joinGeojsonPolygonArrayToGeojsonMultiPolygon","geometry","svg","geojsonGeometries","svgGeometry","stringToSvgGeometriesGenerator","geojsonGeometry","geometriesToFeatureCollection","geojson","svgGeometries","featureCollectionToGeometries","svgGeometriesToSvgString","flipY","supportedDistortionMeasures","computeDistortionFromPartialDerivatives","partialDerivativeX","partialDerivativeY","distortionMeasure","referenceScale","E","G","F","thetaxp","alphap"],"mappings":"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"}},
    {"offset": {"line": 3335, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}