{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/models/user.js"],"sourcesContent":["import { Schema, model, models } from \"mongoose\";\n\nconst UserSchema = new Schema({\n    email: {\n        type: String,\n        unique: [true, 'Email already exists!'],\n        required: [true, 'Email is required!']\n    },\n    username: {\n        type: String,\n        required: [true, 'Username is required!'],\n        match: [/^(?=.{8,20}$)(?![_.])(?!.*[_.]{2})[a-zA-Z0-9._]+(?<![_.])$/, \"Username invalid, it should contain 8-20 alphanumeric letters and be unique!\"]\n    },\n    image: {\n        type: String\n    }\n});\n\nconst User = models.User || model(\"User\", UserSchema);\n\nexport default User;"],"names":[],"mappings":";;;;;;AAEA,MAAM,aAAa,IAAI,2CAAA,CAAA,SAAM,CAAC;IAC1B,OAAO;QACH,MAAM;QACN,QAAQ;YAAC;YAAM;SAAwB;QACvC,UAAU;YAAC;YAAM;SAAqB;IAC1C;IACA,UAAU;QACN,MAAM;QACN,UAAU;YAAC;YAAM;SAAwB;QACzC,OAAO;YAAC;YAA8D;SAA+E;IACzJ;IACA,OAAO;QACH,MAAM;IACV;AACJ;AAEA,MAAM,OAAO,2CAAA,CAAA,SAAM,CAAC,IAAI,IAAI,CAAA,GAAA,2CAAA,CAAA,QAAK,AAAD,EAAE,QAAQ;uCAE3B"}},
    {"offset": {"line": 40, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 45, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/utils/database.js"],"sourcesContent":["// import mongoose from 'mongoose';\n\n// const MONGODB_URI = process.env.MONGODB_URI;\n\n// if (!MONGODB_URI) {\n//   throw new Error(\n//     'Please define the MONGODB_URI environment variable inside .env.local'\n//   );\n// }\n\n// let cached = global.mongoose;\n\n// if (!cached) {\n//   cached = global.mongoose = { conn: null, promise: null };\n// }\n\n// const connectToDatabase = async () => {\n//   if (cached.conn) {\n//     return cached.conn;\n//   }\n\n//   if (!cached.promise) {\n//     const opts = {\n//       dbName: 'georef'\n//     };\n\n//     cached.promise = mongoose.connect(MONGODB_URI, opts).then((mongoose) => {\n//       return mongoose;\n//     });\n//   }\n//   cached.conn = await cached.promise;\n//   return cached.conn;\n// }\n\n// export default connectToDatabase;\n\nimport mongoose from 'mongoose';\n\n//let connection = null;\n\nlet cached = global.mongoose;\n\nif (!cached) {\n  cached = global.mongoose = { conn: null, promise: null };\n}\n\nconst connectToDatabase = async () => {\n    mongoose.set('strictQuery', true);\n    //mongoose.set('timestamps', true);\n\n    if (cached.conn) {\n      return cached.conn;\n    }\n  \n    if (!cached.promise) {\n      const opts = {\n        bufferCommands: false,\n      };\n  \n      cached.promise = mongoose.connect(process.env.MONGODB_URI, {\n                dbName: 'georef'\n            }).then((mongoose) => {\n        return mongoose;\n      });\n    }\n    cached.conn = await cached.promise;\n    return cached.conn;\n\n    // try {\n    //     connection = await mongoose.createConnection(process.env.MONGODB_URI, {\n    //         dbName: 'georef'\n    //     }).asPromise();\n\n    //     if (connection.readyState == 1) {\n    //       console.log('db connection established!');\n    //       return connection;\n    //     }\n    //     return null;\n    // } catch (error) {\n    //     console.log(error);\n    // }\n}\n\nexport default connectToDatabase;"],"names":[],"mappings":"AAAA,mCAAmC;AAEnC,+CAA+C;AAE/C,sBAAsB;AACtB,qBAAqB;AACrB,6EAA6E;AAC7E,OAAO;AACP,IAAI;AAEJ,gCAAgC;AAEhC,iBAAiB;AACjB,8DAA8D;AAC9D,IAAI;AAEJ,0CAA0C;AAC1C,uBAAuB;AACvB,0BAA0B;AAC1B,MAAM;AAEN,2BAA2B;AAC3B,qBAAqB;AACrB,yBAAyB;AACzB,SAAS;AAET,gFAAgF;AAChF,yBAAyB;AACzB,UAAU;AACV,MAAM;AACN,wCAAwC;AACxC,wBAAwB;AACxB,IAAI;AAEJ,oCAAoC;;;;;;;AAIpC,wBAAwB;AAExB,IAAI,SAAS,OAAO,QAAQ;AAE5B,IAAI,CAAC,QAAQ;IACX,SAAS,OAAO,QAAQ,GAAG;QAAE,MAAM;QAAM,SAAS;IAAK;AACzD;AAEA,MAAM,oBAAoB;IACtB,2CAAA,CAAA,UAAQ,CAAC,GAAG,CAAC,eAAe;IAC5B,mCAAmC;IAEnC,IAAI,OAAO,IAAI,EAAE;QACf,OAAO,OAAO,IAAI;IACpB;IAEA,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,MAAM,OAAO;YACX,gBAAgB;QAClB;QAEA,OAAO,OAAO,GAAG,2CAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,QAAQ,GAAG,CAAC,WAAW,EAAE;YACjD,QAAQ;QACZ,GAAG,IAAI,CAAC,CAAC;YACb,OAAO;QACT;IACF;IACA,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IAClC,OAAO,OAAO,IAAI;AAElB,QAAQ;AACR,8EAA8E;AAC9E,2BAA2B;AAC3B,sBAAsB;AAEtB,wCAAwC;AACxC,mDAAmD;AACnD,2BAA2B;AAC3B,QAAQ;AACR,mBAAmB;AACnB,oBAAoB;AACpB,0BAA0B;AAC1B,IAAI;AACR;uCAEe"}},
    {"offset": {"line": 118, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 123, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/api/auth/[...nextauth]/route.js"],"sourcesContent":["import NextAuth from 'next-auth';\nimport GoogleProvider from 'next-auth/providers/google';\n\nimport User from '@models/user';\nimport connectToDatabase  from '@utils/database';\n\n// console.log({\n//     clientId: process.env.GOOGLE_ID,\n//     clientSecret: process.env.GOOGLE_CLIENT_SECRET\n// })\n\nconst handler = NextAuth({\n    providers: [\n        GoogleProvider({\n            clientId: process.env.GOOGLE_ID,\n            clientSecret: process.env.GOOGLE_CLIENT_SECRET\n        })\n    ],\n    callbacks: {\n        async session({ session }) {\n            await connectToDatabase();\n            \n            const sessionUser = await User.findOne({\n                email: session.user.email\n            })\n    \n            session.user.id = sessionUser._id.toString();\n    \n            return session;\n        },\n        async signIn({ profile }) {\n            try {\n                await connectToDatabase();\n    \n                // check if a user already exists\n                const userExists = await User.findOne({\n                    email: profile.email\n                });\n                // if not, create a new user\n                if (!userExists) {\n                    await User.create({\n                        email: profile.email,\n                        username: profile.name.replace(\" \", \"\").toLowerCase(),\n                        image: profile.picture\n                    })\n                }\n    \n                return true;\n            } catch (error) {\n                console.log(error);\n                return false;\n            }\n        }\n    }\n    \n})\n\nexport { handler as GET, handler as POST };"],"names":[],"mappings":";;;;;;;;;;;;;AAMA,gBAAgB;AAChB,uCAAuC;AACvC,qDAAqD;AACrD,KAAK;AAEL,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE;IACrB,WAAW;QACP,CAAA,GAAA,qJAAA,CAAA,UAAc,AAAD,EAAE;YACX,UAAU,QAAQ,GAAG,CAAC,SAAS;YAC/B,cAAc,QAAQ,GAAG,CAAC,oBAAoB;QAClD;KACH;IACD,WAAW;QACP,MAAM,SAAQ,EAAE,OAAO,EAAE;YACrB,MAAM,CAAA,GAAA,mHAAA,CAAA,UAAiB,AAAD;YAEtB,MAAM,cAAc,MAAM,gHAAA,CAAA,UAAI,CAAC,OAAO,CAAC;gBACnC,OAAO,QAAQ,IAAI,CAAC,KAAK;YAC7B;YAEA,QAAQ,IAAI,CAAC,EAAE,GAAG,YAAY,GAAG,CAAC,QAAQ;YAE1C,OAAO;QACX;QACA,MAAM,QAAO,EAAE,OAAO,EAAE;YACpB,IAAI;gBACA,MAAM,CAAA,GAAA,mHAAA,CAAA,UAAiB,AAAD;gBAEtB,iCAAiC;gBACjC,MAAM,aAAa,MAAM,gHAAA,CAAA,UAAI,CAAC,OAAO,CAAC;oBAClC,OAAO,QAAQ,KAAK;gBACxB;gBACA,4BAA4B;gBAC5B,IAAI,CAAC,YAAY;oBACb,MAAM,gHAAA,CAAA,UAAI,CAAC,MAAM,CAAC;wBACd,OAAO,QAAQ,KAAK;wBACpB,UAAU,QAAQ,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,WAAW;wBACnD,OAAO,QAAQ,OAAO;oBAC1B;gBACJ;gBAEA,OAAO;YACX,EAAE,OAAO,OAAO;gBACZ,QAAQ,GAAG,CAAC;gBACZ,OAAO;YACX;QACJ;IACJ;AAEJ"}},
    {"offset": {"line": 180, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}