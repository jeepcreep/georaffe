{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/utils/database.js"],"sourcesContent":["// import mongoose from 'mongoose';\n\n// const MONGODB_URI = process.env.MONGODB_URI;\n\n// if (!MONGODB_URI) {\n//   throw new Error(\n//     'Please define the MONGODB_URI environment variable inside .env.local'\n//   );\n// }\n\n// let cached = global.mongoose;\n\n// if (!cached) {\n//   cached = global.mongoose = { conn: null, promise: null };\n// }\n\n// const connectToDatabase = async () => {\n//   if (cached.conn) {\n//     return cached.conn;\n//   }\n\n//   if (!cached.promise) {\n//     const opts = {\n//       dbName: 'georef'\n//     };\n\n//     cached.promise = mongoose.connect(MONGODB_URI, opts).then((mongoose) => {\n//       return mongoose;\n//     });\n//   }\n//   cached.conn = await cached.promise;\n//   return cached.conn;\n// }\n\n// export default connectToDatabase;\n\nimport mongoose from 'mongoose';\n\n//let connection = null;\n\nlet cached = global.mongoose;\n\nif (!cached) {\n  cached = global.mongoose = { conn: null, promise: null };\n}\n\nconst connectToDatabase = async () => {\n    mongoose.set('strictQuery', true);\n    //mongoose.set('timestamps', true);\n\n    if (cached.conn) {\n      return cached.conn;\n    }\n  \n    if (!cached.promise) {\n      const opts = {\n        bufferCommands: false,\n      };\n  \n      cached.promise = mongoose.connect(process.env.MONGODB_URI, {\n                dbName: 'georef'\n            }).then((mongoose) => {\n        return mongoose;\n      });\n    }\n    cached.conn = await cached.promise;\n    return cached.conn;\n\n    // try {\n    //     connection = await mongoose.createConnection(process.env.MONGODB_URI, {\n    //         dbName: 'georef'\n    //     }).asPromise();\n\n    //     if (connection.readyState == 1) {\n    //       console.log('db connection established!');\n    //       return connection;\n    //     }\n    //     return null;\n    // } catch (error) {\n    //     console.log(error);\n    // }\n}\n\nexport default connectToDatabase;"],"names":[],"mappings":"AAAA,mCAAmC;AAEnC,+CAA+C;AAE/C,sBAAsB;AACtB,qBAAqB;AACrB,6EAA6E;AAC7E,OAAO;AACP,IAAI;AAEJ,gCAAgC;AAEhC,iBAAiB;AACjB,8DAA8D;AAC9D,IAAI;AAEJ,0CAA0C;AAC1C,uBAAuB;AACvB,0BAA0B;AAC1B,MAAM;AAEN,2BAA2B;AAC3B,qBAAqB;AACrB,yBAAyB;AACzB,SAAS;AAET,gFAAgF;AAChF,yBAAyB;AACzB,UAAU;AACV,MAAM;AACN,wCAAwC;AACxC,wBAAwB;AACxB,IAAI;AAEJ,oCAAoC;;;;;;;AAIpC,wBAAwB;AAExB,IAAI,SAAS,OAAO,QAAQ;AAE5B,IAAI,CAAC,QAAQ;IACX,SAAS,OAAO,QAAQ,GAAG;QAAE,MAAM;QAAM,SAAS;IAAK;AACzD;AAEA,MAAM,oBAAoB;IACtB,2CAAA,CAAA,UAAQ,CAAC,GAAG,CAAC,eAAe;IAC5B,mCAAmC;IAEnC,IAAI,OAAO,IAAI,EAAE;QACf,OAAO,OAAO,IAAI;IACpB;IAEA,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,MAAM,OAAO;YACX,gBAAgB;QAClB;QAEA,OAAO,OAAO,GAAG,2CAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,QAAQ,GAAG,CAAC,WAAW,EAAE;YACjD,QAAQ;QACZ,GAAG,IAAI,CAAC,CAAC;YACb,OAAO;QACT;IACF;IACA,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IAClC,OAAO,OAAO,IAAI;AAElB,QAAQ;AACR,8EAA8E;AAC9E,2BAA2B;AAC3B,sBAAsB;AAEtB,wCAAwC;AACxC,mDAAmD;AACnD,2BAA2B;AAC3B,QAAQ;AACR,mBAAmB;AACnB,oBAAoB;AACpB,0BAA0B;AAC1B,IAAI;AACR;uCAEe"}},
    {"offset": {"line": 78, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 83, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/utils/enums.jsx"],"sourcesContent":["export const MapStatus = {\n    New: 'new',\n    Tiling: 'tiling',\n    TilingDone: 'tilingDone',\n    ErrorWhileTiling: 'errorWhileTiling',\n    SyncingWithStorage: 'syncingWithStorage',\n    Synced: 'synced',\n    Uploading: 'uploading',\n    Ready: 'ready'\n}\n\nexport const CurrentControlPointStatus = {\n    FromPointSelected: 'fromPointSelected',\n    ToPointSelected: 'toPointSelected',\n    FreeForSelection: 'freeForSelection',\n    ReadyForSaving: 'readyForSaving',\n    EditExisting: 'editExisting'\n}\n\nexport const ControlPointSelection = {\n    From: 'from',\n    To: 'to',\n    Both: 'both'\n}\n\nexport const TransformationType = {\n    Polynomial: 'polynomial',\n    Polynomial2: 'polynomial2',\n    Polynomial3: 'polynomial3',\n    ThinPlateSpline: 'thinPlateSpline',\n    Projective: 'projective'\n}\n\nexport const TransformationTypes = [\n    TransformationType.Polynomial,\n    TransformationType.Polynomial2,\n    TransformationType.Polynomial3,\n    TransformationType.ThinPlateSpline,\n    TransformationType.Projective\n]\n\nexport const TransformationTypeLabels = {\n    'polynomial' : '1st order Polynomial',\n    'polynomial2' : '2nd order Polynomial',\n    'polynomial3' : '3rd order Polynomial',\n    'thinPlateSpline' : 'Thin plate spline',\n    'projective' : 'Projective'\n}\n\nexport const TransformationTypesMinGCP = {\n    'polynomial' : 3,\n    'polynomial2' : 6,\n    'polynomial3' : 10,\n    'thinPlateSpline' : 3,\n    'projective' : 4\n}"],"names":[],"mappings":";;;;;;;;;AAAO,MAAM,YAAY;IACrB,KAAK;IACL,QAAQ;IACR,YAAY;IACZ,kBAAkB;IAClB,oBAAoB;IACpB,QAAQ;IACR,WAAW;IACX,OAAO;AACX;AAEO,MAAM,4BAA4B;IACrC,mBAAmB;IACnB,iBAAiB;IACjB,kBAAkB;IAClB,gBAAgB;IAChB,cAAc;AAClB;AAEO,MAAM,wBAAwB;IACjC,MAAM;IACN,IAAI;IACJ,MAAM;AACV;AAEO,MAAM,qBAAqB;IAC9B,YAAY;IACZ,aAAa;IACb,aAAa;IACb,iBAAiB;IACjB,YAAY;AAChB;AAEO,MAAM,sBAAsB;IAC/B,mBAAmB,UAAU;IAC7B,mBAAmB,WAAW;IAC9B,mBAAmB,WAAW;IAC9B,mBAAmB,eAAe;IAClC,mBAAmB,UAAU;CAChC;AAEM,MAAM,2BAA2B;IACpC,cAAe;IACf,eAAgB;IAChB,eAAgB;IAChB,mBAAoB;IACpB,cAAe;AACnB;AAEO,MAAM,4BAA4B;IACrC,cAAe;IACf,eAAgB;IAChB,eAAgB;IAChB,mBAAoB;IACpB,cAAe;AACnB"}},
    {"offset": {"line": 142, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 147, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/models/map.js"],"sourcesContent":["import { Schema, model, models } from 'mongoose';\nimport { MapStatus } from '@utils/enums';\n\nconst ControlPointSchema = new Schema({\n    fromPoint: {\n        type: [Number],\n        required: [true, 'fromPoint (virtual lat and long) is required.']\n    },\n    toPoint: {\n        type: [Number],\n        required: [true, 'toPoint (long and lat within OSM) is required.']\n    },\n    rasterImageCoords: {\n        type: [Number],\n        required: [true, 'rasterImageCoords (x, y coords of raster image) is required.']\n    }\n}, { timestamps: true, })\n\nControlPointSchema.pre('save', (next) => {\n    console.log('pre save for control point : ' + this)\n    next();\n})\n\n// export const ControlPoint = models.ControlPoint || model('ControlPoint', ControlPointSchema)\n\nconst MapSchema = new Schema({\n    user: {\n        type: Schema.Types.ObjectId,\n        ref: \"User\"\n    },\n    title: {\n        type: String,\n        required: [true, 'title is required.']\n    },\n    status: {\n        type: String,\n        default: MapStatus.New\n    },\n    fileId: {\n        type: String\n    },\n    width: {\n        type: Number\n    },\n    height: {\n        type: Number\n    },\n    maxZoomLevel: {\n        type: Number,\n        default: 5\n    },\n    controlPoints: [ControlPointSchema],\n}, { timestamps: true, })\n\nconst Map = models.Map || model(\"Map\", MapSchema);\n\nexport default Map;"],"names":[],"mappings":";;;;;;;;AAGA,MAAM,qBAAqB,IAAI,2CAAA,CAAA,SAAM,CAAC;IAClC,WAAW;QACP,MAAM;YAAC;SAAO;QACd,UAAU;YAAC;YAAM;SAAgD;IACrE;IACA,SAAS;QACL,MAAM;YAAC;SAAO;QACd,UAAU;YAAC;YAAM;SAAiD;IACtE;IACA,mBAAmB;QACf,MAAM;YAAC;SAAO;QACd,UAAU;YAAC;YAAM;SAA+D;IACpF;AACJ,GAAG;IAAE,YAAY;AAAM;AAEvB,mBAAmB,GAAG,CAAC,QAAQ,CAAC;IAC5B,QAAQ,GAAG,CAAC,kCAAkC,IAAI;IAClD;AACJ;AAEA,+FAA+F;AAE/F,MAAM,YAAY,IAAI,2CAAA,CAAA,SAAM,CAAC;IACzB,MAAM;QACF,MAAM,2CAAA,CAAA,SAAM,CAAC,KAAK,CAAC,QAAQ;QAC3B,KAAK;IACT;IACA,OAAO;QACH,MAAM;QACN,UAAU;YAAC;YAAM;SAAqB;IAC1C;IACA,QAAQ;QACJ,MAAM;QACN,SAAS,iHAAA,CAAA,YAAS,CAAC,GAAG;IAC1B;IACA,QAAQ;QACJ,MAAM;IACV;IACA,OAAO;QACH,MAAM;IACV;IACA,QAAQ;QACJ,MAAM;IACV;IACA,cAAc;QACV,MAAM;QACN,SAAS;IACb;IACA,eAAe;QAAC;KAAmB;AACvC,GAAG;IAAE,YAAY;AAAM;AAEvB,MAAM,MAAM,2CAAA,CAAA,SAAM,CAAC,GAAG,IAAI,CAAA,GAAA,2CAAA,CAAA,QAAK,AAAD,EAAE,OAAO;uCAExB"}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 233, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/utils/s3handler.jsx"],"sourcesContent":["import { S3Client, PutObjectCommand, DeleteObjectCommand } from '@aws-sdk/client-s3';\nimport connectToDatabase  from '@utils/database';\n\nimport Map from \"@models/map\";\n\nimport { MapStatus } from '@utils/enums';\n\nimport { poll } from 'poll';\nimport { promises as fs } from 'fs';\nconst path = require('path');\n\n\nconst tiledMapsToUpload = {};\nlet polling = false;\nlet uploading = false;\n\nconst s3Client = new S3Client({\n    region: process.env.AWS_S3_REGION,\n    credentials: {\n      accessKeyId: process.env.AWS_S3_ACCESSKEYID,\n      secretAccessKey: process.env.AWS_S3_SECRETACCESSKEY,\n    },\n});\n\nexport const uploadToS3Bucket = async (file, s3Filename, bucket, contentType = 'image/png') => {\n    const params = {\n      Bucket: bucket, // required\n      Key: s3Filename, // required\n      Body: file,\n      ContentType: contentType\n    };\n\n    const command = new PutObjectCommand(params);\n    const data = await s3Client.send(command)\n}\n\nexport const deleteFromS3Bucket = async (s3Filename, bucket) => {\n    let s3Key = s3Filename;\n    if (s3Filename.startsWith('http')) {\n        s3Key = s3Filename.substring(s3Filename.lastIndexOf('/') + 1);\n    }\n    if (s3Filename.endsWith('.jpeg') || s3Filename.endsWith('.jpg') || s3Filename.endsWith('.png')) {\n        s3Key = s3Key.substring(0, s3Key.lastIndexOf('.'));\n    }\n    const params = {\n      Bucket: bucket, // required\n      Key: s3Key\n    };\n\n    const command = new DeleteObjectCommand(params);\n    const data = await s3Client.send(command)\n}\n\nexport const getFullImageUrl = (filename) => {\n    let fullUrl = `https://${process.env.AWS_S3_TILES_BUCKET}.s3.${process.env.AWS_S3_REGION}.amazonaws.com/${filename}/tiles`;\n    return fullUrl;\n}\n\nconst pollDB  = async () => {\n  console.log('polling DB for new tiled images that need to uploaded');\n  try {\n    await connectToDatabase();\n\n    const tiledMaps = await Map.find({ status : MapStatus.TilingDone }).exec();\n\n    if (tiledMaps && tiledMaps.length > 0) {\n      for (let i = 0; i < tiledMaps.length; i++) {\n        const map = tiledMaps[i];\n        const mapId = map._id.toString();\n        if (!tiledMapsToUpload.hasOwnProperty(mapId)) {\n          // add map to list of maps to upload\n          console.log('adding new map to upload list', mapId);\n          tiledMapsToUpload[mapId] = map.fileId;\n        }\n      }\n    }\n  } catch (error) {\n      throw new Error('Error while fetching map', error.message);\n  }\n}\n\nasync function* walk(dir) {\n  for await (const d of await fs.opendir(dir)) {\n      const entry = path.join(dir, d.name);\n      if (d.isDirectory()) yield* walk(entry);\n      else if (d.isFile()) yield entry;\n  }\n}\n\n\nconst uploadTiledMapsToS3 = async () => {\n  console.log('iterating over maps flagged for upload.')\n  if (Object.keys(tiledMapsToUpload).length > 0 && !uploading) {\n    for (const [key, value] of Object.entries(tiledMapsToUpload)) {\n      uploading = true;\n      console.log(`${key}: ${value}`);\n\n      await fetch(process.env.HOST_BASE_URL + '/api/map/' + key, {\n        method: 'PATCH',\n        body: JSON.stringify({\n            status: MapStatus.Uploading\n        })\n      })\n\n      const tilesDir = value.substring(0, value.lastIndexOf('.'));\n      for await (const p of walk('public/uploads/' + tilesDir + '/tiles')) {\n        console.log(p)\n        const fullPath = path.join(process.cwd(), p);\n        const data = await fs.readFile(fullPath)\n\n        var base64data = new Buffer(data, 'binary');\n\n        const s3Filename = p.replace('public/uploads/', '');\n        await uploadToS3Bucket(base64data, s3Filename, process.env.AWS_S3_TILES_BUCKET);\n      }\n\n      await fetch(process.env.HOST_BASE_URL + '/api/map/' + key, {\n        method: 'PATCH',\n        body: JSON.stringify({\n            status: MapStatus.Ready\n        })\n      })\n\n      // important: delete afterwards\n      delete tiledMapsToUpload[key];\n    }\n    uploading = false;\n  }\n}\n\nexport const startPolling = () => {\n  if (!polling) {\n    console.log('start polling...');\n    poll(pollDB, 5000);\n    poll(uploadTiledMapsToS3, 4000);\n    polling = true;\n  }\n};\n\nexport default getFullImageUrl;"],"names":[],"mappings":"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"}},
    {"offset": {"line": 364, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 369, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/api/services/scheduler/route.js"],"sourcesContent":["import connectToDatabase  from '@utils/database';\n\nimport { startPolling } from '@utils/s3handler';\n\nexport const POST = async (req) => {\n\n    try {\n        startPolling();\n\n        return new Response({'success': 'polling started.'}, { status: 200 })\n    } catch (error) {\n        console.log(error);\n        return new Response(\"Failed to create a new map\", { status: 500 })\n    }\n}"],"names":[],"mappings":";;;;;;;;AAIO,MAAM,OAAO,OAAO;IAEvB,IAAI;QACA,CAAA,GAAA,qHAAA,CAAA,eAAY,AAAD;QAEX,OAAO,IAAI,SAAS;YAAC,WAAW;QAAkB,GAAG;YAAE,QAAQ;QAAI;IACvE,EAAE,OAAO,OAAO;QACZ,QAAQ,GAAG,CAAC;QACZ,OAAO,IAAI,SAAS,8BAA8B;YAAE,QAAQ;QAAI;IACpE;AACJ"}},
    {"offset": {"line": 392, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}