{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/components/loading.js"],"sourcesContent":["export default function Loading() {\n    return <p>Loading...</p>\n}"],"names":[],"mappings":";;;;;;AAAe,SAAS;IACpB,qBAAO,6LAAC;kBAAE;;;;;;AACd;KAFwB"}},
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 28, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/components/GeorefMap.jsx"],"sourcesContent":["\"use client\";\n\nimport dynamic from 'next/dynamic'\n\n// import L from 'leaflet';\n\n// // Dynamic import of react-leaflet components\n// const MapContainer = dynamic(\n//   () => import(\"react-leaflet\").then((module) => module.MapContainer),\n//   {\n//     ssr: false, // Disable server-side rendering for this component\n//   }\n// );\n// const TileLayer = dynamic(\n//   () => import(\"react-leaflet\").then((module) => module.TileLayer),\n//   {\n//     ssr: false,\n//   }\n// );\n// const Marker = dynamic(\n//   () => import(\"react-leaflet\").then((module) => module.Marker),\n//   {\n//     ssr: false,\n//   }\n// );\n// const Popup = dynamic(\n//   () => import(\"react-leaflet\").then((module) => module.Popup),\n//   {\n//     ssr: false,\n//   }\n// );\n\nimport { useState, Suspense } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\nimport { useLeafletContext } from '@react-leaflet/core'\nimport { useMap, useMapEvents } from 'react-leaflet/hooks'\n\n// import L from 'leaflet'\nL.RasterCoords = require('leaflet-rastercoords');\nimport \"leaflet/dist/leaflet.css\";\nimport \"leaflet-defaulticon-compatibility\";\nimport \"leaflet-defaulticon-compatibility/dist/leaflet-defaulticon-compatibility.css\";\nimport { useEffect, useMemo, useRef, useCallback } from 'react'\nimport toast from 'react-hot-toast';\nimport { Button, Label } from \"flowbite-react\";\nimport Loading from './loading';\nimport { CurrentControlPointStatus } from \"@utils/enums\";\n\nexport default function GeorefMap({selectedMap}) {\n  let rasterCoordsRef = useRef(null);\n  if (rasterCoordsRef !== null) {\n    rasterCoordsRef.current = null;\n  }\n  //const [controlPointStatus, setControlPointStatus] = useState(CurrentControlPointStatus.FreeForSelection);\n  const [controlPointSelection, setControlPointSelection] = useState({});\n  let controlPointStatus = useRef(CurrentControlPointStatus.FreeForSelection);\n\n  const [controlPoints, setControlPoints] = useState(selectedMap.controlPoints? selectedMap.controlPoints : []);\n\n  console.log('no of control points : ' + controlPoints.length);\n\n  useEffect(() => {\n\n    setControlPoints(selectedMap.controlPoints? selectedMap.controlPoints : []);\n\n    return () => {\n      \n    }\n\n  }, [selectedMap]);\n\n  let markers = {};\n\n  const center = {\n    lat: 53.551,\n    lng: 9.993,\n  }\n\n  const existingControlPointIcon = L.icon({\n    iconUrl: '/assets/icons/cp-existing.png',\n    iconSize: [16, 16],\n    iconAnchor: [8, 8],\n    popupAnchor : [-3, -3]\n  });\n\n  const newControlPointIcon = L.icon({\n    iconUrl: '/assets/icons/cp-new.png',\n    iconSize: [16, 16],\n    iconAnchor: [8, 8],\n    popupAnchor : [-3, -3]\n  });\n\n  console.log('selectedMap in georef map', selectedMap);\n\n  const saveControlPoint = async(isNew) => {\n    console.log('saving control point selection : ' + JSON.stringify(controlPointSelection));\n    try {\n      const saveControlPointResponse = await fetch('/api/map/' + selectedMap._id + '/controlpoint', {\n        method: isNew ? 'POST' : 'PATCH',\n        body: JSON.stringify({controlPoint : controlPointSelection\n        })\n      })\n\n      if (saveControlPointResponse.ok) {\n          const newControlPoint = await saveControlPointResponse.json();\n\n          setControlPoints([...controlPoints, newControlPoint]);\n\n          toast.success('New control point created successfully!', {\n            position: 'top-left',\n          })\n        }\n      } catch (error) {\n          console.log(error);\n      } finally {\n        setControlPointSelection({});\n        //setControlPointStatus(CurrentControlPointStatus.FreeForSelection);\n        controlPointStatus.current = CurrentControlPointStatus.FreeForSelection;\n      }\n  };\n\n  const deleteControlPoint = async(e, controlPoint, isRasterImage, isNew, markerId) => {\n    L.DomEvent.stopPropagation(e);\n\n    if (isNew) {\n      if (isRasterImage) {\n        const { fromPoint, rasterImageCoords, ...rest } = controlPointSelection;\n        setControlPointSelection(rest);\n      } else {\n        const { toPoint, ...rest } = controlPointSelection;\n        setControlPointSelection(rest);\n      }\n\n      toast.success('New control point deleted successfully!', {\n        position: 'top-left',\n      })\n    }\n    // existing control points\n    else {\n      try {\n        const deleteControlPointResponse = await fetch('/api/map/' + selectedMap._id + '/controlpoint', {\n          method: 'DELETE',\n          body: JSON.stringify({controlPointId : controlPoint._id\n          })\n        })\n  \n        if (deleteControlPointResponse.ok) {  \n            toast.success('Control point deleted successfully!', {\n              position: 'top-left',\n            })\n\n            const modifiedMap = await deleteControlPointResponse.json();\n            setControlPoints(modifiedMap.controlPoints);\n          }\n        } catch (error) {\n            console.log(error);\n        } finally {\n          \n\n          setControlPointSelection({});\n          //setControlPointStatus(CurrentControlPointStatus.FreeForSelection);\n          controlPointStatus.current = CurrentControlPointStatus.FreeForSelection;\n\n          //we need to modify the markers object too\n          delete markers.markerId;\n          const twinMarkerId = markerId.includes('to') ? markerId.replace('to', 'from') : markerId.replace('from', 'to');\n          delete markers.twinMarkerId;\n        }\n    }\n  }\n  \n\n  const DraggableMarker = ({controlPoint, isRasterImage, isNew = false, markerId}) => {\n    const [isBrowser, setIsBrowser] = useState(false);\n    \n    console.log('draggable marker for control point : ' + JSON.stringify(controlPoint));\n    //const [draggable, setDraggable] = useState(isNew ? true : false)\n    //const [position, setPosition] = useState(isRasterImage ? controlPoint.fromPoint : controlPoint.toPoint)\n    let markerRef = useRef(null)\n    let draggable = useRef(isNew ? true : false);\n    let position = useRef(isRasterImage ? controlPoint.fromPoint : controlPoint.toPoint);\n\n    useEffect(() => {\n      setIsBrowser(true);\n    }, []);\n\n    const isFrom = markerId.includes('from') ? true : false;\n    const twinMarkerId = 'cp-' + (isFrom ? 'to-' : 'from-') + controlPoint._id;\n\n    const eventHandlers = useMemo(\n      () => ({\n        dragend() {\n          const marker = markerRef.current\n          if (controlPoint != null) {\n            // const point = isRasterImage ? controlPoint.fromPoint : controlPoint.toPoint\n            const marker = markerRef.current\n            if (marker != null) {\n              const point = marker.getLatLng();\n              //setPosition(point);\n              position.current = point;\n              console.log('setting position to : ' + point);\n\n              if (isRasterImage) {\n                let rc = rasterCoordsRef.current;\n                var coords = rc.project(point);\n                let unprojectedLatLng = rc.unproject(coords);\n                setControlPointSelection({...controlPointSelection, fromPoint : unprojectedLatLng, rasterImageCoords : coords});\n              }\n              else {\n                setControlPointSelection({...controlPointSelection, toPoint  : point});\n              }\n            }\n            // console.log('setting position to : ' + point);\n            // setPosition(point)\n          }\n        },\n        mouseover(event) {\n          console.log('mouse over : ' + markerId);\n\n          if (!markerId.includes('current')) {\n            markerRef.current.setIcon(newControlPointIcon);\n            const twinMarkerRef = markers[twinMarkerId];\n            twinMarkerRef.current.setIcon(newControlPointIcon);\n          }\n        },\n        mouseout(event) {\n          console.log('mouse over : ' + markerId);\n\n          if (!markerId.includes('current')) {\n            markerRef.current.setIcon(existingControlPointIcon);\n            const twinMarkerRef = markers[twinMarkerId];\n            twinMarkerRef.current.setIcon(existingControlPointIcon);\n          }\n        }\n      }),\n      []\n    )\n\n    markers[markerId] = markerRef;\n\n    const editControlPoint = useCallback((e, controlPoint, markerId) => {\n      L.DomEvent.stopPropagation(e);\n\n      toast('Editing control point. Click and drag it to its new position, then hit Save.', {\n        position: 'top-left',\n      })\n\n      // we make the existing control point a selection\n      setControlPointSelection(controlPoint);\n      // hence we need to temporarily remove it from the persisted control points\n      setControlPoints(\n        controlPoints.filter(a =>\n          a._id !== controlPoint._id\n        )\n      );\n      controlPointStatus.current = CurrentControlPointStatus.EditExisting;\n\n      //setDraggable((d) => !d)\n      draggable.current = !draggable;\n\n      markerRef.current.setIcon(newControlPointIcon); \n      markerRef.current.closePopup();\n\n      // don't forget the twin\n      const twinMarkerId = markerId.includes('to') ? markerId.replace('to', 'from') : markerId.replace('from', 'to');\n      const twinMarkerRef = markers[twinMarkerId];\n      twinMarkerRef.current.setIcon(newControlPointIcon);\n    }, [])\n\n    if (!isBrowser) {\n      return null;\n    }\n\n    return (\n      <Marker\n        // key={key}\n        draggable={draggable}\n        eventHandlers={eventHandlers}\n        position={position.current}\n        icon={isNew ? newControlPointIcon : existingControlPointIcon}\n        ref={markerRef}\n        >\n        <Popup minWidth={90}>\n          {/* <span onClick={toggleDraggable}>\n            {draggable\n              ? 'Marker is draggable'\n              : 'Click here to make marker draggable'}\n          </span> */}\n          <div className='w-full flex-center flex-row my-2.5'>\n            {/* <div>\n            Lat/Lng : \n              {\n                isRasterImage ?\n                  controlPoint.fromPoint[0].toFixed(4) + '/' + controlPoint.fromPoint[1].toFixed(4)\n                :\n                  controlPoint.toPoint[0].toFixed(4) + '/' + controlPoint.toPoint[1].toFixed(4)\n              }\n            </div> */}\n            <div className='w-full flex-center flex-row my-2.5'>\n              {!isNew ? (\n                <span className='mx-1.5'><Button onClick={(e) => editControlPoint(e, controlPoint, markerId)}>Edit</Button></span>\n              ) : ( <></>)\n              }\n              <span className='mx-1.5'><Button key=\"delete-control-point-button\" color=\"failure\" onClick={(e) => deleteControlPoint(e, controlPoint, isRasterImage, isNew, markerId)}>Delete</Button></span>\n            </div>\n          </div>\n        </Popup>\n      </Marker>\n    )\n  }\n\n  const AddMarker = ({isRasterImage}) => {\n    console.log('add marker isRasterImage? ' + JSON.stringify(isRasterImage));\n    useMapEvents({\n      click(e) {\n        let latlng = e.latlng;\n\n        if (isRasterImage) {\n          let rc = rasterCoordsRef.current;\n          var coords = rc.project(e.latlng);\n          latlng = rc.unproject(coords);\n          console.log('raster image coords : ' + coords);\n\n          if (controlPointStatus.current == CurrentControlPointStatus.ToPointSelected || controlPointStatus.current == CurrentControlPointStatus.ReadyForSaving) {\n            //setControlPointStatus(CurrentControlPointStatus.ReadyForSaving);\n            controlPointStatus.current = CurrentControlPointStatus.ReadyForSaving;\n            console.log('ready for saving!');\n          }\n          else {\n            //setControlPointStatus(CurrentControlPointStatus.FromPointSelected);\n            controlPointStatus.current = CurrentControlPointStatus.FromPointSelected;\n            console.log('from point set!');\n          }\n          setControlPointSelection({...controlPointSelection, fromPoint : latlng, rasterImageCoords : coords});\n        }\n        else {\n          if (controlPointStatus.current == CurrentControlPointStatus.FromPointSelected || controlPointStatus.current == CurrentControlPointStatus.ReadyForSaving) {\n            //setControlPointStatus(CurrentControlPointStatus.ReadyForSaving);\n            controlPointStatus.current = CurrentControlPointStatus.ReadyForSaving;\n            console.log('ready for saving!');\n          }\n          else {\n            //setControlPointStatus(CurrentControlPointStatus.ToPointSelected);\n            controlPointStatus.current = CurrentControlPointStatus.ToPointSelected;\n            console.log('to point set!');\n          }\n          setControlPointSelection({...controlPointSelection, toPoint : latlng});\n        }\n        console.log('lat/lng : ' + latlng);\n        console.log('controlPointSelection : ' + JSON.stringify(controlPointSelection));\n      \n      },\n    });\n    return null;\n  };\n\n  const getFullImageUrl = (filename) => {\n    const filenameWithoutExt = filename.substring(0, filename.lastIndexOf('.'));\n    let fullUrl = `https://${process.env.NEXT_PUBLIC_AWS_S3_TILES_BUCKET}.s3.${process.env.NEXT_PUBLIC_AWS_S3_REGION}.amazonaws.com/${filenameWithoutExt}/tiles`;\n    return fullUrl;\n }\n\n  const TileLayerWithRasterCoords = ({selectedMap}) => {\n    \n    const context = useLeafletContext()\n\n    const map = useMap()\n\n    const width = selectedMap != null ? selectedMap.width : 1000;\n    const height = selectedMap != null ? selectedMap.height : 1000;\n\n    console.log('width : ' + width + ', height : ' + height);\n\n    const img = [\n      width, //6960,  // original width of image\n      height //5409   // original height of image\n    ]\n\n    const rc = new L.RasterCoords(map, img);\n    rasterCoordsRef.current = rc; \n\n    map.setMaxZoom(rc.zoomLevel())\n    //map.setView(rc.unproject([img[0], img[1]]), 2)\n\n    const s3ImageUrl = selectedMap != null ? getFullImageUrl(selectedMap.fileId) : '';\n    console.log('s3ImageUrl', s3ImageUrl);\n\n    useEffect(() => {\n      const tileLayer = L.tileLayer(s3ImageUrl + '/{z}/{x}/{y}.png', {\n        noWrap: true,\n        bounds: rc.getMaxBounds(),\n        maxNativeZoom: rc.zoomLevel()\n      })\n      // const bounds = L.latLng(props.center).toBounds(props.size)\n      // const square = new L.Rectangle(bounds)\n      const container = context.layerContainer || context.map\n      container.addLayer(tileLayer)\n  \n      return () => {\n        container.removeLayer(tileLayer)\n      }\n    }, [])\n\n    return null;\n  };\n\n  return (\n    <section className='w-full flex-center flex-col'>\n\n        <div className='w-full flex-center flex-row my-1'>\n          {controlPoints.length > 0 ? controlPoints.length + ' control points selected' : ''}\n        </div>  \n      <div className='w-full flex-center flex-row'>\n\n          <div className='w-1/2 mx-2.5'>\n            <MapContainer center={[53.55, 10]} zoom={2} style={{ height: '500px', width: '100%' }}>\n            <Suspense fallback={<Loading />}>\n              <TileLayerWithRasterCoords selectedMap={selectedMap} />\n            </Suspense>\n            {controlPoints.length > 0 ? controlPoints.map((controlPoint, idx) => (\n                  <DraggableMarker key={'cp-from-' + controlPoint._id} \n                    controlPoint={controlPoint}\n                    isRasterImage={true}\n                    markerId={'cp-from-' + controlPoint._id}\n                  />\n              )) : ( <></>)}\n              {controlPointSelection && controlPointSelection.fromPoint ? (\n                  <DraggableMarker key={'cp-from-current'} \n                    controlPoint={controlPointSelection}\n                    isRasterImage={true}\n                    isNew={true}\n                    markerId={'cp-from-current'} \n                  />\n              ) : ( <></>)}\n            <AddMarker isRasterImage={true}/>\n            </MapContainer>\n\n          </div>\n          <div className='w-1/2 mx-2.5'>\n            <MapContainer center={[53.55, 10]} zoom={13} style={{ height: '500px', width: '100%' }}>\n              <TileLayer\n                  url={'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'}\n                  attribution={'&copy; OpenStreetMap contributors'}\n              />\n              {controlPoints.length > 0 ? controlPoints.map((controlPoint, idx) => (\n                  <DraggableMarker key={'cp-to-' + controlPoint._id} \n                    controlPoint={controlPoint}\n                    isRasterImage={false}\n                    markerId={'cp-to-' + controlPoint._id}\n                  />\n              )) : ( <></>)}\n              {controlPointSelection && controlPointSelection.toPoint ? (\n                  <DraggableMarker key={'cp-to-current'} \n                    controlPoint={controlPointSelection}\n                    isRasterImage={false}\n                    isNew={true}\n                    markerId={'cp-to-current'} \n                  />\n              ) : ( <></>)}\n              <AddMarker isRasterImage={false}/>\n            \n            </MapContainer>\n          </div>\n\n      </div>\n      <div className='w-full flex-center flex-row my-2.5'>\n        {controlPointStatus.current == CurrentControlPointStatus.ReadyForSaving ? (\n          <Button onClick={() => saveControlPoint(true)}>Save control point</Button>\n        ) : ( <></>)\n        }\n        {controlPointStatus.current == CurrentControlPointStatus.EditExisting ? (\n          <Button onClick={() => saveControlPoint(false)}>Save changes</Button>\n        ) : ( <></>)\n        }\n      </div>\n    </section>\n  );\n};\n\n// export default GeorefMap;"],"names":[],"mappings":"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"}},
    {"offset": {"line": 620, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 625, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/components/OverlayMap.jsx"],"sourcesContent":["\"use client\";\n\nimport { useState, Suspense } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\nimport { useLeafletContext } from '@react-leaflet/core'\nimport { useMap, useMapEvents } from 'react-leaflet/hooks'\n// import L from 'leaflet'\n//L.RasterCoords = require('leaflet-rastercoords');\nimport { ImageOverlay } from 'react-leaflet/ImageOverlay'\nimport \"leaflet/dist/leaflet.css\";\nimport \"leaflet-defaulticon-compatibility\";\nimport \"leaflet-defaulticon-compatibility/dist/leaflet-defaulticon-compatibility.css\";\nimport { useEffect, useMemo, useRef, useCallback } from 'react'\nimport toast from 'react-hot-toast';\nimport { RangeSlider, Label, Dropdown } from \"flowbite-react\";\nimport Loading from './loading';\nimport { TransformationType, TransformationTypes, TransformationTypeLabels, TransformationTypesMinGCP } from \"@utils/enums\";\n\nimport { GcpTransformer } from '@allmaps/transform';\n\nimport proj4 from 'proj4';\nimport { t } from 'numeric';\n\nexport default function OverlayMap({selectedMap}) {\n    //const [opacityLevel, setOpacityLevel] = useState(1);\n    const [gl, setGL] = useState(null);\n    const [transformationType, setTransformationType] = useState(TransformationType.Polynomial);\n    let canvasRef = useRef(null);\n\n    const setOpacity = (value) => {\n        if (value > 0) {\n            value /= 100;\n        }\n        L.DomUtil.setOpacity(canvasRef.current, value.toFixed(2));\n    }\n\n    const TransformationTypeItem = ({type}) => {\n        const gcpCount = selectedMap.controlPoints?.length;\n\n        console.log('type : ' + type);\n        if (gcpCount >= TransformationTypesMinGCP[type]) {\n            return (\n                <Dropdown.Item value={type} onClick={() => setTransformationType(type)} className={transformationType == type ? 'selected_item' : ''}>\n                    {TransformationTypeLabels[type]}\n                </Dropdown.Item>\n            )\n        }\n        else {\n            return ( \n                <Dropdown.Item value={type} disabled className='disabled_item'>\n                    {TransformationTypeLabels[type]} (needs {TransformationTypesMinGCP[type]} GCPs)\n                </Dropdown.Item>\n            )\n        }\n    }\n\n    const GeoRefOverlay = ({selectedMap}) => {\n\n        var transformGcps = [];\n        for (var controlPoint of selectedMap.controlPoints) {\n            transformGcps.push({\n                source: controlPoint.rasterImageCoords,\n                destination: [controlPoint.toPoint[1], controlPoint.toPoint[0]]\n            })\n        }\n\n        console.log('transformGcps : ' + transformGcps);\n\n        const options = {\n            differentHandedness: true,\n            maxOffsetRatio: 5,\n            maxDepth: 100\n        }\n\n        const transformer = new GcpTransformer(transformGcps, transformationType)\n        //const transformedPoint = transformer.transformForward([4146.178, 1424], options)\n        const pointTopLeft = transformer.transformForward([0, 0], options);\n        const pointBottomLeft = transformer.transformForward([0, selectedMap.height], options);\n        const pointTopRight = transformer.transformForward([selectedMap.width, 0], options);\n        const pointBottomRight = transformer.transformForward([selectedMap.width, selectedMap.height], options);\n\n        console.log('pointTopLeft : ' + pointTopLeft);\n        console.log('pointBottomLeft : ' + pointBottomLeft);\n        console.log('pointTopRight : ' + pointTopRight);\n        console.log('pointBottomRight : ' + pointBottomRight);\n\n        const context = useLeafletContext();\n        const map = useMap();\n\n        proj4.defs(\"EPSG:4839\",\"+proj=lcc +lat_0=51 +lon_0=10.5 +lat_1=48.6666666666667 +lat_2=53.6666666666667 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs +type=crs\");\n        proj4.defs(\"EPSG:3395\",\"+proj=merc +lon_0=0 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs +type=crs\");\n\n        //const forwardProj = proj4('EPSG:4839','EPSG:3857').forward;\n        const forwardProj = proj4('WGS84','EPSG:3857').forward;\n\n        useEffect(() => {\n\n            const canvas = canvasRef.current;\n            setGL(canvas?.getContext?.(\"webgl2\", {\n\n            }) ?? undefined);\n\n            // const image = new Image();\n            // image.onload = () => {\n            //     const transformedImageURL = transformImage(image, params, 1);\n            //     const imageBounds = [[53.578, 9.974], [53.537, 10.062]];\n            //     L.imageOverlay(transformedImageURL, imageBounds).addTo(map);\n\n            // }\n            // image.src = '/assets/images/Ion6X7C.jpeg';\n\n            const filename = selectedMap.fileId;\n            const filenameWithoutExt = filename.substring(0, filename.lastIndexOf('.'));\n            const fileExt = filename.substring(filename.lastIndexOf('.') + 1);\n            const fullUrl = `https://${process.env.NEXT_PUBLIC_AWS_S3_TILES_BUCKET}.s3.${process.env.NEXT_PUBLIC_AWS_S3_REGION}.amazonaws.com/${filenameWithoutExt}/${filenameWithoutExt}_reduced.${fileExt}`;        \n\n            const arrugatorLayer = L.imageOverlay.arrugator(\n                // First argument to the factory/constructor is the URL of the image. Only png/jpg.\n                fullUrl,\n                {\n                    // The \"controlPoints\" option must be an array of arrays of numbers, containing\n                    // the coordinates in the source CRS of the four corners of the image, as follows:\n                    // controlPoints: [\n                    //     [-35105.635432, 284599.061820],\t// top-left\n                    //     [-35044.070476, 282872.895477],\t// bottom-left\n                    //     [-32689.868363, 284743.952094],\t// upper-right\n                    //     [-32685.244098, 282867.785720],\t// lower-right\n                    // ],\n                    controlPoints: [\n                        pointTopLeft,\t// top-left\n                        pointBottomLeft,\t// bottom-left\n                        pointTopRight,\t// upper-right\n                        pointBottomRight,\t// lower-right\n                    ],\n            \n                    // The \"projector\" option must be a forward-projection function.\n                    // Leveraging proj4 as follows is recommended.\n                    // It's up to the developer to ensure that the destination projection matches the Leaflet display CRS.\n                    projector: forwardProj,\n            \n                    // The \"epsilon\" option controls how much the triangular mesh will be subdivided.\n                    // Set it to the *square* of the maximum expected error, in units of the destination CRS.\n                    // The default of one million means that the maximum reprojection error distance shall be 1000 \"meters\".\n                    epsilon: 1000000,\n            \n                    // If you don't know what a \"fragment shader\" is, do not change this default.\n                    // If you *do* know what a \"fragment shader\" is, then be aware that there's a\n                    // predefined `uRaster` 2D sampler and a `vUV` `vec2` varying.\n                    fragmentShader: \"void main() { gl_FragColor = texture2D(uRaster, vUV); }\",\n            \n                    // Rasters that cover very large areas (i.e. the whole earth) can lead to\n                    // projection artifacts. For those cases, subdivide the mesh before\n                    // arrugating by providing a value larger than 1.\n                    subdivisions: 1,\n            \n                    // If the input coordinates are so large, or so close to discontinuties/asimptotic\n                    // points, these options will crop it to prevent artifacts.\n                    // In other words: when the input data covers the poles, prevent\n                    // projecting the areas near the poles by cropping the `Y` coordinate\n                    // between `[-85.5, 85.5]`.\n                    cropX: [-Infinity, Infinity],\n                    cropY: [-Infinity, Infinity],\n            \n                    // Can take a \"padding\" option, as per L.Renderer\n                    padding: 0.1,\n            \n                    // \"opacity\" as per L.ImageOverlay\n                    opacity: 1,\n            \n                    // Can take usual L.Layer options as well.\n                    attribution: \"Hamburg 1830\",\n                    pane: \"overlayPane\",\n                    map: map,\n                    myCanvas: canvasRef.current\n                }\n            );\n\n            const container = context.layerContainer || context.map;\n            container.addLayer(arrugatorLayer)\n\n            return () => {\n                container.removeLayer(arrugatorLayer)\n              }\n\n        }, []);\n\n        return null;\n    }\n\n    console.log('selectedMap in overlay map', selectedMap);\n\n  return (\n    <section className='w-full flex-center flex-col'>\n        <div className='w-full flex-center flex-row'>\n            <div className='w-1/2 flex-center flex-col'>\n                <RangeSlider \n                    id=\"opacity-level\" \n                    min=\"0.1\" \n                    max=\"100\"\n                    \n                    onChange={(event) => setOpacity(event.target.value)}/>\n                <div className=\"flex h-full flex-row justify-between py-2 text-gray-400 text-xs\">\n                        Set opacity to see how well the overlay works\n                </div>\n            </div>\n            <div className='w-1/2 flex-center flex-col'>\n                <Dropdown label=\"Transformation type\" className='transformTypeSelection'>\n                    {TransformationTypes.map((type) => (\n                        <TransformationTypeItem key={type} type={type} />\n                    )\n                    )}\n                </Dropdown>\n            </div>\n        </div>\n      <div className='w-full flex-center flex-row'>\n\n            <MapContainer center={[53.55, 10]} zoom={13} style={{ height: '500px', width: '100%' }}>\n                <TileLayer\n                    url={'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'}\n                    attribution={'&copy; OpenStreetMap contributors'}\n                />\n                <GeoRefOverlay selectedMap={selectedMap} />\n            </MapContainer>\n        \n      </div>\n\n      <canvas ref={canvasRef}></canvas>\n    </section>\n    \n  );\n};"],"names":[],"mappings":"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"}},
    {"offset": {"line": 963, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 968, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/components/CreateMapModal.jsx"],"sourcesContent":["\n\"use client\";\n\nimport { Button, FileInput, Label, Modal, TextInput, Spinner, RangeSlider } from \"flowbite-react\";\nimport { useState } from \"react\";\n\nimport toast from 'react-hot-toast';\n\nexport default function CreateMapModal ({maps, setMaps }) {\n  const [openModal, setOpenModal] = useState(false);\n  const [title, setTitle] = useState('');\n  const [file, setFile] = useState(null);\n  const [zoomLevel, setZoomLevel] = useState(5);\n  const [isLoading, setIsLoading] = useState(false);\n\n  function onCloseModal() {\n    setOpenModal(false);\n    setTitle('');\n    setFile(null);\n    setZoomLevel(5);\n  }\n\n  const handleFileChange = (e) => {\n    setFile(e.target.files[0]);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    const formData = new FormData();\n    formData.append('file', file);\n\n    // first create the map entity in DB\n    try {\n      const createNewMapResponse = await fetch('/api/map/new', {\n        method: 'POST',\n        body: JSON.stringify({\n            userId: 1,\n            title: title,\n            maxZoomLevel: zoomLevel\n        })\n      })\n\n      if (createNewMapResponse.ok) {\n        const newMap = await createNewMapResponse.json();\n\n        setMaps( // Replace the state\n        [ // with a new array\n          ...maps, // that contains all the old items\n          newMap // and one new item at the end\n        ]\n        );\n\n        toast.success('New map created successfully!', {\n          position: 'top-left',\n        })\n        setOpenModal(false);\n\n        // Store the file locally, tile it and upload it to a storage server (e.g. AWS S3)\n        const uploadImageResponse = await fetch(`/api/map/${newMap._id}/upload?maxZoomLevel=${zoomLevel}`, {\n          method: 'POST',\n          body: formData,\n        });\n\n        if (uploadImageResponse.status == 201) {\n            const result = await uploadImageResponse.json();\n            // setOldMapUrl(result.s3ImageUrl);\n            toast.success('Image is being processed, this may take a few seconds.', {\n              position: 'top-left',\n            })\n        }\n      }\n    } catch (error) {\n        console.log(error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <>\n\n      <Button onClick={() => setOpenModal(true)}>Upload new map</Button>\n      <Modal show={openModal} size=\"md\" onClose={onCloseModal} popup>\n        <Modal.Header />\n        <Modal.Body>\n        <form onSubmit={handleSubmit}>\n            <div className=\"space-y-6\">\n              <h3 className=\"text-xl font-medium text-gray-900 dark:text-white\">Upload new map for georeferencing</h3>\n              <div>\n                <div className=\"mb-2 block\">\n                  <Label htmlFor=\"map-title\" value=\"Map's Title\" />\n                </div>\n                <TextInput\n                  id=\"map-title\"\n                  placeholder=\"something meaningful...\"\n                  value={title}\n                  onChange={(event) => setTitle(event.target.value)}\n                  required\n                />\n              </div>\n\n              <div className=\"flex w-full items-center justify-center\">\n                <Label\n                  htmlFor=\"dropzone-file\"\n                  className=\"flex h-64 w-full cursor-pointer flex-col items-center justify-center rounded-lg border-2 border-dashed border-gray-300 bg-gray-50 hover:bg-gray-100 dark:border-gray-600 dark:bg-gray-700 dark:hover:border-gray-500 dark:hover:bg-gray-600\"\n                >\n                  <div className=\"flex flex-col items-center justify-center pb-6 pt-5\">\n                    <svg\n                      className=\"mb-4 h-8 w-8 text-gray-500 dark:text-gray-400\"\n                      aria-hidden=\"true\"\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      fill=\"none\"\n                      viewBox=\"0 0 20 16\"\n                    >\n                      <path\n                        stroke=\"currentColor\"\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        strokeWidth=\"2\"\n                        d=\"M13 13h3a3 3 0 0 0 0-6h-.025A5.56 5.56 0 0 0 16 6.5 5.5 5.5 0 0 0 5.207 5.021C5.137 5.017 5.071 5 5 5a4 4 0 0 0 0 8h2.167M10 15V6m0 0L8 8m2-2 2 2\"\n                      />\n                    </svg>\n\n                    { file == null ? (\n                      <div>\n                          <p className=\"mb-2 text-sm text-gray-500 dark:text-gray-400\">\n                          <span className=\"font-semibold\">Click to upload</span> or drag and drop\n                        </p>\n                        <p className=\"text-xs text-gray-500 dark:text-gray-400\">PNG or JPG (MAX. 20MB)</p>\n                      </div>\n                      ) : (\n                        <p className=\"text-xs text-gray-500 dark:text-gray-400\">{file.name}</p>\n                      )}\n                  </div>\n                  <FileInput id=\"dropzone-file\" className=\"hidden\" onChange={handleFileChange}/>\n                </Label>\n              </div>\n\n              <div>\n                <div className=\"mb-1 block\">\n                  <Label htmlFor=\"default-range\" value=\"Max. zoom level\" />: {zoomLevel}\n                </div>\n                <RangeSlider \n                  id=\"zoom-level\" \n                  min=\"1\" \n                  max=\"6\" \n                  value={zoomLevel}\n                  onChange={(event) => setZoomLevel(event.target.value)}/>\n                <div className=\"flex h-full flex-row justify-between py-2 text-gray-400 text-xs\">\n                      The higher, the longer it takes to process the image\n                </div>\n              </div>\n\n              <div className=\"w-full\">\n                <Button type=\"submit\" disabled={isLoading}>\n                  {\n                  isLoading ? (\n                    <div>\n                    <Spinner aria-label=\"Spinner button example\" size=\"sm\" /><span className=\"pl-3\">Creating...</span> \n                    </div> ) : ( 'Create' )\n                  }\n                </Button>\n              </div>\n            </div>\n          </form>\n        </Modal.Body>\n      </Modal>\n    </>\n  );\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1330, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1335, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/loading.js"],"sourcesContent":["export default function Loading() {\n    return <p>Loading...</p>\n}"],"names":[],"mappings":";;;;;;AAAe,SAAS;IACpB,qBAAO,6LAAC;kBAAE;;;;;;AACd;KAFwB"}},
    {"offset": {"line": 1353, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1358, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/page.jsx"],"sourcesContent":["\"use client\"\n\nimport window from 'global'\n\nimport React, { Suspense } from 'react'\nimport GeorefMap from '@components/GeorefMap';\nimport OverlayMap from '@components/OverlayMap';\nimport MyMapsDrawer from '@components/MyMapsDrawer';\nimport CreateMapModal from '@components/CreateMapModal';\nimport { useState, useEffect } from 'react';\nimport { Button } from \"flowbite-react\";\n\nimport Loading from './loading';\n\nconst Home = () => {\n  // const [markers, setMarkers] = useState([]);\n  const [maps, setMaps] = useState([]);\n  const [selectedMap, setSelectedMap] = useState(null);\n\n  const [isLoading, setLoading] = useState(true)\n\n  const [schedulerStarted, setSchedulerStarted] = useState(false);\n\n  const [displayOverlayMap, setDisplayOverlayMap] = useState(false);\n\n  useEffect( () => {\n      const fetchMaps = async () => {\n      \n      const response = await fetch('/api/map');\n      const data = await response.json();\n\n      if (!schedulerStarted) {\n        try {\n          const createNewMapResponse = await fetch('/api/services/scheduler', {\n            method: 'POST',\n            body: JSON.stringify({})\n          })\n          setSchedulerStarted(true);\n        } catch  (error) {\n          console.log(error);\n        }\n      }\n\n      setMaps(data);\n\n      if (!selectedMap) {\n        let urlParams = '?selectedMap=newest'\n        fetch('/api/map' + urlParams)\n          .then((res) => res.json())\n          .then((selectedMap) => {\n            setSelectedMap(selectedMap[0])\n            setLoading(false)\n        })\n      }\n      \n    }\n\n    fetchMaps();\n  }, [])\n\n  // console.log('selectedMap on page level : ' + selectedMap);\n\n  const toggleOverlayMap = () => {\n    setDisplayOverlayMap(!displayOverlayMap);\n    console.log('over lay ? ' + displayOverlayMap);\n  }\n\n  if (isLoading) return <p>Loading...</p>\n\n  return (\n\n    <section className='w-full flex-center flex-col'>\n        \n        <p className='desc text-center'>\n            GeoRaffe is your stop for comparing\n            geographical maps with one another\n        </p>\n        <div className='w-full flex-center flex-row my-2.5'>\n          {selectedMap.controlPoints && selectedMap.controlPoints.length >= 3 ? (\n            <Button onClick={() => toggleOverlayMap(true)}>{displayOverlayMap ? 'Georeference' : 'Overlay map'}</Button>\n          ) : ( <></>)\n          }\n        </div>\n        <div className='w-full flex-center flex-row'>\n            <Suspense fallback={<Loading />}>\n              <MyMapsDrawer maps={maps} setMaps={setMaps} selectedMap={selectedMap} setSelectedMap={setSelectedMap}/>\n              {!displayOverlayMap ? (\n                <GeorefMap selectedMap={selectedMap}/>\n              ) : (\n                <OverlayMap selectedMap={selectedMap}/>\n              )}\n            </Suspense>\n            <CreateMapModal maps={maps} setMaps={setMaps}/>\n        </div>\n       \n\n    </section>\n  )\n}\n\nexport default Home"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA;;;;;;;;;;AAcA,MAAM,OAAO;;IACX,8CAA8C;IAC9C,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE,EAAE;IACnC,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAE/C,MAAM,CAAC,WAAW,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAEzC,MAAM,CAAC,kBAAkB,oBAAoB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAEzD,MAAM,CAAC,mBAAmB,qBAAqB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAE3D,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAG;QACP,MAAM,YAAY;YAElB,MAAM,WAAW,MAAM,MAAM;YAC7B,MAAM,OAAO,MAAM,SAAS,IAAI;YAEhC,IAAI,CAAC,kBAAkB;gBACrB,IAAI;oBACF,MAAM,uBAAuB,MAAM,MAAM,2BAA2B;wBAClE,QAAQ;wBACR,MAAM,KAAK,SAAS,CAAC,CAAC;oBACxB;oBACA,oBAAoB;gBACtB,EAAE,OAAQ,OAAO;oBACf,QAAQ,GAAG,CAAC;gBACd;YACF;YAEA,QAAQ;YAER,IAAI,CAAC,aAAa;gBAChB,IAAI,YAAY;gBAChB,MAAM,aAAa,WAChB,IAAI,CAAC,CAAC,MAAQ,IAAI,IAAI,IACtB,IAAI,CAAC,CAAC;oBACL,eAAe,WAAW,CAAC,EAAE;oBAC7B,WAAW;gBACf;YACF;QAEF;QAEA;IACF,GAAG,EAAE;IAEL,6DAA6D;IAE7D,MAAM,mBAAmB;QACvB,qBAAqB,CAAC;QACtB,QAAQ,GAAG,CAAC,gBAAgB;IAC9B;IAEA,IAAI,WAAW,qBAAO,6LAAC;kBAAE;;;;;;IAEzB,qBAEE,6LAAC;QAAQ,WAAU;;0BAEf,6LAAC;gBAAE,WAAU;0BAAmB;;;;;;0BAIhC,6LAAC;gBAAI,WAAU;0BACZ,YAAY,aAAa,IAAI,YAAY,aAAa,CAAC,MAAM,IAAI,kBAChE,6LAAC,sLAAA,CAAA,SAAM;oBAAC,SAAS,IAAM,iBAAiB;8BAAQ,oBAAoB,iBAAiB;;;;;yCACjF;;;;;;0BAGR,6LAAC;gBAAI,WAAU;;kCACX,6LAAC,6JAAA,CAAA,WAAQ;wBAAC,wBAAU,6LAAC,iHAAA,CAAA,UAAO;;;;;;0CAC1B,6LAAC,8HAAA,CAAA,UAAY;gCAAC,MAAM;gCAAM,SAAS;gCAAS,aAAa;gCAAa,gBAAgB;;;;;;4BACrF,CAAC,kCACA,6LAAC,2HAAA,CAAA,UAAS;gCAAC,aAAa;;;;;qDAExB,6LAAC,4HAAA,CAAA,UAAU;gCAAC,aAAa;;;;;;;;;;;;kCAG7B,6LAAC,gIAAA,CAAA,UAAc;wBAAC,MAAM;wBAAM,SAAS;;;;;;;;;;;;;;;;;;AAMjD;GApFM;KAAA;uCAsFS"}},
    {"offset": {"line": 1521, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}